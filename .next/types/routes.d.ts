// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/admin" | "/admin/add-user" | "/admin/analytics" | "/admin/analytics/clients/[id]" | "/admin/client-configurations" | "/admin/clients" | "/admin/clients/[id]" | "/admin/clients/[id]/edit" | "/admin/credits" | "/admin/register-client" | "/admin/settings" | "/admin/settings/clients/[id]" | "/admin/test" | "/credits" | "/debug-auth" | "/login" | "/orders" | "/settings" | "/test-auth" | "/test-login" | "/test-page" | "/test-pwa" | "/test-ssr" | "/view-orders"
type AppRouteHandlerRoutes = "/api/admin/client-configurations" | "/api/admin/clients" | "/api/admin/clients/[id]" | "/api/admin/clients/[id]/update-password" | "/api/admin/credits" | "/api/admin/credits/[clientId]" | "/api/admin/credits/[clientId]/costs" | "/api/admin/credits/[clientId]/transactions" | "/api/admin/settings/clients/[id]" | "/api/admin/system-config" | "/api/admin/users" | "/api/admin/users/[id]/update-password" | "/api/analytics/clients" | "/api/analytics/clients/[id]" | "/api/analytics/platform" | "/api/analytics/track" | "/api/auth/login" | "/api/auth/register-client" | "/api/auth/register-user" | "/api/auth/verify" | "/api/courier-services" | "/api/credits" | "/api/credits/transactions" | "/api/env-check" | "/api/format-address" | "/api/format-address-image" | "/api/order-config" | "/api/orders" | "/api/orders/[id]" | "/api/orders/[id]/retry-delhivery" | "/api/orders/[id]/shipping-label" | "/api/pickup-locations" | "/api/process-image" | "/api/process-text" | "/api/pwa/manifest" | "/api/test-admin" | "/api/test-auth" | "/api/test-clear-cache" | "/api/test-whatsapp" | "/api/upload" | "/api/users/profile" | "/api/validate-pincode"
type PageRoutes = never
type LayoutRoutes = "/" | "/admin"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/admin": {}
  "/admin/add-user": {}
  "/admin/analytics": {}
  "/admin/analytics/clients/[id]": { "id": string; }
  "/admin/client-configurations": {}
  "/admin/clients": {}
  "/admin/clients/[id]": { "id": string; }
  "/admin/clients/[id]/edit": { "id": string; }
  "/admin/credits": {}
  "/admin/register-client": {}
  "/admin/settings": {}
  "/admin/settings/clients/[id]": { "id": string; }
  "/admin/test": {}
  "/api/admin/client-configurations": {}
  "/api/admin/clients": {}
  "/api/admin/clients/[id]": { "id": string; }
  "/api/admin/clients/[id]/update-password": { "id": string; }
  "/api/admin/credits": {}
  "/api/admin/credits/[clientId]": { "clientId": string; }
  "/api/admin/credits/[clientId]/costs": { "clientId": string; }
  "/api/admin/credits/[clientId]/transactions": { "clientId": string; }
  "/api/admin/settings/clients/[id]": { "id": string; }
  "/api/admin/system-config": {}
  "/api/admin/users": {}
  "/api/admin/users/[id]/update-password": { "id": string; }
  "/api/analytics/clients": {}
  "/api/analytics/clients/[id]": { "id": string; }
  "/api/analytics/platform": {}
  "/api/analytics/track": {}
  "/api/auth/login": {}
  "/api/auth/register-client": {}
  "/api/auth/register-user": {}
  "/api/auth/verify": {}
  "/api/courier-services": {}
  "/api/credits": {}
  "/api/credits/transactions": {}
  "/api/env-check": {}
  "/api/format-address": {}
  "/api/format-address-image": {}
  "/api/order-config": {}
  "/api/orders": {}
  "/api/orders/[id]": { "id": string; }
  "/api/orders/[id]/retry-delhivery": { "id": string; }
  "/api/orders/[id]/shipping-label": { "id": string; }
  "/api/pickup-locations": {}
  "/api/process-image": {}
  "/api/process-text": {}
  "/api/pwa/manifest": {}
  "/api/test-admin": {}
  "/api/test-auth": {}
  "/api/test-clear-cache": {}
  "/api/test-whatsapp": {}
  "/api/upload": {}
  "/api/users/profile": {}
  "/api/validate-pincode": {}
  "/credits": {}
  "/debug-auth": {}
  "/login": {}
  "/orders": {}
  "/settings": {}
  "/test-auth": {}
  "/test-login": {}
  "/test-page": {}
  "/test-pwa": {}
  "/test-ssr": {}
  "/view-orders": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/admin": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
