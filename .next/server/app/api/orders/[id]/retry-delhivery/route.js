/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/orders/[id]/retry-delhivery/route";
exports.ids = ["app/api/orders/[id]/retry-delhivery/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute.ts&appDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute.ts&appDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_karthiknaidudintakurthi_Documents_GitHub_scan2ship_src_app_api_orders_id_retry_delhivery_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/orders/[id]/retry-delhivery/route.ts */ \"(rsc)/./src/app/api/orders/[id]/retry-delhivery/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/orders/[id]/retry-delhivery/route\",\n        pathname: \"/api/orders/[id]/retry-delhivery\",\n        filename: \"route\",\n        bundlePath: \"app/api/orders/[id]/retry-delhivery/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/karthiknaidudintakurthi/Documents/GitHub/scan2ship/src/app/api/orders/[id]/retry-delhivery/route.ts\",\n    nextConfigOutput,\n    userland: _Users_karthiknaidudintakurthi_Documents_GitHub_scan2ship_src_app_api_orders_id_retry_delhivery_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/orders/[id]/retry-delhivery/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute.ts&appDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/orders/[id]/retry-delhivery/route.ts":
/*!**********************************************************!*\
  !*** ./src/app/api/orders/[id]/retry-delhivery/route.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var _lib_delhivery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/delhivery */ \"(rsc)/./src/lib/delhivery.ts\");\n\n\n\nasync function POST(request, { params }) {\n    const { id } = await params;\n    const orderId = parseInt(id);\n    try {\n        // Get the order\n        const order = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.findUnique({\n            where: {\n                id: orderId\n            }\n        });\n        if (!order) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Order not found'\n            }, {\n                status: 404\n            });\n        }\n        if (order.courier_service.toLowerCase() !== 'delhivery') {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Order is not a Delhivery order'\n            }, {\n                status: 400\n            });\n        }\n        if (order.delhivery_api_status === 'success') {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Order already successfully created in Delhivery'\n            }, {\n                status: 400\n            });\n        }\n        // Check retry limit\n        if (order.delhivery_retry_count >= 3) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Maximum retry attempts reached'\n            }, {\n                status: 400\n            });\n        }\n        console.log(`Retrying Delhivery order creation for order ID: ${orderId}`);\n        // Prepare order data for Delhivery API\n        const orderData = {\n            name: order.name,\n            mobile: order.mobile,\n            address: order.address,\n            city: order.city,\n            state: order.state,\n            country: order.country,\n            pincode: order.pincode,\n            courier_service: order.courier_service,\n            pickup_location: order.pickup_location,\n            package_value: order.package_value,\n            weight: order.weight,\n            total_items: order.total_items,\n            tracking_id: order.tracking_id,\n            reference_number: order.reference_number,\n            is_cod: order.is_cod,\n            cod_amount: order.cod_amount,\n            reseller_name: order.reseller_name,\n            reseller_mobile: order.reseller_mobile\n        };\n        // Try to create order in Delhivery\n        console.log(`🚀 [RETRY_DELHIVERY] Calling Delhivery API for order ${orderId}...`);\n        const delhiveryResponse = await _lib_delhivery__WEBPACK_IMPORTED_MODULE_2__.delhiveryService.createOrder(orderData);\n        console.log(`📡 [RETRY_DELHIVERY] Delhivery API response:`, delhiveryResponse);\n        if (delhiveryResponse.success) {\n            // Update order with success details\n            console.log(`💾 [RETRY_DELHIVERY] Updating order ${orderId} in database...`);\n            console.log(`📝 [RETRY_DELHIVERY] Update data:`, {\n                delhivery_waybill_number: delhiveryResponse.waybill_number,\n                delhivery_order_id: delhiveryResponse.order_id,\n                delhivery_api_status: 'success',\n                delhivery_api_error: null,\n                delhivery_retry_count: order.delhivery_retry_count + 1,\n                last_delhivery_attempt: new Date(),\n                tracking_id: delhiveryResponse.waybill_number\n            });\n            let updatedOrder;\n            try {\n                updatedOrder = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.update({\n                    where: {\n                        id: orderId\n                    },\n                    data: {\n                        delhivery_waybill_number: delhiveryResponse.waybill_number,\n                        delhivery_order_id: delhiveryResponse.order_id,\n                        delhivery_api_status: 'success',\n                        delhivery_api_error: null,\n                        delhivery_retry_count: order.delhivery_retry_count + 1,\n                        last_delhivery_attempt: new Date(),\n                        // Update tracking_id with the new waybill number so it appears in orders list\n                        tracking_id: delhiveryResponse.waybill_number\n                    }\n                });\n                console.log(`✅ [RETRY_DELHIVERY] Database update successful for order ${orderId}`);\n            } catch (dbError) {\n                console.error(`❌ [RETRY_DELHIVERY] Database update failed for order ${orderId}:`, dbError);\n                throw new Error(`Failed to update order in database: ${dbError instanceof Error ? dbError.message : 'Unknown error'}`);\n            }\n            console.log(`✅ [RETRY_DELHIVERY] Order ${orderId} updated successfully with waybill: ${delhiveryResponse.waybill_number}`);\n            console.log(`📊 [RETRY_DELHIVERY] Updated order data:`, {\n                id: updatedOrder.id,\n                tracking_id: updatedOrder.tracking_id,\n                delhivery_waybill_number: updatedOrder.delhivery_waybill_number,\n                delhivery_api_status: updatedOrder.delhivery_api_status\n            });\n            // Verify the update actually worked by fetching the order again\n            const verificationOrder = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.findUnique({\n                where: {\n                    id: orderId\n                },\n                select: {\n                    id: true,\n                    tracking_id: true,\n                    delhivery_waybill_number: true,\n                    delhivery_api_status: true,\n                    delhivery_retry_count: true\n                }\n            });\n            console.log(`🔍 [RETRY_DELHIVERY] Verification - Order after update:`, verificationOrder);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Delhivery order created successfully',\n                waybill: delhiveryResponse.waybill_number,\n                order_id: delhiveryResponse.order_id\n            });\n        } else {\n            // Update order with failure details\n            await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.update({\n                where: {\n                    id: orderId\n                },\n                data: {\n                    delhivery_api_status: 'failed',\n                    delhivery_api_error: delhiveryResponse.error,\n                    delhivery_retry_count: order.delhivery_retry_count + 1,\n                    last_delhivery_attempt: new Date()\n                }\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to create Delhivery order',\n                details: delhiveryResponse.error,\n                retry_count: order.delhivery_retry_count + 1\n            }, {\n                status: 400\n            });\n        }\n    } catch (error) {\n        console.error('Error retrying Delhivery order:', error);\n        // Update order with error details\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.update({\n            where: {\n                id: orderId\n            },\n            data: {\n                delhivery_api_status: 'failed',\n                delhivery_api_error: error instanceof Error ? error.message : 'Unknown error',\n                delhivery_retry_count: {\n                    increment: 1\n                },\n                last_delhivery_attempt: new Date()\n            }\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to retry Delhivery order',\n            details: error instanceof Error ? error.message : 'Unknown error'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/orders/[id]/retry-delhivery/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/config.ts":
/*!***************************!*\
  !*** ./src/lib/config.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   validateConfig: () => (/* binding */ validateConfig)\n/* harmony export */ });\n// Environment configuration with validation\nconst config = {\n    database: {\n        url: process.env.DATABASE_URL\n    },\n    jwt: {\n        secret: process.env.JWT_SECRET || 'fallback-secret'\n    },\n    app: {\n        name: process.env.NEXT_PUBLIC_APP_NAME || 'Vanitha Logistics',\n        url: process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'\n    },\n    delhivery: {\n        baseUrl: process.env.DELHIVERY_BASE_URL || 'https://track.delhivery.com',\n        webhookSecret: process.env.DELHIVERY_WEBHOOK_SECRET\n    },\n    openai: {\n        apiKey: process.env.OPENAI_API_KEY,\n        model: process.env.OPENAI_MODEL || 'gpt-4o-mini'\n    }\n};\n// Validate required environment variables only at runtime\nfunction validateConfig() {\n    // Skip validation during build time completely\n    if (false) {}\n    return true;\n}\n// Export for use in other files\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (config);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2NvbmZpZy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0Q0FBNEM7QUFDckMsTUFBTUEsU0FBUztJQUNwQkMsVUFBVTtRQUNSQyxLQUFLQyxRQUFRQyxHQUFHLENBQUNDLFlBQVk7SUFDL0I7SUFDQUMsS0FBSztRQUNIQyxRQUFRSixRQUFRQyxHQUFHLENBQUNJLFVBQVUsSUFBSTtJQUNwQztJQUNBQyxLQUFLO1FBQ0hDLE1BQU1QLFFBQVFDLEdBQUcsQ0FBQ08sb0JBQW9CLElBQUk7UUFDMUNULEtBQUtDLFFBQVFDLEdBQUcsQ0FBQ1EsbUJBQW1CLElBQUk7SUFDMUM7SUFDQUMsV0FBVztRQUNUQyxTQUFTWCxRQUFRQyxHQUFHLENBQUNXLGtCQUFrQixJQUFJO1FBQzNDQyxlQUFlYixRQUFRQyxHQUFHLENBQUNhLHdCQUF3QjtJQUNyRDtJQUNBQyxRQUFRO1FBQ05DLFFBQVFoQixRQUFRQyxHQUFHLENBQUNnQixjQUFjO1FBQ2xDQyxPQUFPbEIsUUFBUUMsR0FBRyxDQUFDa0IsWUFBWSxJQUFJO0lBQ3JDO0FBQ0YsRUFBRTtBQUVGLDBEQUEwRDtBQUNuRCxTQUFTQztJQUNkLCtDQUErQztJQUMvQyxJQUFJcEIsS0FFeUIsRUFBRSxFQVc5QjtJQUVELE9BQU87QUFDVDtBQUVBLGdDQUFnQztBQUNoQyxpRUFBZUgsTUFBTUEsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2thcnRoaWtuYWlkdWRpbnRha3VydGhpL0RvY3VtZW50cy9HaXRIdWIvc2NhbjJzaGlwL3NyYy9saWIvY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEVudmlyb25tZW50IGNvbmZpZ3VyYXRpb24gd2l0aCB2YWxpZGF0aW9uXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xuICBkYXRhYmFzZToge1xuICAgIHVybDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLFxuICB9LFxuICBqd3Q6IHtcbiAgICBzZWNyZXQ6IHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgfHwgJ2ZhbGxiYWNrLXNlY3JldCcsXG4gIH0sXG4gIGFwcDoge1xuICAgIG5hbWU6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9OQU1FIHx8ICdWYW5pdGhhIExvZ2lzdGljcycsXG4gICAgdXJsOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnLFxuICB9LFxuICBkZWxoaXZlcnk6IHtcbiAgICBiYXNlVXJsOiBwcm9jZXNzLmVudi5ERUxISVZFUllfQkFTRV9VUkwgfHwgJ2h0dHBzOi8vdHJhY2suZGVsaGl2ZXJ5LmNvbScsXG4gICAgd2ViaG9va1NlY3JldDogcHJvY2Vzcy5lbnYuREVMSElWRVJZX1dFQkhPT0tfU0VDUkVULFxuICB9LFxuICBvcGVuYWk6IHtcbiAgICBhcGlLZXk6IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZLFxuICAgIG1vZGVsOiBwcm9jZXNzLmVudi5PUEVOQUlfTU9ERUwgfHwgJ2dwdC00by1taW5pJyxcbiAgfSxcbn07XG5cbi8vIFZhbGlkYXRlIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBvbmx5IGF0IHJ1bnRpbWVcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbmZpZygpIHtcbiAgLy8gU2tpcCB2YWxpZGF0aW9uIGR1cmluZyBidWlsZCB0aW1lIGNvbXBsZXRlbHlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgJiYgXG4gICAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyAmJiBcbiAgICAgICFwcm9jZXNzLmVudi5WRVJDRUxfQlVJTEQpIHtcbiAgICBjb25zdCByZXF1aXJlZCA9IFsnREFUQUJBU0VfVVJMJywgJ0pXVF9TRUNSRVQnXTtcbiAgICBjb25zdCBtaXNzaW5nID0gcmVxdWlyZWQuZmlsdGVyKGtleSA9PiAhcHJvY2Vzcy5lbnZba2V5XSk7XG4gICAgXG4gICAgaWYgKG1pc3NpbmcubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5lcnJvcignTWlzc2luZyByZXF1aXJlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6JywgbWlzc2luZyk7XG4gICAgICBjb25zb2xlLmVycm9yKCdBdmFpbGFibGUgZW52aXJvbm1lbnQgdmFyaWFibGVzOicsIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzOiAke21pc3Npbmcuam9pbignLCAnKX1gKTtcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coJ0Vudmlyb25tZW50IGNvbmZpZ3VyYXRpb24gdmFsaWRhdGVkIHN1Y2Nlc3NmdWxseScpO1xuICB9XG4gIFxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gRXhwb3J0IGZvciB1c2UgaW4gb3RoZXIgZmlsZXNcbmV4cG9ydCBkZWZhdWx0IGNvbmZpZztcbiJdLCJuYW1lcyI6WyJjb25maWciLCJkYXRhYmFzZSIsInVybCIsInByb2Nlc3MiLCJlbnYiLCJEQVRBQkFTRV9VUkwiLCJqd3QiLCJzZWNyZXQiLCJKV1RfU0VDUkVUIiwiYXBwIiwibmFtZSIsIk5FWFRfUFVCTElDX0FQUF9OQU1FIiwiTkVYVF9QVUJMSUNfQVBQX1VSTCIsImRlbGhpdmVyeSIsImJhc2VVcmwiLCJERUxISVZFUllfQkFTRV9VUkwiLCJ3ZWJob29rU2VjcmV0IiwiREVMSElWRVJZX1dFQkhPT0tfU0VDUkVUIiwib3BlbmFpIiwiYXBpS2V5IiwiT1BFTkFJX0FQSV9LRVkiLCJtb2RlbCIsIk9QRU5BSV9NT0RFTCIsInZhbGlkYXRlQ29uZmlnIiwiVkVSQ0VMX0JVSUxEIiwicmVxdWlyZWQiLCJtaXNzaW5nIiwiZmlsdGVyIiwia2V5IiwibGVuZ3RoIiwiY29uc29sZSIsImVycm9yIiwiT2JqZWN0Iiwia2V5cyIsIkVycm9yIiwiam9pbiIsImxvZyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/config.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/delhivery.ts":
/*!******************************!*\
  !*** ./src/lib/delhivery.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DelhiveryService: () => (/* binding */ DelhiveryService),\n/* harmony export */   delhiveryService: () => (/* binding */ delhiveryService)\n/* harmony export */ });\nclass DelhiveryService {\n    constructor(){\n        this.baseUrl = process.env.DELHIVERY_BASE_URL || 'https://track.delhivery.com';\n        this.maxRetries = 3;\n        // Debug logging\n        console.log('🔑 Delhivery Service Initialized:');\n        console.log('  Base URL:', this.baseUrl);\n        console.log('  Note: API Key will be taken from pickup location configuration');\n    }\n    async makeRequest(endpoint, options, apiKey, retryCount = 0) {\n        try {\n            const finalHeaders = {\n                'Authorization': `Token ${apiKey.trim()}`,\n                ...options.headers\n            };\n            // Validate API key format\n            if (!apiKey || typeof apiKey !== 'string') {\n                throw new Error('Invalid API key: API key is required and must be a string');\n            }\n            // Trim the API key and check if it's empty\n            const trimmedApiKey = apiKey.trim();\n            if (!trimmedApiKey) {\n                throw new Error('Invalid API key: API key is empty after trimming');\n            }\n            // Check for invalid characters in API key\n            const invalidChars = trimmedApiKey.match(/[^\\x20-\\x7E]/);\n            if (invalidChars) {\n                throw new Error(`Invalid API key: Contains invalid characters at position ${invalidChars.index}`);\n            }\n            console.log('🌐 Making Delhivery API request:');\n            console.log('  URL:', `${this.baseUrl}${endpoint}`);\n            console.log('  API Key:', apiKey ? `${apiKey.substring(0, 8)}***` : 'NOT SET');\n            console.log('  Headers:', JSON.stringify(finalHeaders, null, 2));\n            const response = await fetch(`${this.baseUrl}${endpoint}`, {\n                ...options,\n                headers: finalHeaders\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n            const result = await response.json();\n            return result;\n        } catch (error) {\n            if (retryCount < this.maxRetries) {\n                console.log(`Delhivery API request failed, retrying... (${retryCount + 1}/${this.maxRetries})`);\n                await new Promise((resolve)=>setTimeout(resolve, 1000 * (retryCount + 1))); // Exponential backoff\n                return this.makeRequest(endpoint, options, apiKey, retryCount + 1);\n            }\n            throw error;\n        }\n    }\n    async createOrder(orderData) {\n        try {\n            console.log('🚀 Creating Delhivery order with data:', orderData);\n            // Get API key from pickup location configuration\n            const { getDelhiveryApiKey } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_pickup-location-config_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./pickup-location-config */ \"(rsc)/./src/lib/pickup-location-config.ts\"));\n            const apiKey = await getDelhiveryApiKey(orderData.pickup_location);\n            if (!apiKey) {\n                throw new Error(`No Delhivery API key found for pickup location: ${orderData.pickup_location}. Please configure the API key in the client settings for this pickup location.`);\n            }\n            console.log('🔑 Using Delhivery API key from pickup location:', orderData.pickup_location);\n            // Log reseller information if present\n            if (orderData.reseller_name || orderData.reseller_mobile) {\n                console.log('🏪 Reseller Information:');\n                console.log('  Name:', orderData.reseller_name || 'Not provided');\n                console.log('  Mobile:', orderData.reseller_mobile || 'Not provided');\n            }\n            // Helper function to sanitize text fields for JSON\n            const sanitizeText = (text)=>{\n                if (!text) return '';\n                return String(text).replace(/[\\r\\n\\t]/g, ' ') // Replace newlines and tabs with spaces\n                .replace(/\"/g, '\"') // Escape double quotes\n                .replace(/\\\\/g, '\\\\\\\\') // Escape backslashes\n                .trim(); // Remove leading/trailing whitespace\n            };\n            // Map order data to Delhivery API format - exactly matching the working example\n            const shipmentData = {\n                name: sanitizeText(orderData.name),\n                add: sanitizeText(orderData.address),\n                pin: sanitizeText(orderData.pincode),\n                city: sanitizeText(orderData.city),\n                state: sanitizeText(orderData.state),\n                country: sanitizeText(orderData.country) || 'India',\n                phone: sanitizeText(orderData.phone || orderData.mobile),\n                mobile: sanitizeText(orderData.mobile),\n                order: sanitizeText(orderData.reference_number) || `Order-${Date.now()}`,\n                payment_mode: orderData.is_cod ? 'COD' : 'Prepaid',\n                return_pin: sanitizeText(orderData.return_pincode),\n                return_city: '',\n                return_phone: '',\n                return_add: sanitizeText(orderData.return_address?.address || orderData.return_address),\n                return_state: '',\n                return_country: 'India',\n                products_desc: sanitizeText(orderData.product_description),\n                hsn_code: sanitizeText(orderData.hsn_code),\n                cod_amount: orderData.is_cod ? orderData.cod_amount?.toString() || '' : '',\n                order_date: null,\n                total_amount: orderData.package_value?.toString() || '',\n                seller_add: sanitizeText(orderData.seller_address),\n                seller_name: sanitizeText(orderData.reseller_name || orderData.seller_name),\n                seller_inv: sanitizeText(orderData.invoice_number),\n                seller_phone: sanitizeText(orderData.reseller_mobile),\n                quantity: orderData.total_items?.toString() || '',\n                waybill: orderData.tracking_id || '',\n                shipment_length: orderData.shipment_length?.toString() || '100',\n                shipment_width: orderData.shipment_breadth?.toString() || '100',\n                shipment_height: orderData.shipment_height?.toString() || '100',\n                weight: orderData.weight?.toString() || '',\n                shipping_mode: 'Surface',\n                address_type: '' // Match the curl example format\n            };\n            // Prepare the JSON data for the request\n            const jsonData = {\n                shipments: [\n                    shipmentData\n                ],\n                pickup_location: {\n                    name: orderData.pickup_location || 'VIJAYA8 FRANCHISE'\n                }\n            };\n            // Validate JSON can be stringified without errors\n            let jsonString;\n            try {\n                jsonString = JSON.stringify(jsonData);\n                console.log('✅ JSON validation successful');\n            } catch (jsonError) {\n                console.error('❌ JSON stringification failed:', jsonError);\n                console.error('❌ Problematic data:', jsonData);\n                throw new Error(`JSON preparation failed: ${jsonError instanceof Error ? jsonError.message : 'Unknown error'}`);\n            }\n            // Send data exactly as the working example - as form data with format=json&data={...}\n            const requestBody = `format=json&data=${jsonString}`;\n            console.log('📦 Delhivery API Request Body:', requestBody);\n            console.log('🔍 [DELHIVERY] Pickup location being sent:', orderData.pickup_location);\n            console.log('🔍 [DELHIVERY] Sanitized shipment data:', JSON.stringify(shipmentData, null, 2));\n            console.log('🔍 [DELHIVERY] JSON data length:', jsonString.length, 'characters');\n            const response = await this.makeRequest('/api/cmu/create.json', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: requestBody\n            }, apiKey);\n            // Log the response with proper formatting to show array contents\n            console.log('✅ Delhivery order created successfully:');\n            console.log('  Raw Response:', JSON.stringify(response, null, 2));\n            // Check if the API call was successful\n            if (response.success === false || response.error === true) {\n                let errorMessage = 'Delhivery API returned an error';\n                // Try to extract error message from remarks array if available\n                if (response.packages && response.packages.length > 0) {\n                    const packageInfo = response.packages[0];\n                    if (packageInfo.remarks && Array.isArray(packageInfo.remarks) && packageInfo.remarks.length > 0) {\n                        errorMessage = `Delhivery API Error: ${packageInfo.remarks.join(', ')}`;\n                    }\n                }\n                // Fallback to rmk field if available\n                if (response.rmk) {\n                    errorMessage = `Delhivery API Error: ${response.rmk}`;\n                }\n                // Log detailed error information for debugging\n                console.error('❌ [DELHIVERY] API Error Details:', {\n                    success: response.success,\n                    error: response.error,\n                    rmk: response.rmk,\n                    packages: response.packages,\n                    fullResponse: response\n                });\n                throw new Error(errorMessage);\n            }\n            // Extract waybill number and order ID from packages array\n            let waybillNumber = '';\n            let orderId = '';\n            if (response.packages && response.packages.length > 0) {\n                const packageInfo = response.packages[0];\n                waybillNumber = packageInfo.waybill || '';\n                orderId = packageInfo.refnum || '';\n                console.log('📦 Extracted waybill from package:');\n                console.log('  Package Info:', JSON.stringify(packageInfo, null, 2));\n                // Log remarks array content if it exists\n                if (packageInfo.remarks && Array.isArray(packageInfo.remarks)) {\n                    console.log('  Remarks:', packageInfo.remarks);\n                    console.log('  Remarks (stringified):', JSON.stringify(packageInfo.remarks, null, 2));\n                }\n            }\n            return {\n                success: true,\n                waybill_number: waybillNumber,\n                order_id: orderId,\n                message: 'Order created successfully'\n            };\n        } catch (error) {\n            console.error('❌ Failed to create Delhivery order:', error);\n            throw error;\n        }\n    }\n    async getOrderStatus(waybill, pickupLocation) {\n        try {\n            // Get API key from pickup location configuration\n            const { getDelhiveryApiKey } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_pickup-location-config_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./pickup-location-config */ \"(rsc)/./src/lib/pickup-location-config.ts\"));\n            const apiKey = await getDelhiveryApiKey(pickupLocation);\n            if (!apiKey) {\n                throw new Error(`No Delhivery API key found for pickup location: ${pickupLocation}`);\n            }\n            const response = await this.makeRequest(`/api/waybill/${waybill}`, {}, apiKey);\n            return response;\n        } catch (error) {\n            console.error('Delhivery Status API Error:', error);\n            throw error;\n        }\n    }\n    async validatePincode(pincode, pickupLocation) {\n        try {\n            // Get API key from pickup location configuration\n            if (!pickupLocation) {\n                throw new Error('Pickup location is required for pincode validation');\n            }\n            const { getDelhiveryApiKey } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_pickup-location-config_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./pickup-location-config */ \"(rsc)/./src/lib/pickup-location-config.ts\"));\n            const apiKey = await getDelhiveryApiKey(pickupLocation);\n            if (!apiKey) {\n                throw new Error(`No Delhivery API key found for pickup location: ${pickupLocation}. Please configure it in the client settings.`);\n            }\n            // Use the production Delhivery pincode validation endpoint\n            const url = `${this.baseUrl}/c/api/pin-codes/json/?filter_codes=${pincode}`;\n            const options = {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Token ${apiKey}`,\n                    'Content-Type': 'application/json'\n                }\n            };\n            const response = await fetch(url, options);\n            if (response.ok) {\n                const data = await response.json();\n                // Check if pincode is serviceable based on Delhivery response\n                if (data && data.delivery_codes && Array.isArray(data.delivery_codes) && data.delivery_codes.length > 0) {\n                    const deliveryCode = data.delivery_codes[0];\n                    const postalCode = deliveryCode.postal_code;\n                    return {\n                        success: true,\n                        serviceable: true,\n                        city: postalCode.city || '',\n                        state: postalCode.inc ? postalCode.inc.split('_').pop()?.replace(/[()]/g, '').replace(/^[A-Z]\\s*/, '') || '' : '',\n                        country: 'India',\n                        message: 'Pincode is serviceable by Delhivery'\n                    };\n                } else if (data && data.delivery_codes && Array.isArray(data.delivery_codes) && data.delivery_codes.length === 0) {\n                    // Empty delivery_codes array means pincode not found\n                    return {\n                        success: true,\n                        serviceable: false,\n                        message: 'Pincode is not serviceable by Delhivery'\n                    };\n                } else {\n                    return {\n                        success: true,\n                        serviceable: false,\n                        message: 'Pincode is not serviceable by Delhivery'\n                    };\n                }\n            } else {\n                const errorText = await response.text();\n                throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n            }\n        } catch (error) {\n            return {\n                success: false,\n                serviceable: false,\n                error: error instanceof Error ? error.message : 'Failed to validate pincode'\n            };\n        }\n    }\n}\nconst delhiveryService = new DelhiveryService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VHdCLGFBQWE7d0JBQ2I3QixTQUFTO29CQUNYO2dCQUNGO1lBQ0YsT0FBTztnQkFDTCxNQUFNaUMsWUFBWSxNQUFNNUcsU0FBU2tCLElBQUk7Z0JBQ3JDLE1BQU0sSUFBSTFCLE1BQU0sQ0FBQyxLQUFLLEVBQUVRLFNBQVNHLE1BQU0sQ0FBQyxFQUFFLEVBQUVILFNBQVNJLFVBQVUsQ0FBQyxHQUFHLEVBQUV3RyxXQUFXO1lBQ2xGO1FBRUYsRUFBRSxPQUFPckcsT0FBTztZQUNkLE9BQU87Z0JBQ0x5RSxTQUFTO2dCQUNUd0IsYUFBYTtnQkFDYmpHLE9BQU9BLGlCQUFpQmYsUUFBUWUsTUFBTW9FLE9BQU8sR0FBRztZQUNsRDtRQUNGO0lBQ0Y7QUFDRjtBQUVPLE1BQU1rQyxtQkFBbUIsSUFBSXJJLG1CQUFtQiIsInNvdXJjZXMiOlsiL1VzZXJzL2thcnRoaWtuYWlkdWRpbnRha3VydGhpL0RvY3VtZW50cy9HaXRIdWIvc2NhbjJzaGlwL3NyYy9saWIvZGVsaGl2ZXJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBEZWxoaXZlcnlDcmVhdGVPcmRlclJlcXVlc3Qge1xuICB3YXliaWxsPzogc3RyaW5nOyAvLyBDYW4gYmUgZW1wdHkvbnVsbCB3aGVuIGNyZWF0aW5nIG5ldyBvcmRlclxuICBvcmRlcjogc3RyaW5nOyAvLyBSZWZlcmVuY2UgbnVtYmVyXG4gIHBpY2t1cF9sb2NhdGlvbjogc3RyaW5nOyAvLyBWZW5kb3IgcGlja3VwIGxvY2F0aW9uXG4gIGNvbnNpZ25lZToge1xuICAgIG5hbWU6IHN0cmluZzsgLy8gQ3VzdG9tZXIgbmFtZVxuICAgIGFkZHJlc3M6IHN0cmluZzsgLy8gQ29tcGxldGUgZGVsaXZlcnkgYWRkcmVzc1xuICAgIGNpdHk6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICBwaW5jb2RlOiBzdHJpbmc7XG4gICAgcGhvbmU6IHN0cmluZzsgLy8gQ3VzdG9tZXIgbW9iaWxlIG51bWJlclxuICB9O1xuICBwYXltZW50X21vZGU6IHN0cmluZzsgLy8gXCJwcmVwYWlkXCIgb3IgXCJjb2RcIiAobG93ZXJjYXNlIGFzIGV4cGVjdGVkIGJ5IERlbGhpdmVyeSBBUEkpXG4gIGNvZF9hbW91bnQ/OiBudW1iZXI7IC8vIFJlcXVpcmVkIGlmIHBheW1lbnQgbW9kZSBpcyBDT0RcbiAgcGFja2FnZV9kZXRhaWxzOiB7XG4gICAgd2VpZ2h0OiBudW1iZXI7IC8vIFNoaXBtZW50IHdlaWdodFxuICAgIGxlbmd0aDogbnVtYmVyOyAvLyBTaGlwbWVudCBsZW5ndGhcbiAgICBicmVhZHRoOiBudW1iZXI7IC8vIFNoaXBtZW50IGJyZWFkdGhcbiAgICBoZWlnaHQ6IG51bWJlcjsgLy8gU2hpcG1lbnQgaGVpZ2h0XG4gICAgcGFja2FnZV92YWx1ZTogbnVtYmVyOyAvLyBQYWNrYWdlIGFtb3VudFxuICAgIGNvbW1vZGl0eV92YWx1ZT86IG51bWJlcjsgLy8gQ29tbW9kaXR5IHZhbHVlXG4gICAgdGF4X3ZhbHVlPzogbnVtYmVyOyAvLyBUYXggdmFsdWVcbiAgICBjYXRlZ29yeV9vZl9nb29kcz86IHN0cmluZzsgLy8gQ2F0ZWdvcnkgb2YgZ29vZHNcbiAgfTtcbiAgcHJvZHVjdF9kZXNjcmlwdGlvbj86IHN0cmluZzsgLy8gUHJvZHVjdCB0byBiZSBzaGlwcGVkXG4gIHJldHVybl9hZGRyZXNzPzogc3RyaW5nOyAvLyBSZXR1cm4gcGlja3VwIGxvY2F0aW9uXG4gIHJldHVybl9waW5jb2RlPzogc3RyaW5nOyAvLyBSZXR1cm4gcGluXG4gIGZyYWdpbGVfc2hpcG1lbnQ/OiBib29sZWFuOyAvLyBUcnVlL2ZhbHNlXG4gIHNlbGxlcl9kZXRhaWxzPzoge1xuICAgIG5hbWU/OiBzdHJpbmc7IC8vIFNlbGxlciBuYW1lXG4gICAgYWRkcmVzcz86IHN0cmluZzsgLy8gU2VsbGVyIGFkZHJlc3NcbiAgICBnc3Q/OiBzdHJpbmc7IC8vIFNlbGxlciBHU1RcbiAgICBpbnZvaWNlX251bWJlcj86IHN0cmluZzsgLy8gSW52b2ljZSBudW1iZXJcbiAgfTtcbiAgcXVhbnRpdHk/OiBudW1iZXI7IC8vIFF1YW50aXR5XG4gIHJlZmVyZW5jZV9udW1iZXI/OiBzdHJpbmc7IC8vIFlvdXIgb3duIG9yZGVyIHJlZmVyZW5jZVxuICB0cmFja2luZ19pZD86IHN0cmluZzsgLy8gVHJhY2tpbmcgSURcbn1cblxuaW50ZXJmYWNlIERlbGhpdmVyeUNyZWF0ZU9yZGVyUmVzcG9uc2Uge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICB3YXliaWxsX251bWJlcjogc3RyaW5nO1xuICBvcmRlcl9pZDogc3RyaW5nO1xuICBtZXNzYWdlPzogc3RyaW5nO1xuICBlcnJvcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIERlbGhpdmVyeVNlcnZpY2Uge1xuICBwcml2YXRlIGJhc2VVcmw6IHN0cmluZztcbiAgcHJpdmF0ZSBtYXhSZXRyaWVzOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5iYXNlVXJsID0gcHJvY2Vzcy5lbnYuREVMSElWRVJZX0JBU0VfVVJMIHx8ICdodHRwczovL3RyYWNrLmRlbGhpdmVyeS5jb20nXG4gICAgdGhpcy5tYXhSZXRyaWVzID0gM1xuICAgIFxuICAgIC8vIERlYnVnIGxvZ2dpbmdcbiAgICBjb25zb2xlLmxvZygn8J+UkSBEZWxoaXZlcnkgU2VydmljZSBJbml0aWFsaXplZDonKVxuICAgIGNvbnNvbGUubG9nKCcgIEJhc2UgVVJMOicsIHRoaXMuYmFzZVVybClcbiAgICBjb25zb2xlLmxvZygnICBOb3RlOiBBUEkgS2V5IHdpbGwgYmUgdGFrZW4gZnJvbSBwaWNrdXAgbG9jYXRpb24gY29uZmlndXJhdGlvbicpXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIG1ha2VSZXF1ZXN0KGVuZHBvaW50OiBzdHJpbmcsIG9wdGlvbnM6IFJlcXVlc3RJbml0LCBhcGlLZXk6IHN0cmluZywgcmV0cnlDb3VudCA9IDApOiBQcm9taXNlPGFueT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBmaW5hbEhlYWRlcnMgPSB7XG4gICAgICAgICdBdXRob3JpemF0aW9uJzogYFRva2VuICR7YXBpS2V5LnRyaW0oKX1gLFxuICAgICAgICAuLi5vcHRpb25zLmhlYWRlcnMsXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBWYWxpZGF0ZSBBUEkga2V5IGZvcm1hdFxuICAgICAgaWYgKCFhcGlLZXkgfHwgdHlwZW9mIGFwaUtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFQSSBrZXk6IEFQSSBrZXkgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVHJpbSB0aGUgQVBJIGtleSBhbmQgY2hlY2sgaWYgaXQncyBlbXB0eVxuICAgICAgY29uc3QgdHJpbW1lZEFwaUtleSA9IGFwaUtleS50cmltKCk7XG4gICAgICBpZiAoIXRyaW1tZWRBcGlLZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFQSSBrZXk6IEFQSSBrZXkgaXMgZW1wdHkgYWZ0ZXIgdHJpbW1pbmcnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgZm9yIGludmFsaWQgY2hhcmFjdGVycyBpbiBBUEkga2V5XG4gICAgICBjb25zdCBpbnZhbGlkQ2hhcnMgPSB0cmltbWVkQXBpS2V5Lm1hdGNoKC9bXlxceDIwLVxceDdFXS8pO1xuICAgICAgaWYgKGludmFsaWRDaGFycykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgQVBJIGtleTogQ29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIGF0IHBvc2l0aW9uICR7aW52YWxpZENoYXJzLmluZGV4fWApO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygn8J+MkCBNYWtpbmcgRGVsaGl2ZXJ5IEFQSSByZXF1ZXN0OicpXG4gICAgICBjb25zb2xlLmxvZygnICBVUkw6JywgYCR7dGhpcy5iYXNlVXJsfSR7ZW5kcG9pbnR9YClcbiAgICAgIGNvbnNvbGUubG9nKCcgIEFQSSBLZXk6JywgYXBpS2V5ID8gYCR7YXBpS2V5LnN1YnN0cmluZygwLCA4KX0qKipgIDogJ05PVCBTRVQnKVxuICAgICAgY29uc29sZS5sb2coJyAgSGVhZGVyczonLCBKU09OLnN0cmluZ2lmeShmaW5hbEhlYWRlcnMsIG51bGwsIDIpKVxuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVybH0ke2VuZHBvaW50fWAsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgaGVhZGVyczogZmluYWxIZWFkZXJzLFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAocmV0cnlDb3VudCA8IHRoaXMubWF4UmV0cmllcykge1xuICAgICAgICBjb25zb2xlLmxvZyhgRGVsaGl2ZXJ5IEFQSSByZXF1ZXN0IGZhaWxlZCwgcmV0cnlpbmcuLi4gKCR7cmV0cnlDb3VudCArIDF9LyR7dGhpcy5tYXhSZXRyaWVzfSlgKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDAgKiAocmV0cnlDb3VudCArIDEpKSk7IC8vIEV4cG9uZW50aWFsIGJhY2tvZmZcbiAgICAgICAgcmV0dXJuIHRoaXMubWFrZVJlcXVlc3QoZW5kcG9pbnQsIG9wdGlvbnMsIGFwaUtleSwgcmV0cnlDb3VudCArIDEpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY3JlYXRlT3JkZXIob3JkZXJEYXRhOiBhbnkpOiBQcm9taXNlPERlbGhpdmVyeUNyZWF0ZU9yZGVyUmVzcG9uc2U+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ/CfmoAgQ3JlYXRpbmcgRGVsaGl2ZXJ5IG9yZGVyIHdpdGggZGF0YTonLCBvcmRlckRhdGEpO1xuICAgICAgXG4gICAgICAvLyBHZXQgQVBJIGtleSBmcm9tIHBpY2t1cCBsb2NhdGlvbiBjb25maWd1cmF0aW9uXG4gICAgICBjb25zdCB7IGdldERlbGhpdmVyeUFwaUtleSB9ID0gYXdhaXQgaW1wb3J0KCcuL3BpY2t1cC1sb2NhdGlvbi1jb25maWcnKTtcbiAgICAgIGNvbnN0IGFwaUtleSA9IGF3YWl0IGdldERlbGhpdmVyeUFwaUtleShvcmRlckRhdGEucGlja3VwX2xvY2F0aW9uKTtcbiAgICAgIFxuICAgICAgaWYgKCFhcGlLZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBEZWxoaXZlcnkgQVBJIGtleSBmb3VuZCBmb3IgcGlja3VwIGxvY2F0aW9uOiAke29yZGVyRGF0YS5waWNrdXBfbG9jYXRpb259LiBQbGVhc2UgY29uZmlndXJlIHRoZSBBUEkga2V5IGluIHRoZSBjbGllbnQgc2V0dGluZ3MgZm9yIHRoaXMgcGlja3VwIGxvY2F0aW9uLmApO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygn8J+UkSBVc2luZyBEZWxoaXZlcnkgQVBJIGtleSBmcm9tIHBpY2t1cCBsb2NhdGlvbjonLCBvcmRlckRhdGEucGlja3VwX2xvY2F0aW9uKTtcbiAgICAgIFxuICAgICAgLy8gTG9nIHJlc2VsbGVyIGluZm9ybWF0aW9uIGlmIHByZXNlbnRcbiAgICAgIGlmIChvcmRlckRhdGEucmVzZWxsZXJfbmFtZSB8fCBvcmRlckRhdGEucmVzZWxsZXJfbW9iaWxlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn4+qIFJlc2VsbGVyIEluZm9ybWF0aW9uOicpO1xuICAgICAgICBjb25zb2xlLmxvZygnICBOYW1lOicsIG9yZGVyRGF0YS5yZXNlbGxlcl9uYW1lIHx8ICdOb3QgcHJvdmlkZWQnKTtcbiAgICAgICAgY29uc29sZS5sb2coJyAgTW9iaWxlOicsIG9yZGVyRGF0YS5yZXNlbGxlcl9tb2JpbGUgfHwgJ05vdCBwcm92aWRlZCcpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gc2FuaXRpemUgdGV4dCBmaWVsZHMgZm9yIEpTT05cbiAgICAgIGNvbnN0IHNhbml0aXplVGV4dCA9ICh0ZXh0OiBhbnkpOiBzdHJpbmcgPT4ge1xuICAgICAgICBpZiAoIXRleHQpIHJldHVybiAnJztcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0ZXh0KVxuICAgICAgICAgIC5yZXBsYWNlKC9bXFxyXFxuXFx0XS9nLCAnICcpIC8vIFJlcGxhY2UgbmV3bGluZXMgYW5kIHRhYnMgd2l0aCBzcGFjZXNcbiAgICAgICAgICAucmVwbGFjZSgvXCIvZywgJ1wiJykgLy8gRXNjYXBlIGRvdWJsZSBxdW90ZXNcbiAgICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKSAvLyBFc2NhcGUgYmFja3NsYXNoZXNcbiAgICAgICAgICAudHJpbSgpOyAvLyBSZW1vdmUgbGVhZGluZy90cmFpbGluZyB3aGl0ZXNwYWNlXG4gICAgICB9O1xuXG4gICAgICAvLyBNYXAgb3JkZXIgZGF0YSB0byBEZWxoaXZlcnkgQVBJIGZvcm1hdCAtIGV4YWN0bHkgbWF0Y2hpbmcgdGhlIHdvcmtpbmcgZXhhbXBsZVxuICAgICAgY29uc3Qgc2hpcG1lbnREYXRhID0ge1xuICAgICAgICBuYW1lOiBzYW5pdGl6ZVRleHQob3JkZXJEYXRhLm5hbWUpLFxuICAgICAgICBhZGQ6IHNhbml0aXplVGV4dChvcmRlckRhdGEuYWRkcmVzcyksXG4gICAgICAgIHBpbjogc2FuaXRpemVUZXh0KG9yZGVyRGF0YS5waW5jb2RlKSxcbiAgICAgICAgY2l0eTogc2FuaXRpemVUZXh0KG9yZGVyRGF0YS5jaXR5KSxcbiAgICAgICAgc3RhdGU6IHNhbml0aXplVGV4dChvcmRlckRhdGEuc3RhdGUpLFxuICAgICAgICBjb3VudHJ5OiBzYW5pdGl6ZVRleHQob3JkZXJEYXRhLmNvdW50cnkpIHx8ICdJbmRpYScsXG4gICAgICAgIHBob25lOiBzYW5pdGl6ZVRleHQob3JkZXJEYXRhLnBob25lIHx8IG9yZGVyRGF0YS5tb2JpbGUpLFxuICAgICAgICBtb2JpbGU6IHNhbml0aXplVGV4dChvcmRlckRhdGEubW9iaWxlKSxcbiAgICAgICAgb3JkZXI6IHNhbml0aXplVGV4dChvcmRlckRhdGEucmVmZXJlbmNlX251bWJlcikgfHwgYE9yZGVyLSR7RGF0ZS5ub3coKX1gLFxuICAgICAgICBwYXltZW50X21vZGU6IG9yZGVyRGF0YS5pc19jb2QgPyAnQ09EJyA6ICdQcmVwYWlkJywgLy8gTWF0Y2ggdGhlIGV4YWN0IGZvcm1hdCBmcm9tIGN1cmwgZXhhbXBsZVxuICAgICAgICByZXR1cm5fcGluOiBzYW5pdGl6ZVRleHQob3JkZXJEYXRhLnJldHVybl9waW5jb2RlKSxcbiAgICAgICAgcmV0dXJuX2NpdHk6ICcnLFxuICAgICAgICByZXR1cm5fcGhvbmU6ICcnLFxuICAgICAgICByZXR1cm5fYWRkOiBzYW5pdGl6ZVRleHQob3JkZXJEYXRhLnJldHVybl9hZGRyZXNzPy5hZGRyZXNzIHx8IG9yZGVyRGF0YS5yZXR1cm5fYWRkcmVzcyksXG4gICAgICAgIHJldHVybl9zdGF0ZTogJycsXG4gICAgICAgIHJldHVybl9jb3VudHJ5OiAnSW5kaWEnLFxuICAgICAgICBwcm9kdWN0c19kZXNjOiBzYW5pdGl6ZVRleHQob3JkZXJEYXRhLnByb2R1Y3RfZGVzY3JpcHRpb24pLFxuICAgICAgICBoc25fY29kZTogc2FuaXRpemVUZXh0KG9yZGVyRGF0YS5oc25fY29kZSksXG4gICAgICAgIGNvZF9hbW91bnQ6IG9yZGVyRGF0YS5pc19jb2QgPyAob3JkZXJEYXRhLmNvZF9hbW91bnQ/LnRvU3RyaW5nKCkgfHwgJycpIDogJycsXG4gICAgICAgIG9yZGVyX2RhdGU6IG51bGwsIC8vIE1hdGNoIHRoZSBjdXJsIGV4YW1wbGUgZm9ybWF0XG4gICAgICAgIHRvdGFsX2Ftb3VudDogb3JkZXJEYXRhLnBhY2thZ2VfdmFsdWU/LnRvU3RyaW5nKCkgfHwgJycsXG4gICAgICAgIHNlbGxlcl9hZGQ6IHNhbml0aXplVGV4dChvcmRlckRhdGEuc2VsbGVyX2FkZHJlc3MpLFxuICAgICAgICBzZWxsZXJfbmFtZTogc2FuaXRpemVUZXh0KG9yZGVyRGF0YS5yZXNlbGxlcl9uYW1lIHx8IG9yZGVyRGF0YS5zZWxsZXJfbmFtZSksXG4gICAgICAgIHNlbGxlcl9pbnY6IHNhbml0aXplVGV4dChvcmRlckRhdGEuaW52b2ljZV9udW1iZXIpLFxuICAgICAgICBzZWxsZXJfcGhvbmU6IHNhbml0aXplVGV4dChvcmRlckRhdGEucmVzZWxsZXJfbW9iaWxlKSxcbiAgICAgICAgcXVhbnRpdHk6IG9yZGVyRGF0YS50b3RhbF9pdGVtcz8udG9TdHJpbmcoKSB8fCAnJyxcbiAgICAgICAgd2F5YmlsbDogb3JkZXJEYXRhLnRyYWNraW5nX2lkIHx8ICcnLCAvLyBFbXB0eSBmb3IgbmV3IG9yZGVyc1xuICAgICAgICBzaGlwbWVudF9sZW5ndGg6IG9yZGVyRGF0YS5zaGlwbWVudF9sZW5ndGg/LnRvU3RyaW5nKCkgfHwgJzEwMCcsXG4gICAgICAgIHNoaXBtZW50X3dpZHRoOiBvcmRlckRhdGEuc2hpcG1lbnRfYnJlYWR0aD8udG9TdHJpbmcoKSB8fCAnMTAwJyxcbiAgICAgICAgc2hpcG1lbnRfaGVpZ2h0OiBvcmRlckRhdGEuc2hpcG1lbnRfaGVpZ2h0Py50b1N0cmluZygpIHx8ICcxMDAnLFxuICAgICAgICB3ZWlnaHQ6IG9yZGVyRGF0YS53ZWlnaHQ/LnRvU3RyaW5nKCkgfHwgJycsIC8vIFdlaWdodCBpbiBncmFtc1xuICAgICAgICBzaGlwcGluZ19tb2RlOiAnU3VyZmFjZScsIC8vIERlZmF1bHQgdG8gU3VyZmFjZVxuICAgICAgICBhZGRyZXNzX3R5cGU6ICcnIC8vIE1hdGNoIHRoZSBjdXJsIGV4YW1wbGUgZm9ybWF0XG4gICAgICB9O1xuXG4gICAgICAvLyBQcmVwYXJlIHRoZSBKU09OIGRhdGEgZm9yIHRoZSByZXF1ZXN0XG4gICAgICBjb25zdCBqc29uRGF0YSA9IHtcbiAgICAgICAgc2hpcG1lbnRzOiBbc2hpcG1lbnREYXRhXSxcbiAgICAgICAgcGlja3VwX2xvY2F0aW9uOiB7XG4gICAgICAgICAgbmFtZTogb3JkZXJEYXRhLnBpY2t1cF9sb2NhdGlvbiB8fCAnVklKQVlBOCBGUkFOQ0hJU0UnXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIFZhbGlkYXRlIEpTT04gY2FuIGJlIHN0cmluZ2lmaWVkIHdpdGhvdXQgZXJyb3JzXG4gICAgICBsZXQganNvblN0cmluZzogc3RyaW5nO1xuICAgICAgdHJ5IHtcbiAgICAgICAganNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGpzb25EYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2coJ+KchSBKU09OIHZhbGlkYXRpb24gc3VjY2Vzc2Z1bCcpO1xuICAgICAgfSBjYXRjaCAoanNvbkVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBKU09OIHN0cmluZ2lmaWNhdGlvbiBmYWlsZWQ6JywganNvbkVycm9yKTtcbiAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFByb2JsZW1hdGljIGRhdGE6JywganNvbkRhdGEpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEpTT04gcHJlcGFyYXRpb24gZmFpbGVkOiAke2pzb25FcnJvciBpbnN0YW5jZW9mIEVycm9yID8ganNvbkVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbmQgZGF0YSBleGFjdGx5IGFzIHRoZSB3b3JraW5nIGV4YW1wbGUgLSBhcyBmb3JtIGRhdGEgd2l0aCBmb3JtYXQ9anNvbiZkYXRhPXsuLi59XG4gICAgICBjb25zdCByZXF1ZXN0Qm9keSA9IGBmb3JtYXQ9anNvbiZkYXRhPSR7anNvblN0cmluZ31gO1xuXG4gICAgICBjb25zb2xlLmxvZygn8J+TpiBEZWxoaXZlcnkgQVBJIFJlcXVlc3QgQm9keTonLCByZXF1ZXN0Qm9keSk7XG4gICAgICBjb25zb2xlLmxvZygn8J+UjSBbREVMSElWRVJZXSBQaWNrdXAgbG9jYXRpb24gYmVpbmcgc2VudDonLCBvcmRlckRhdGEucGlja3VwX2xvY2F0aW9uKTtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUxISVZFUlldIFNhbml0aXplZCBzaGlwbWVudCBkYXRhOicsIEpTT04uc3RyaW5naWZ5KHNoaXBtZW50RGF0YSwgbnVsbCwgMikpO1xuICAgICAgY29uc29sZS5sb2coJ/CflI0gW0RFTEhJVkVSWV0gSlNPTiBkYXRhIGxlbmd0aDonLCBqc29uU3RyaW5nLmxlbmd0aCwgJ2NoYXJhY3RlcnMnKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KCcvYXBpL2NtdS9jcmVhdGUuanNvbicsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xuICAgICAgICB9LFxuICAgICAgICBib2R5OiByZXF1ZXN0Qm9keVxuICAgICAgfSwgYXBpS2V5KTtcblxuICAgICAgLy8gTG9nIHRoZSByZXNwb25zZSB3aXRoIHByb3BlciBmb3JtYXR0aW5nIHRvIHNob3cgYXJyYXkgY29udGVudHNcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgRGVsaGl2ZXJ5IG9yZGVyIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5OicpO1xuICAgICAgY29uc29sZS5sb2coJyAgUmF3IFJlc3BvbnNlOicsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLCBudWxsLCAyKSk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBBUEkgY2FsbCB3YXMgc3VjY2Vzc2Z1bFxuICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09IGZhbHNlIHx8IHJlc3BvbnNlLmVycm9yID09PSB0cnVlKSB7XG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSAnRGVsaGl2ZXJ5IEFQSSByZXR1cm5lZCBhbiBlcnJvcic7XG4gICAgICAgIFxuICAgICAgICAvLyBUcnkgdG8gZXh0cmFjdCBlcnJvciBtZXNzYWdlIGZyb20gcmVtYXJrcyBhcnJheSBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKHJlc3BvbnNlLnBhY2thZ2VzICYmIHJlc3BvbnNlLnBhY2thZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBwYWNrYWdlSW5mbyA9IHJlc3BvbnNlLnBhY2thZ2VzWzBdO1xuICAgICAgICAgIGlmIChwYWNrYWdlSW5mby5yZW1hcmtzICYmIEFycmF5LmlzQXJyYXkocGFja2FnZUluZm8ucmVtYXJrcykgJiYgcGFja2FnZUluZm8ucmVtYXJrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBgRGVsaGl2ZXJ5IEFQSSBFcnJvcjogJHtwYWNrYWdlSW5mby5yZW1hcmtzLmpvaW4oJywgJyl9YDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEZhbGxiYWNrIHRvIHJtayBmaWVsZCBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKHJlc3BvbnNlLnJtaykge1xuICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGBEZWxoaXZlcnkgQVBJIEVycm9yOiAke3Jlc3BvbnNlLnJta31gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBMb2cgZGV0YWlsZWQgZXJyb3IgaW5mb3JtYXRpb24gZm9yIGRlYnVnZ2luZ1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgW0RFTEhJVkVSWV0gQVBJIEVycm9yIERldGFpbHM6Jywge1xuICAgICAgICAgIHN1Y2Nlc3M6IHJlc3BvbnNlLnN1Y2Nlc3MsXG4gICAgICAgICAgZXJyb3I6IHJlc3BvbnNlLmVycm9yLFxuICAgICAgICAgIHJtazogcmVzcG9uc2Uucm1rLFxuICAgICAgICAgIHBhY2thZ2VzOiByZXNwb25zZS5wYWNrYWdlcyxcbiAgICAgICAgICBmdWxsUmVzcG9uc2U6IHJlc3BvbnNlXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEV4dHJhY3Qgd2F5YmlsbCBudW1iZXIgYW5kIG9yZGVyIElEIGZyb20gcGFja2FnZXMgYXJyYXlcbiAgICAgIGxldCB3YXliaWxsTnVtYmVyID0gJyc7XG4gICAgICBsZXQgb3JkZXJJZCA9ICcnO1xuICAgICAgaWYgKHJlc3BvbnNlLnBhY2thZ2VzICYmIHJlc3BvbnNlLnBhY2thZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcGFja2FnZUluZm8gPSByZXNwb25zZS5wYWNrYWdlc1swXTtcbiAgICAgICAgd2F5YmlsbE51bWJlciA9IHBhY2thZ2VJbmZvLndheWJpbGwgfHwgJyc7XG4gICAgICAgIG9yZGVySWQgPSBwYWNrYWdlSW5mby5yZWZudW0gfHwgJyc7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OmIEV4dHJhY3RlZCB3YXliaWxsIGZyb20gcGFja2FnZTonKTtcbiAgICAgICAgY29uc29sZS5sb2coJyAgUGFja2FnZSBJbmZvOicsIEpTT04uc3RyaW5naWZ5KHBhY2thZ2VJbmZvLCBudWxsLCAyKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBMb2cgcmVtYXJrcyBhcnJheSBjb250ZW50IGlmIGl0IGV4aXN0c1xuICAgICAgICBpZiAocGFja2FnZUluZm8ucmVtYXJrcyAmJiBBcnJheS5pc0FycmF5KHBhY2thZ2VJbmZvLnJlbWFya3MpKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJyAgUmVtYXJrczonLCBwYWNrYWdlSW5mby5yZW1hcmtzKTtcbiAgICAgICAgICBjb25zb2xlLmxvZygnICBSZW1hcmtzIChzdHJpbmdpZmllZCk6JywgSlNPTi5zdHJpbmdpZnkocGFja2FnZUluZm8ucmVtYXJrcywgbnVsbCwgMikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHdheWJpbGxfbnVtYmVyOiB3YXliaWxsTnVtYmVyLFxuICAgICAgICBvcmRlcl9pZDogb3JkZXJJZCxcbiAgICAgICAgbWVzc2FnZTogJ09yZGVyIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5J1xuICAgICAgfTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIGNyZWF0ZSBEZWxoaXZlcnkgb3JkZXI6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0T3JkZXJTdGF0dXMod2F5YmlsbDogc3RyaW5nLCBwaWNrdXBMb2NhdGlvbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICB0cnkge1xuICAgICAgLy8gR2V0IEFQSSBrZXkgZnJvbSBwaWNrdXAgbG9jYXRpb24gY29uZmlndXJhdGlvblxuICAgICAgY29uc3QgeyBnZXREZWxoaXZlcnlBcGlLZXkgfSA9IGF3YWl0IGltcG9ydCgnLi9waWNrdXAtbG9jYXRpb24tY29uZmlnJyk7XG4gICAgICBjb25zdCBhcGlLZXkgPSBhd2FpdCBnZXREZWxoaXZlcnlBcGlLZXkocGlja3VwTG9jYXRpb24pO1xuICAgICAgXG4gICAgICBpZiAoIWFwaUtleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIERlbGhpdmVyeSBBUEkga2V5IGZvdW5kIGZvciBwaWNrdXAgbG9jYXRpb246ICR7cGlja3VwTG9jYXRpb259YCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdChgL2FwaS93YXliaWxsLyR7d2F5YmlsbH1gLCB7fSwgYXBpS2V5KTtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRGVsaGl2ZXJ5IFN0YXR1cyBBUEkgRXJyb3I6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdmFsaWRhdGVQaW5jb2RlKHBpbmNvZGU6IHN0cmluZywgcGlja3VwTG9jYXRpb24/OiBzdHJpbmcpOiBQcm9taXNlPHtcbiAgICBzdWNjZXNzOiBib29sZWFuO1xuICAgIHNlcnZpY2VhYmxlOiBib29sZWFuO1xuICAgIGNpdHk/OiBzdHJpbmc7XG4gICAgc3RhdGU/OiBzdHJpbmc7XG4gICAgY291bnRyeT86IHN0cmluZztcbiAgICBtZXNzYWdlPzogc3RyaW5nO1xuICAgIGVycm9yPzogc3RyaW5nO1xuICB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBBUEkga2V5IGZyb20gcGlja3VwIGxvY2F0aW9uIGNvbmZpZ3VyYXRpb25cbiAgICAgIGlmICghcGlja3VwTG9jYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQaWNrdXAgbG9jYXRpb24gaXMgcmVxdWlyZWQgZm9yIHBpbmNvZGUgdmFsaWRhdGlvbicpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCB7IGdldERlbGhpdmVyeUFwaUtleSB9ID0gYXdhaXQgaW1wb3J0KCcuL3BpY2t1cC1sb2NhdGlvbi1jb25maWcnKTtcbiAgICAgIGNvbnN0IGFwaUtleSA9IGF3YWl0IGdldERlbGhpdmVyeUFwaUtleShwaWNrdXBMb2NhdGlvbik7XG4gICAgICBcbiAgICAgIGlmICghYXBpS2V5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gRGVsaGl2ZXJ5IEFQSSBrZXkgZm91bmQgZm9yIHBpY2t1cCBsb2NhdGlvbjogJHtwaWNrdXBMb2NhdGlvbn0uIFBsZWFzZSBjb25maWd1cmUgaXQgaW4gdGhlIGNsaWVudCBzZXR0aW5ncy5gKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVXNlIHRoZSBwcm9kdWN0aW9uIERlbGhpdmVyeSBwaW5jb2RlIHZhbGlkYXRpb24gZW5kcG9pbnRcbiAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMuYmFzZVVybH0vYy9hcGkvcGluLWNvZGVzL2pzb24vP2ZpbHRlcl9jb2Rlcz0ke3BpbmNvZGV9YDtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsIFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgVG9rZW4gJHthcGlLZXl9YCxcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKTtcblxuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiBwaW5jb2RlIGlzIHNlcnZpY2VhYmxlIGJhc2VkIG9uIERlbGhpdmVyeSByZXNwb25zZVxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmRlbGl2ZXJ5X2NvZGVzICYmIEFycmF5LmlzQXJyYXkoZGF0YS5kZWxpdmVyeV9jb2RlcykgJiYgZGF0YS5kZWxpdmVyeV9jb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgZGVsaXZlcnlDb2RlID0gZGF0YS5kZWxpdmVyeV9jb2Rlc1swXTtcbiAgICAgICAgICBjb25zdCBwb3N0YWxDb2RlID0gZGVsaXZlcnlDb2RlLnBvc3RhbF9jb2RlO1xuICAgICAgICAgIFxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgc2VydmljZWFibGU6IHRydWUsXG4gICAgICAgICAgICBjaXR5OiBwb3N0YWxDb2RlLmNpdHkgfHwgJycsXG4gICAgICAgICAgICBzdGF0ZTogcG9zdGFsQ29kZS5pbmMgPyBwb3N0YWxDb2RlLmluYy5zcGxpdCgnXycpLnBvcCgpPy5yZXBsYWNlKC9bKCldL2csICcnKS5yZXBsYWNlKC9eW0EtWl1cXHMqLywgJycpIHx8ICcnIDogJycsXG4gICAgICAgICAgICBjb3VudHJ5OiAnSW5kaWEnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1BpbmNvZGUgaXMgc2VydmljZWFibGUgYnkgRGVsaGl2ZXJ5JyxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgJiYgZGF0YS5kZWxpdmVyeV9jb2RlcyAmJiBBcnJheS5pc0FycmF5KGRhdGEuZGVsaXZlcnlfY29kZXMpICYmIGRhdGEuZGVsaXZlcnlfY29kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgLy8gRW1wdHkgZGVsaXZlcnlfY29kZXMgYXJyYXkgbWVhbnMgcGluY29kZSBub3QgZm91bmRcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIHNlcnZpY2VhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdQaW5jb2RlIGlzIG5vdCBzZXJ2aWNlYWJsZSBieSBEZWxoaXZlcnknLFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBzZXJ2aWNlYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnUGluY29kZSBpcyBub3Qgc2VydmljZWFibGUgYnkgRGVsaGl2ZXJ5JyxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0gLSAke2Vycm9yVGV4dH1gKTtcbiAgICAgIH1cblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgc2VydmljZWFibGU6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnRmFpbGVkIHRvIHZhbGlkYXRlIHBpbmNvZGUnLFxuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRlbGhpdmVyeVNlcnZpY2UgPSBuZXcgRGVsaGl2ZXJ5U2VydmljZSgpO1xuIl0sIm5hbWVzIjpbIkRlbGhpdmVyeVNlcnZpY2UiLCJiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIkRFTEhJVkVSWV9CQVNFX1VSTCIsIm1heFJldHJpZXMiLCJjb25zb2xlIiwibG9nIiwibWFrZVJlcXVlc3QiLCJlbmRwb2ludCIsIm9wdGlvbnMiLCJhcGlLZXkiLCJyZXRyeUNvdW50IiwiZmluYWxIZWFkZXJzIiwidHJpbSIsImhlYWRlcnMiLCJFcnJvciIsInRyaW1tZWRBcGlLZXkiLCJpbnZhbGlkQ2hhcnMiLCJtYXRjaCIsImluZGV4Iiwic3Vic3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJyZXN1bHQiLCJqc29uIiwiZXJyb3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJjcmVhdGVPcmRlciIsIm9yZGVyRGF0YSIsImdldERlbGhpdmVyeUFwaUtleSIsInBpY2t1cF9sb2NhdGlvbiIsInJlc2VsbGVyX25hbWUiLCJyZXNlbGxlcl9tb2JpbGUiLCJzYW5pdGl6ZVRleHQiLCJ0ZXh0IiwiU3RyaW5nIiwicmVwbGFjZSIsInNoaXBtZW50RGF0YSIsIm5hbWUiLCJhZGQiLCJhZGRyZXNzIiwicGluIiwicGluY29kZSIsImNpdHkiLCJzdGF0ZSIsImNvdW50cnkiLCJwaG9uZSIsIm1vYmlsZSIsIm9yZGVyIiwicmVmZXJlbmNlX251bWJlciIsIkRhdGUiLCJub3ciLCJwYXltZW50X21vZGUiLCJpc19jb2QiLCJyZXR1cm5fcGluIiwicmV0dXJuX3BpbmNvZGUiLCJyZXR1cm5fY2l0eSIsInJldHVybl9waG9uZSIsInJldHVybl9hZGQiLCJyZXR1cm5fYWRkcmVzcyIsInJldHVybl9zdGF0ZSIsInJldHVybl9jb3VudHJ5IiwicHJvZHVjdHNfZGVzYyIsInByb2R1Y3RfZGVzY3JpcHRpb24iLCJoc25fY29kZSIsImNvZF9hbW91bnQiLCJ0b1N0cmluZyIsIm9yZGVyX2RhdGUiLCJ0b3RhbF9hbW91bnQiLCJwYWNrYWdlX3ZhbHVlIiwic2VsbGVyX2FkZCIsInNlbGxlcl9hZGRyZXNzIiwic2VsbGVyX25hbWUiLCJzZWxsZXJfaW52IiwiaW52b2ljZV9udW1iZXIiLCJzZWxsZXJfcGhvbmUiLCJxdWFudGl0eSIsInRvdGFsX2l0ZW1zIiwid2F5YmlsbCIsInRyYWNraW5nX2lkIiwic2hpcG1lbnRfbGVuZ3RoIiwic2hpcG1lbnRfd2lkdGgiLCJzaGlwbWVudF9icmVhZHRoIiwic2hpcG1lbnRfaGVpZ2h0Iiwid2VpZ2h0Iiwic2hpcHBpbmdfbW9kZSIsImFkZHJlc3NfdHlwZSIsImpzb25EYXRhIiwic2hpcG1lbnRzIiwianNvblN0cmluZyIsImpzb25FcnJvciIsIm1lc3NhZ2UiLCJyZXF1ZXN0Qm9keSIsImxlbmd0aCIsIm1ldGhvZCIsImJvZHkiLCJzdWNjZXNzIiwiZXJyb3JNZXNzYWdlIiwicGFja2FnZXMiLCJwYWNrYWdlSW5mbyIsInJlbWFya3MiLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwicm1rIiwiZnVsbFJlc3BvbnNlIiwid2F5YmlsbE51bWJlciIsIm9yZGVySWQiLCJyZWZudW0iLCJ3YXliaWxsX251bWJlciIsIm9yZGVyX2lkIiwiZ2V0T3JkZXJTdGF0dXMiLCJwaWNrdXBMb2NhdGlvbiIsInZhbGlkYXRlUGluY29kZSIsInVybCIsImRhdGEiLCJkZWxpdmVyeV9jb2RlcyIsImRlbGl2ZXJ5Q29kZSIsInBvc3RhbENvZGUiLCJwb3N0YWxfY29kZSIsInNlcnZpY2VhYmxlIiwiaW5jIiwic3BsaXQiLCJwb3AiLCJlcnJvclRleHQiLCJkZWxoaXZlcnlTZXJ2aWNlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/delhivery.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"(rsc)/./src/lib/config.ts\");\n\n\n// Debug environment variables more explicitly\nconsole.log('=== PRISMA INITIALIZATION DEBUG ===');\nconsole.log('NODE_ENV:', \"development\");\nconsole.log('VERCEL_ENV:', process.env.VERCEL_ENV);\nconsole.log('DATABASE_URL from process.env:', process.env.DATABASE_URL ? 'SET' : 'NOT SET');\nconsole.log('DATABASE_URL from config:', _config__WEBPACK_IMPORTED_MODULE_1__.config.database.url ? 'SET' : 'NOT SET');\nconsole.log('All env vars with DATABASE:', Object.keys(process.env).filter((key)=>key.includes('DATABASE')));\nconsole.log('===================================');\n// Ensure DATABASE_URL is available\nif (!process.env.DATABASE_URL) {\n    console.error('CRITICAL: DATABASE_URL is missing from process.env');\n    console.error('Available environment variables:', Object.keys(process.env));\n    throw new Error('DATABASE_URL environment variable is not set');\n}\n// Use a single Prisma instance with proper connection management\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL\n        }\n    },\n    log: [\n        'query',\n        'info',\n        'warn',\n        'error'\n    ]\n});\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThDO0FBQ1o7QUFFbEMsOENBQThDO0FBQzlDRSxRQUFRQyxHQUFHLENBQUM7QUFDWkQsUUFBUUMsR0FBRyxDQUFDLGFBYzhDO0FBYjFERCxRQUFRQyxHQUFHLENBQUMsZUFBZUMsUUFBUUMsR0FBRyxDQUFDQyxVQUFVO0FBQ2pESixRQUFRQyxHQUFHLENBQUMsa0NBQWtDQyxRQUFRQyxHQUFHLENBQUNFLFlBQVksR0FBRyxRQUFRO0FBQ2pGTCxRQUFRQyxHQUFHLENBQUMsNkJBQTZCRiwyQ0FBTUEsQ0FBQ08sUUFBUSxDQUFDQyxHQUFHLEdBQUcsUUFBUTtBQUN2RVAsUUFBUUMsR0FBRyxDQUFDLCtCQUErQk8sT0FBT0MsSUFBSSxDQUFDUCxRQUFRQyxHQUFHLEVBQUVPLE1BQU0sQ0FBQ0MsQ0FBQUEsTUFBT0EsSUFBSUMsUUFBUSxDQUFDO0FBQy9GWixRQUFRQyxHQUFHLENBQUM7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxDQUFDQyxRQUFRQyxHQUFHLENBQUNFLFlBQVksRUFBRTtJQUM3QkwsUUFBUWEsS0FBSyxDQUFDO0lBQ2RiLFFBQVFhLEtBQUssQ0FBQyxvQ0FBb0NMLE9BQU9DLElBQUksQ0FBQ1AsUUFBUUMsR0FBRztJQUN6RSxNQUFNLElBQUlXLE1BQU07QUFDbEI7QUFFQSxpRUFBaUU7QUFDakUsTUFBTUMsa0JBQWtCQztBQUlqQixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSSxJQUFJbkIsd0RBQVlBLENBQUM7SUFDL0RvQixhQUFhO1FBQ1hDLElBQUk7WUFDRlosS0FBS0wsUUFBUUMsR0FBRyxDQUFDRSxZQUFZO1FBQy9CO0lBQ0Y7SUFDQUosS0FBSztRQUFDO1FBQVM7UUFBUTtRQUFRO0tBQVE7QUFDekMsR0FBRztBQUVILElBQUlDLElBQXFDLEVBQUVhLGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiL1VzZXJzL2thcnRoaWtuYWlkdWRpbnRha3VydGhpL0RvY3VtZW50cy9HaXRIdWIvc2NhbjJzaGlwL3NyYy9saWIvcHJpc21hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcblxuLy8gRGVidWcgZW52aXJvbm1lbnQgdmFyaWFibGVzIG1vcmUgZXhwbGljaXRseVxuY29uc29sZS5sb2coJz09PSBQUklTTUEgSU5JVElBTElaQVRJT04gREVCVUcgPT09Jyk7XG5jb25zb2xlLmxvZygnTk9ERV9FTlY6JywgcHJvY2Vzcy5lbnYuTk9ERV9FTlYpO1xuY29uc29sZS5sb2coJ1ZFUkNFTF9FTlY6JywgcHJvY2Vzcy5lbnYuVkVSQ0VMX0VOVik7XG5jb25zb2xlLmxvZygnREFUQUJBU0VfVVJMIGZyb20gcHJvY2Vzcy5lbnY6JywgcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID8gJ1NFVCcgOiAnTk9UIFNFVCcpO1xuY29uc29sZS5sb2coJ0RBVEFCQVNFX1VSTCBmcm9tIGNvbmZpZzonLCBjb25maWcuZGF0YWJhc2UudXJsID8gJ1NFVCcgOiAnTk9UIFNFVCcpO1xuY29uc29sZS5sb2coJ0FsbCBlbnYgdmFycyB3aXRoIERBVEFCQVNFOicsIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5maWx0ZXIoa2V5ID0+IGtleS5pbmNsdWRlcygnREFUQUJBU0UnKSkpO1xuY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XG5cbi8vIEVuc3VyZSBEQVRBQkFTRV9VUkwgaXMgYXZhaWxhYmxlXG5pZiAoIXByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCkge1xuICBjb25zb2xlLmVycm9yKCdDUklUSUNBTDogREFUQUJBU0VfVVJMIGlzIG1pc3NpbmcgZnJvbSBwcm9jZXNzLmVudicpO1xuICBjb25zb2xlLmVycm9yKCdBdmFpbGFibGUgZW52aXJvbm1lbnQgdmFyaWFibGVzOicsIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KSk7XG4gIHRocm93IG5ldyBFcnJvcignREFUQUJBU0VfVVJMIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBzZXQnKTtcbn1cblxuLy8gVXNlIGEgc2luZ2xlIFByaXNtYSBpbnN0YW5jZSB3aXRoIHByb3BlciBjb25uZWN0aW9uIG1hbmFnZW1lbnRcbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz8gbmV3IFByaXNtYUNsaWVudCh7XG4gIGRhdGFzb3VyY2VzOiB7XG4gICAgZGI6IHtcbiAgICAgIHVybDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLCAvLyBVc2UgcHJvY2Vzcy5lbnYgZGlyZWN0bHlcbiAgICB9LFxuICB9LFxuICBsb2c6IFsncXVlcnknLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJ10sXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7XG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiY29uZmlnIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3MiLCJlbnYiLCJWRVJDRUxfRU5WIiwiREFUQUJBU0VfVVJMIiwiZGF0YWJhc2UiLCJ1cmwiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwiaW5jbHVkZXMiLCJlcnJvciIsIkVycm9yIiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsImRhdGFzb3VyY2VzIiwiZGIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute&page=%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2F%5Bid%5D%2Fretry-delhivery%2Froute.ts&appDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();