/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/orders/route";
exports.ids = ["app/api/orders/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_karthiknaidudintakurthi_Documents_GitHub_scan2ship_src_app_api_orders_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/orders/route.ts */ \"(rsc)/./src/app/api/orders/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/orders/route\",\n        pathname: \"/api/orders\",\n        filename: \"route\",\n        bundlePath: \"app/api/orders/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/karthiknaidudintakurthi/Documents/GitHub/scan2ship/src/app/api/orders/route.ts\",\n    nextConfigOutput,\n    userland: _Users_karthiknaidudintakurthi_Documents_GitHub_scan2ship_src_app_api_orders_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/orders/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/orders/route.ts":
/*!*************************************!*\
  !*** ./src/app/api/orders/route.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_delhivery__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/delhivery */ \"(rsc)/./src/lib/delhivery.ts\");\n/* harmony import */ var _lib_whatsapp_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/whatsapp-service */ \"(rsc)/./src/lib/whatsapp-service.ts\");\n/* harmony import */ var _lib_reference_number__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/reference-number */ \"(rsc)/./src/lib/reference-number.ts\");\n/* harmony import */ var _lib_analytics_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/analytics-service */ \"(rsc)/./src/lib/analytics-service.ts\");\n\n\n\n\n\n\n\nconst delhiveryService = new _lib_delhivery__WEBPACK_IMPORTED_MODULE_3__.DelhiveryService();\n// Helper function to get authenticated user and client\nasync function getAuthenticatedUser(request) {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        console.log('🔐 [AUTH] No authorization header or invalid format');\n        return null;\n    }\n    const token = authHeader.substring(7);\n    console.log('🔐 [AUTH] Token extracted, length:', token.length);\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_2___default().verify(token, process.env.JWT_SECRET || 'fallback-secret');\n        console.log('🔐 [AUTH] JWT decoded successfully, userId:', decoded.userId);\n        // Get user and client data from database\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.users.findUnique({\n            where: {\n                id: decoded.userId\n            },\n            include: {\n                clients: true\n            }\n        });\n        console.log('🔐 [AUTH] User lookup result:', user ? 'Found' : 'Not found');\n        if (user) {\n            console.log('🔐 [AUTH] User active:', user.isActive, 'Client active:', user.clients?.isActive);\n        }\n        if (!user || !user.isActive || !user.clients.isActive) {\n            console.log('🔐 [AUTH] User validation failed:', {\n                userExists: !!user,\n                userActive: user?.isActive,\n                clientActive: user?.clients?.isActive\n            });\n            return null;\n        }\n        console.log('🔐 [AUTH] Authentication successful for user:', user.email, 'Client:', user.clients.companyName);\n        return {\n            user: user,\n            client: user.clients\n        };\n    } catch (error) {\n        console.log('🔐 [AUTH] JWT verification failed:', error);\n        return null;\n    }\n}\nasync function POST(request) {\n    try {\n        // Authenticate user\n        const auth = await getAuthenticatedUser(request);\n        if (!auth) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        const { client } = auth;\n        const orderData = await request.json();\n        console.log('📦 [API_ORDERS_POST] Creating order for client:', client.companyName);\n        // Validate required fields\n        const requiredFields = [\n            'name',\n            'mobile',\n            'address',\n            'city',\n            'state',\n            'country',\n            'pincode',\n            'courier_service',\n            'pickup_location',\n            'package_value',\n            'weight',\n            'total_items'\n        ];\n        for (const field of requiredFields){\n            if (!orderData[field]) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: `Missing required field: ${field}`\n                }, {\n                    status: 400\n                });\n            }\n        }\n        // Generate or format reference number\n        let referenceNumber;\n        if (orderData.reference_number && orderData.reference_number.trim()) {\n            // Use custom reference value with mobile number\n            referenceNumber = (0,_lib_reference_number__WEBPACK_IMPORTED_MODULE_5__.formatReferenceNumber)(orderData.reference_number.trim(), orderData.mobile);\n        } else {\n            // Auto-generate reference number\n            referenceNumber = (0,_lib_reference_number__WEBPACK_IMPORTED_MODULE_5__.generateReferenceNumber)(orderData.mobile);\n        }\n        // Convert string values to appropriate data types and map fields\n        const processedOrderData = {\n            ...orderData,\n            package_value: parseFloat(orderData.package_value) || 0,\n            weight: parseFloat(orderData.weight) || 0,\n            total_items: parseInt(orderData.total_items) || 1,\n            cod_amount: orderData.cod_amount ? parseFloat(orderData.cod_amount) : null,\n            tracking_id: orderData.waybill || orderData.tracking_id || null,\n            reference_number: referenceNumber,\n            clientId: client.id,\n            created_at: new Date(),\n            updated_at: new Date()\n        };\n        // Remove fields that are not in the database schema\n        delete processedOrderData.waybill;\n        delete processedOrderData.creationPattern;\n        // Log the processed data for debugging\n        console.log('🔍 [API_ORDERS_POST] Processed order data:', processedOrderData);\n        // Create order with client ID\n        const order = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.create({\n            data: processedOrderData\n        });\n        console.log('✅ [API_ORDERS_POST] Order created successfully:', order.id);\n        // Track order creation analytics\n        try {\n            // Determine creation pattern from request body\n            const creationPattern = orderData.creationPattern || 'manual';\n            await _lib_analytics_service__WEBPACK_IMPORTED_MODULE_6__[\"default\"].trackOrderCreation({\n                orderId: order.id,\n                clientId: auth.user.clientId,\n                userId: auth.user.id,\n                creationPattern\n            });\n            console.log('📊 [API_ORDERS_POST] Order analytics tracked:', {\n                orderId: order.id,\n                pattern: creationPattern\n            });\n        } catch (analyticsError) {\n            console.warn('⚠️ [API_ORDERS_POST] Failed to track order analytics:', analyticsError);\n        }\n        // Handle Delhivery API call if courier service is Delhivery (case-insensitive)\n        if (orderData.courier_service.toLowerCase() === 'delhivery') {\n            try {\n                console.log('🚚 [API_ORDERS_POST] Calling Delhivery API for order:', order.id);\n                console.log('🚚 [API_ORDERS_POST] Order data being sent to Delhivery:', JSON.stringify(order, null, 2));\n                console.log('🚚 [API_ORDERS_POST] Pickup location:', order.pickup_location);\n                const delhiveryResponse = await delhiveryService.createOrder(order);\n                console.log('🚚 [API_ORDERS_POST] Delhivery API response received:', JSON.stringify(delhiveryResponse, null, 2));\n                if (delhiveryResponse.success) {\n                    // Update order with Delhivery data\n                    await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.update({\n                        where: {\n                            id: order.id\n                        },\n                        data: {\n                            delhivery_waybill_number: delhiveryResponse.waybill_number,\n                            delhivery_order_id: delhiveryResponse.order_id,\n                            delhivery_api_status: 'success',\n                            tracking_id: delhiveryResponse.waybill_number,\n                            last_delhivery_attempt: new Date()\n                        }\n                    });\n                    console.log('✅ [API_ORDERS_POST] Delhivery order created successfully');\n                } else {\n                    // Update order with error status\n                    await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.update({\n                        where: {\n                            id: order.id\n                        },\n                        data: {\n                            delhivery_api_status: 'failed',\n                            delhivery_api_error: delhiveryResponse.error,\n                            last_delhivery_attempt: new Date()\n                        }\n                    });\n                    console.log('❌ [API_ORDERS_POST] Delhivery order failed:', delhiveryResponse.error);\n                }\n            } catch (error) {\n                console.error('❌ [API_ORDERS_POST] Delhivery API error:', error);\n                console.error('❌ [API_ORDERS_POST] Error details:', {\n                    message: error instanceof Error ? error.message : 'Unknown error',\n                    stack: error instanceof Error ? error.stack : undefined,\n                    orderId: order.id\n                });\n                // Update order with error status\n                await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.update({\n                    where: {\n                        id: order.id\n                    },\n                    data: {\n                        delhivery_api_status: 'failed',\n                        delhivery_api_error: error instanceof Error ? error.message : 'Unknown error',\n                        last_delhivery_attempt: new Date()\n                    }\n                });\n            }\n        } else {\n            console.log('📝 [API_ORDERS_POST] Skipping Delhivery API for courier service:', orderData.courier_service);\n        }\n        // Fetch updated order data to get latest tracking number\n        const updatedOrder = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.findUnique({\n            where: {\n                id: order.id\n            }\n        });\n        if (!updatedOrder) {\n            console.error('❌ [API_ORDERS_POST] Failed to fetch updated order data');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Failed to fetch updated order data'\n            }, {\n                status: 500\n            });\n        }\n        // Initialize WhatsApp service with database configuration\n        await (0,_lib_whatsapp_service__WEBPACK_IMPORTED_MODULE_4__.initializeWhatsAppService)();\n        // Send WhatsApp notifications with updated tracking number\n        try {\n            const whatsappData = {\n                customerName: updatedOrder.name,\n                customerPhone: updatedOrder.mobile,\n                orderNumber: `ORDER-${updatedOrder.id}`,\n                courierService: updatedOrder.courier_service,\n                trackingNumber: updatedOrder.tracking_id || 'Will be assigned',\n                clientCompanyName: client.companyName || 'Scan2Ship',\n                resellerName: updatedOrder.reseller_name || undefined,\n                resellerPhone: updatedOrder.reseller_mobile || undefined,\n                packageValue: updatedOrder.package_value,\n                weight: updatedOrder.weight,\n                totalItems: updatedOrder.total_items,\n                pickupLocation: updatedOrder.pickup_location,\n                address: updatedOrder.address,\n                city: updatedOrder.city,\n                state: updatedOrder.state,\n                pincode: updatedOrder.pincode\n            };\n            // Send customer WhatsApp message\n            const customerWhatsAppResult = await _lib_whatsapp_service__WEBPACK_IMPORTED_MODULE_4__[\"default\"].sendCustomerOrderWhatsApp(whatsappData);\n            if (customerWhatsAppResult.success) {\n                console.log('📱 [API_ORDERS_POST] Customer WhatsApp message sent for order:', updatedOrder.id);\n            } else {\n                console.warn('⚠️ [API_ORDERS_POST] Customer WhatsApp message failed for order:', updatedOrder.id, customerWhatsAppResult.error);\n            }\n            // Send reseller WhatsApp message if reseller details are provided\n            if (updatedOrder.reseller_name && updatedOrder.reseller_mobile) {\n                const resellerWhatsAppResult = await _lib_whatsapp_service__WEBPACK_IMPORTED_MODULE_4__[\"default\"].sendResellerOrderWhatsApp(whatsappData);\n                if (resellerWhatsAppResult.success) {\n                    console.log('📱 [API_ORDERS_POST] Reseller WhatsApp message sent for order:', updatedOrder.id);\n                } else {\n                    console.warn('⚠️ [API_ORDERS_POST] Reseller WhatsApp message failed for order:', updatedOrder.id, resellerWhatsAppResult.error);\n                }\n            }\n        } catch (whatsappError) {\n            console.error('❌ [API_ORDERS_POST] WhatsApp sending failed:', whatsappError);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            order: {\n                id: order.id,\n                orderNumber: `ORDER-${order.id}`,\n                referenceNumber: order.reference_number,\n                trackingId: order.tracking_id,\n                delhiveryStatus: order.delhivery_api_status\n            }\n        });\n    } catch (error) {\n        console.error('❌ [API_ORDERS_POST] Error creating order:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to create order'\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    try {\n        // Authenticate user\n        const auth = await getAuthenticatedUser(request);\n        if (!auth) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        const { client } = auth;\n        const { searchParams } = new URL(request.url);\n        const page = parseInt(searchParams.get('page') || '1');\n        const limit = parseInt(searchParams.get('limit') || '10');\n        const search = searchParams.get('search') || '';\n        const fromDate = searchParams.get('fromDate') || '';\n        const toDate = searchParams.get('toDate') || '';\n        const pickupLocation = searchParams.get('pickupLocation') || '';\n        const courierService = searchParams.get('courierService') || '';\n        console.log('🔍 [API_ORDERS_GET] Request parameters:', {\n            page,\n            limit,\n            search,\n            fromDate,\n            toDate,\n            pickupLocation,\n            courierService,\n            clientId: client.id\n        });\n        const skip = (page - 1) * limit;\n        // Build where clause with client isolation\n        const whereClause = {\n            clientId: client.id // Ensure client isolation\n        };\n        if (search) {\n            whereClause.OR = [\n                {\n                    name: {\n                        contains: search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    mobile: {\n                        contains: search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    tracking_id: {\n                        contains: search,\n                        mode: 'insensitive'\n                    }\n                },\n                {\n                    reference_number: {\n                        contains: search,\n                        mode: 'insensitive'\n                    }\n                }\n            ];\n        }\n        if (fromDate && toDate) {\n            whereClause.created_at = {\n                gte: new Date(fromDate),\n                lte: new Date(toDate + 'T23:59:59.999Z')\n            };\n        } else if (fromDate) {\n            whereClause.created_at = {\n                gte: new Date(fromDate)\n            };\n        } else if (toDate) {\n            whereClause.created_at = {\n                lte: new Date(toDate + 'T23:59:59.999Z')\n            };\n        }\n        if (pickupLocation) {\n            whereClause.pickup_location = pickupLocation;\n        }\n        if (courierService) {\n            whereClause.courier_service = courierService;\n        }\n        // Get orders with pagination\n        const [orders, totalCount] = await Promise.all([\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.findMany({\n                where: whereClause,\n                orderBy: {\n                    created_at: 'desc'\n                },\n                skip,\n                take: limit\n            }),\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.count({\n                where: whereClause\n            })\n        ]);\n        const totalPages = Math.ceil(totalCount / limit);\n        console.log(`✅ [API_ORDERS_GET] Found ${orders.length} orders out of ${totalCount} total for client: ${client.companyName}`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            orders,\n            pagination: {\n                currentPage: page,\n                totalPages,\n                totalCount,\n                hasNextPage: page < totalPages,\n                hasPrevPage: page > 1\n            }\n        });\n    } catch (error) {\n        console.error('❌ [API_ORDERS_GET] Error fetching orders:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to fetch orders'\n        }, {\n            status: 500\n        });\n    }\n}\nasync function DELETE(request) {\n    try {\n        console.log('🔐 [API_ORDERS_DELETE] Starting authentication...');\n        // Check if authorization header exists\n        const authHeader = request.headers.get('authorization');\n        console.log('🔐 [API_ORDERS_DELETE] Auth header:', authHeader ? 'Present' : 'Missing');\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            console.log('❌ [API_ORDERS_DELETE] Invalid or missing authorization header');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Missing or invalid authorization header'\n            }, {\n                status: 401\n            });\n        }\n        // Authenticate user\n        const auth = await getAuthenticatedUser(request);\n        console.log('🔐 [API_ORDERS_DELETE] Authentication result:', auth ? 'Success' : 'Failed');\n        if (!auth) {\n            console.log('❌ [API_ORDERS_DELETE] Authentication failed - user not found or inactive');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Unauthorized - Authentication failed'\n            }, {\n                status: 401\n            });\n        }\n        const { client } = auth;\n        const { orderIds } = await request.json();\n        console.log('🗑️ [API_ORDERS_DELETE] Bulk delete request for client:', client.companyName, 'Order IDs:', orderIds);\n        // Validate input\n        if (!orderIds || !Array.isArray(orderIds) || orderIds.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'orderIds array is required and must contain at least one order ID'\n            }, {\n                status: 400\n            });\n        }\n        // Validate that all order IDs are valid integers\n        const validOrderIds = orderIds.filter((id)=>{\n            const numId = parseInt(id);\n            return !isNaN(numId) && numId > 0;\n        });\n        if (validOrderIds.length !== orderIds.length) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'All order IDs must be valid positive integers'\n            }, {\n                status: 400\n            });\n        }\n        // Check if all orders belong to the authenticated client (security check)\n        const existingOrders = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.Order.findMany({\n            where: {\n                id: {\n                    in: validOrderIds\n                },\n                clientId: client.id // Ensure client isolation\n            },\n            select: {\n                id: true\n            }\n        });\n        if (existingOrders.length !== validOrderIds.length) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Some orders not found or do not belong to your client'\n            }, {\n                status: 404\n            });\n        }\n        // Delete all orders in a transaction\n        const deleteResult = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.$transaction(async (tx)=>{\n            const deletedOrders = [];\n            for (const orderId of validOrderIds){\n                const deletedOrder = await tx.Order.delete({\n                    where: {\n                        id: parseInt(orderId)\n                    }\n                });\n                deletedOrders.push(deletedOrder);\n            }\n            return deletedOrders;\n        });\n        console.log(`✅ [API_ORDERS_DELETE] Successfully deleted ${deleteResult.length} orders for client: ${client.companyName}`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: `Successfully deleted ${deleteResult.length} orders`,\n            deletedCount: deleteResult.length,\n            deletedOrders: deleteResult.map((order)=>({\n                    id: order.id,\n                    name: order.name,\n                    mobile: order.mobile,\n                    tracking_id: order.tracking_id\n                }))\n        });\n    } catch (error) {\n        console.error('❌ [API_ORDERS_DELETE] Error deleting orders:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to delete orders'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/orders/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/analytics-service.ts":
/*!**************************************!*\
  !*** ./src/lib/analytics-service.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalyticsService: () => (/* binding */ AnalyticsService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n\nclass AnalyticsService {\n    /**\n   * Track an analytics event\n   */ static async trackEvent(data) {\n        try {\n            await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.analytics_events.create({\n                data: {\n                    id: `event-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n                    eventType: data.eventType,\n                    clientId: data.clientId,\n                    userId: data.userId,\n                    eventData: data.eventData || {}\n                }\n            });\n            console.log('📊 [ANALYTICS] Event tracked:', data.eventType, {\n                clientId: data.clientId,\n                userId: data.userId\n            });\n        } catch (error) {\n            console.error('❌ [ANALYTICS] Failed to track event:', error);\n        }\n    }\n    /**\n   * Track order creation with pattern\n   */ static async trackOrderCreation(data) {\n        try {\n            await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.order_analytics.create({\n                data: {\n                    id: `order-analytics-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n                    orderId: data.orderId,\n                    clientId: data.clientId,\n                    userId: data.userId,\n                    creationPattern: data.creationPattern\n                }\n            });\n            console.log('📊 [ANALYTICS] Order creation tracked:', {\n                orderId: data.orderId,\n                pattern: data.creationPattern,\n                clientId: data.clientId\n            });\n        } catch (error) {\n            console.error('❌ [ANALYTICS] Failed to track order creation:', error);\n        }\n    }\n    /**\n   * Get platform-wide analytics\n   */ static async getPlatformAnalytics() {\n        try {\n            const [openaiImageCount, openaiAddressCount, createOrderCount] = await Promise.all([\n                _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.analytics_events.count({\n                    where: {\n                        eventType: 'openai_image'\n                    }\n                }),\n                _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.analytics_events.count({\n                    where: {\n                        eventType: 'openai_address'\n                    }\n                }),\n                _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.analytics_events.count({\n                    where: {\n                        eventType: 'create_order'\n                    }\n                })\n            ]);\n            return {\n                openaiImageCount,\n                openaiAddressCount,\n                createOrderCount\n            };\n        } catch (error) {\n            console.error('❌ [ANALYTICS] Failed to get platform analytics:', error);\n            return {\n                openaiImageCount: 0,\n                openaiAddressCount: 0,\n                createOrderCount: 0\n            };\n        }\n    }\n    /**\n   * Get client-specific analytics\n   */ static async getClientAnalytics(clientId) {\n        try {\n            const [openaiImageCount, openaiAddressCount, createOrderCount, orderPatterns] = await Promise.all([\n                _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.analytics_events.count({\n                    where: {\n                        eventType: 'openai_image',\n                        clientId\n                    }\n                }),\n                _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.analytics_events.count({\n                    where: {\n                        eventType: 'openai_address',\n                        clientId\n                    }\n                }),\n                _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.analytics_events.count({\n                    where: {\n                        eventType: 'create_order',\n                        clientId\n                    }\n                }),\n                _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.order_analytics.groupBy({\n                    by: [\n                        'creationPattern'\n                    ],\n                    where: {\n                        clientId\n                    },\n                    _count: {\n                        creationPattern: true\n                    }\n                })\n            ]);\n            // Convert order patterns to object\n            const patternCounts = {\n                manual: 0,\n                text_ai: 0,\n                image_ai: 0\n            };\n            orderPatterns.forEach((pattern)=>{\n                patternCounts[pattern.creationPattern] = pattern._count.creationPattern;\n            });\n            return {\n                openaiImageCount,\n                openaiAddressCount,\n                createOrderCount,\n                orderPatterns: patternCounts\n            };\n        } catch (error) {\n            console.error('❌ [ANALYTICS] Failed to get client analytics:', error);\n            return {\n                openaiImageCount: 0,\n                openaiAddressCount: 0,\n                createOrderCount: 0,\n                orderPatterns: {\n                    manual: 0,\n                    text_ai: 0,\n                    image_ai: 0\n                }\n            };\n        }\n    }\n    /**\n   * Get all clients with their analytics summary\n   */ static async getClientsAnalyticsSummary() {\n        try {\n            const clients = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.clients.findMany({\n                where: {\n                    isActive: true\n                },\n                select: {\n                    id: true,\n                    name: true,\n                    companyName: true,\n                    _count: {\n                        select: {\n                            orders: true\n                        }\n                    }\n                }\n            });\n            const clientsWithAnalytics = await Promise.all(clients.map(async (client)=>{\n                const analytics = await this.getClientAnalytics(client.id);\n                return {\n                    ...client,\n                    analytics\n                };\n            }));\n            return clientsWithAnalytics;\n        } catch (error) {\n            console.error('❌ [ANALYTICS] Failed to get clients analytics summary:', error);\n            return [];\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AnalyticsService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2FuYWx5dGljcy1zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQWdCL0IsTUFBTUM7SUFDWDs7R0FFQyxHQUNELGFBQWFDLFdBQVdDLElBQXdCLEVBQWlCO1FBQy9ELElBQUk7WUFDRixNQUFNSCwrQ0FBTUEsQ0FBQ0ksZ0JBQWdCLENBQUNDLE1BQU0sQ0FBQztnQkFDbkNGLE1BQU07b0JBQ0pHLElBQUksQ0FBQyxNQUFNLEVBQUVDLEtBQUtDLEdBQUcsR0FBRyxDQUFDLEVBQUVDLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLE1BQU0sQ0FBQyxHQUFHLElBQUk7b0JBQ3BFQyxXQUFXVixLQUFLVSxTQUFTO29CQUN6QkMsVUFBVVgsS0FBS1csUUFBUTtvQkFDdkJDLFFBQVFaLEtBQUtZLE1BQU07b0JBQ25CQyxXQUFXYixLQUFLYSxTQUFTLElBQUksQ0FBQztnQkFDaEM7WUFDRjtZQUVBQyxRQUFRQyxHQUFHLENBQUMsaUNBQWlDZixLQUFLVSxTQUFTLEVBQUU7Z0JBQzNEQyxVQUFVWCxLQUFLVyxRQUFRO2dCQUN2QkMsUUFBUVosS0FBS1ksTUFBTTtZQUNyQjtRQUNGLEVBQUUsT0FBT0ksT0FBTztZQUNkRixRQUFRRSxLQUFLLENBQUMsd0NBQXdDQTtRQUN4RDtJQUNGO0lBRUE7O0dBRUMsR0FDRCxhQUFhQyxtQkFBbUJqQixJQUF3QixFQUFpQjtRQUN2RSxJQUFJO1lBQ0YsTUFBTUgsK0NBQU1BLENBQUNxQixlQUFlLENBQUNoQixNQUFNLENBQUM7Z0JBQ2xDRixNQUFNO29CQUNKRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUVDLEtBQUtDLEdBQUcsR0FBRyxDQUFDLEVBQUVDLEtBQUtDLE1BQU0sR0FBR0MsUUFBUSxDQUFDLElBQUlDLE1BQU0sQ0FBQyxHQUFHLElBQUk7b0JBQzlFVSxTQUFTbkIsS0FBS21CLE9BQU87b0JBQ3JCUixVQUFVWCxLQUFLVyxRQUFRO29CQUN2QkMsUUFBUVosS0FBS1ksTUFBTTtvQkFDbkJRLGlCQUFpQnBCLEtBQUtvQixlQUFlO2dCQUN2QztZQUNGO1lBRUFOLFFBQVFDLEdBQUcsQ0FBQywwQ0FBMEM7Z0JBQ3BESSxTQUFTbkIsS0FBS21CLE9BQU87Z0JBQ3JCRSxTQUFTckIsS0FBS29CLGVBQWU7Z0JBQzdCVCxVQUFVWCxLQUFLVyxRQUFRO1lBQ3pCO1FBQ0YsRUFBRSxPQUFPSyxPQUFPO1lBQ2RGLFFBQVFFLEtBQUssQ0FBQyxpREFBaURBO1FBQ2pFO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELGFBQWFNLHVCQUF1QjtRQUNsQyxJQUFJO1lBQ0YsTUFBTSxDQUFDQyxrQkFBa0JDLG9CQUFvQkMsaUJBQWlCLEdBQUcsTUFBTUMsUUFBUUMsR0FBRyxDQUFDO2dCQUNqRjlCLCtDQUFNQSxDQUFDSSxnQkFBZ0IsQ0FBQzJCLEtBQUssQ0FBQztvQkFDNUJDLE9BQU87d0JBQUVuQixXQUFXO29CQUFlO2dCQUNyQztnQkFDQWIsK0NBQU1BLENBQUNJLGdCQUFnQixDQUFDMkIsS0FBSyxDQUFDO29CQUM1QkMsT0FBTzt3QkFBRW5CLFdBQVc7b0JBQWlCO2dCQUN2QztnQkFDQWIsK0NBQU1BLENBQUNJLGdCQUFnQixDQUFDMkIsS0FBSyxDQUFDO29CQUM1QkMsT0FBTzt3QkFBRW5CLFdBQVc7b0JBQWU7Z0JBQ3JDO2FBQ0Q7WUFFRCxPQUFPO2dCQUNMYTtnQkFDQUM7Z0JBQ0FDO1lBQ0Y7UUFDRixFQUFFLE9BQU9ULE9BQU87WUFDZEYsUUFBUUUsS0FBSyxDQUFDLG1EQUFtREE7WUFDakUsT0FBTztnQkFDTE8sa0JBQWtCO2dCQUNsQkMsb0JBQW9CO2dCQUNwQkMsa0JBQWtCO1lBQ3BCO1FBQ0Y7SUFDRjtJQUVBOztHQUVDLEdBQ0QsYUFBYUssbUJBQW1CbkIsUUFBZ0IsRUFBRTtRQUNoRCxJQUFJO1lBQ0YsTUFBTSxDQUFDWSxrQkFBa0JDLG9CQUFvQkMsa0JBQWtCTSxjQUFjLEdBQUcsTUFBTUwsUUFBUUMsR0FBRyxDQUFDO2dCQUNoRzlCLCtDQUFNQSxDQUFDSSxnQkFBZ0IsQ0FBQzJCLEtBQUssQ0FBQztvQkFDNUJDLE9BQU87d0JBQ0xuQixXQUFXO3dCQUNYQztvQkFDRjtnQkFDRjtnQkFDQWQsK0NBQU1BLENBQUNJLGdCQUFnQixDQUFDMkIsS0FBSyxDQUFDO29CQUM1QkMsT0FBTzt3QkFDTG5CLFdBQVc7d0JBQ1hDO29CQUNGO2dCQUNGO2dCQUNBZCwrQ0FBTUEsQ0FBQ0ksZ0JBQWdCLENBQUMyQixLQUFLLENBQUM7b0JBQzVCQyxPQUFPO3dCQUNMbkIsV0FBVzt3QkFDWEM7b0JBQ0Y7Z0JBQ0Y7Z0JBQ0FkLCtDQUFNQSxDQUFDcUIsZUFBZSxDQUFDYyxPQUFPLENBQUM7b0JBQzdCQyxJQUFJO3dCQUFDO3FCQUFrQjtvQkFDdkJKLE9BQU87d0JBQUVsQjtvQkFBUztvQkFDbEJ1QixRQUFRO3dCQUNOZCxpQkFBaUI7b0JBQ25CO2dCQUNGO2FBQ0Q7WUFFRCxtQ0FBbUM7WUFDbkMsTUFBTWUsZ0JBQWdCO2dCQUNwQkMsUUFBUTtnQkFDUkMsU0FBUztnQkFDVEMsVUFBVTtZQUNaO1lBRUFQLGNBQWNRLE9BQU8sQ0FBQ2xCLENBQUFBO2dCQUNwQmMsYUFBYSxDQUFDZCxRQUFRRCxlQUFlLENBQStCLEdBQUdDLFFBQVFhLE1BQU0sQ0FBQ2QsZUFBZTtZQUN2RztZQUVBLE9BQU87Z0JBQ0xHO2dCQUNBQztnQkFDQUM7Z0JBQ0FNLGVBQWVJO1lBQ2pCO1FBQ0YsRUFBRSxPQUFPbkIsT0FBTztZQUNkRixRQUFRRSxLQUFLLENBQUMsaURBQWlEQTtZQUMvRCxPQUFPO2dCQUNMTyxrQkFBa0I7Z0JBQ2xCQyxvQkFBb0I7Z0JBQ3BCQyxrQkFBa0I7Z0JBQ2xCTSxlQUFlO29CQUNiSyxRQUFRO29CQUNSQyxTQUFTO29CQUNUQyxVQUFVO2dCQUNaO1lBQ0Y7UUFDRjtJQUNGO0lBRUE7O0dBRUMsR0FDRCxhQUFhRSw2QkFBNkI7UUFDeEMsSUFBSTtZQUNGLE1BQU1DLFVBQVUsTUFBTTVDLCtDQUFNQSxDQUFDNEMsT0FBTyxDQUFDQyxRQUFRLENBQUM7Z0JBQzVDYixPQUFPO29CQUFFYyxVQUFVO2dCQUFLO2dCQUN4QkMsUUFBUTtvQkFDTnpDLElBQUk7b0JBQ0owQyxNQUFNO29CQUNOQyxhQUFhO29CQUNiWixRQUFRO3dCQUNOVSxRQUFROzRCQUNORyxRQUFRO3dCQUNWO29CQUNGO2dCQUNGO1lBQ0Y7WUFFQSxNQUFNQyx1QkFBdUIsTUFBTXRCLFFBQVFDLEdBQUcsQ0FDNUNjLFFBQVFRLEdBQUcsQ0FBQyxPQUFPQztnQkFDakIsTUFBTUMsWUFBWSxNQUFNLElBQUksQ0FBQ3JCLGtCQUFrQixDQUFDb0IsT0FBTy9DLEVBQUU7Z0JBQ3pELE9BQU87b0JBQ0wsR0FBRytDLE1BQU07b0JBQ1RDO2dCQUNGO1lBQ0Y7WUFHRixPQUFPSDtRQUNULEVBQUUsT0FBT2hDLE9BQU87WUFDZEYsUUFBUUUsS0FBSyxDQUFDLDBEQUEwREE7WUFDeEUsT0FBTyxFQUFFO1FBQ1g7SUFDRjtBQUNGO0FBRUEsaUVBQWVsQixnQkFBZ0JBLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9rYXJ0aGlrbmFpZHVkaW50YWt1cnRoaS9Eb2N1bWVudHMvR2l0SHViL3NjYW4yc2hpcC9zcmMvbGliL2FuYWx5dGljcy1zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByaXNtYSB9IGZyb20gJ0AvbGliL3ByaXNtYSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5hbHl0aWNzRXZlbnREYXRhIHtcbiAgZXZlbnRUeXBlOiAnb3BlbmFpX2ltYWdlJyB8ICdvcGVuYWlfYWRkcmVzcycgfCAnY3JlYXRlX29yZGVyJztcbiAgY2xpZW50SWQ/OiBzdHJpbmc7XG4gIHVzZXJJZD86IHN0cmluZztcbiAgZXZlbnREYXRhPzogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9yZGVyQW5hbHl0aWNzRGF0YSB7XG4gIG9yZGVySWQ6IG51bWJlcjtcbiAgY2xpZW50SWQ6IHN0cmluZztcbiAgdXNlcklkPzogc3RyaW5nO1xuICBjcmVhdGlvblBhdHRlcm46ICdtYW51YWwnIHwgJ3RleHRfYWknIHwgJ2ltYWdlX2FpJztcbn1cblxuZXhwb3J0IGNsYXNzIEFuYWx5dGljc1NlcnZpY2Uge1xuICAvKipcbiAgICogVHJhY2sgYW4gYW5hbHl0aWNzIGV2ZW50XG4gICAqL1xuICBzdGF0aWMgYXN5bmMgdHJhY2tFdmVudChkYXRhOiBBbmFseXRpY3NFdmVudERhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcHJpc21hLmFuYWx5dGljc19ldmVudHMuY3JlYXRlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGlkOiBgZXZlbnQtJHtEYXRlLm5vdygpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gLFxuICAgICAgICAgIGV2ZW50VHlwZTogZGF0YS5ldmVudFR5cGUsXG4gICAgICAgICAgY2xpZW50SWQ6IGRhdGEuY2xpZW50SWQsXG4gICAgICAgICAgdXNlcklkOiBkYXRhLnVzZXJJZCxcbiAgICAgICAgICBldmVudERhdGE6IGRhdGEuZXZlbnREYXRhIHx8IHt9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygn8J+TiiBbQU5BTFlUSUNTXSBFdmVudCB0cmFja2VkOicsIGRhdGEuZXZlbnRUeXBlLCB7XG4gICAgICAgIGNsaWVudElkOiBkYXRhLmNsaWVudElkLFxuICAgICAgICB1c2VySWQ6IGRhdGEudXNlcklkXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIFtBTkFMWVRJQ1NdIEZhaWxlZCB0byB0cmFjayBldmVudDonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYWNrIG9yZGVyIGNyZWF0aW9uIHdpdGggcGF0dGVyblxuICAgKi9cbiAgc3RhdGljIGFzeW5jIHRyYWNrT3JkZXJDcmVhdGlvbihkYXRhOiBPcmRlckFuYWx5dGljc0RhdGEpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcHJpc21hLm9yZGVyX2FuYWx5dGljcy5jcmVhdGUoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgaWQ6IGBvcmRlci1hbmFseXRpY3MtJHtEYXRlLm5vdygpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gLFxuICAgICAgICAgIG9yZGVySWQ6IGRhdGEub3JkZXJJZCxcbiAgICAgICAgICBjbGllbnRJZDogZGF0YS5jbGllbnRJZCxcbiAgICAgICAgICB1c2VySWQ6IGRhdGEudXNlcklkLFxuICAgICAgICAgIGNyZWF0aW9uUGF0dGVybjogZGF0YS5jcmVhdGlvblBhdHRlcm5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCfwn5OKIFtBTkFMWVRJQ1NdIE9yZGVyIGNyZWF0aW9uIHRyYWNrZWQ6Jywge1xuICAgICAgICBvcmRlcklkOiBkYXRhLm9yZGVySWQsXG4gICAgICAgIHBhdHRlcm46IGRhdGEuY3JlYXRpb25QYXR0ZXJuLFxuICAgICAgICBjbGllbnRJZDogZGF0YS5jbGllbnRJZFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBbQU5BTFlUSUNTXSBGYWlsZWQgdG8gdHJhY2sgb3JkZXIgY3JlYXRpb246JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcGxhdGZvcm0td2lkZSBhbmFseXRpY3NcbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZXRQbGF0Zm9ybUFuYWx5dGljcygpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgW29wZW5haUltYWdlQ291bnQsIG9wZW5haUFkZHJlc3NDb3VudCwgY3JlYXRlT3JkZXJDb3VudF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHByaXNtYS5hbmFseXRpY3NfZXZlbnRzLmNvdW50KHtcbiAgICAgICAgICB3aGVyZTogeyBldmVudFR5cGU6ICdvcGVuYWlfaW1hZ2UnIH1cbiAgICAgICAgfSksXG4gICAgICAgIHByaXNtYS5hbmFseXRpY3NfZXZlbnRzLmNvdW50KHtcbiAgICAgICAgICB3aGVyZTogeyBldmVudFR5cGU6ICdvcGVuYWlfYWRkcmVzcycgfVxuICAgICAgICB9KSxcbiAgICAgICAgcHJpc21hLmFuYWx5dGljc19ldmVudHMuY291bnQoe1xuICAgICAgICAgIHdoZXJlOiB7IGV2ZW50VHlwZTogJ2NyZWF0ZV9vcmRlcicgfVxuICAgICAgICB9KVxuICAgICAgXSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wZW5haUltYWdlQ291bnQsXG4gICAgICAgIG9wZW5haUFkZHJlc3NDb3VudCxcbiAgICAgICAgY3JlYXRlT3JkZXJDb3VudFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIFtBTkFMWVRJQ1NdIEZhaWxlZCB0byBnZXQgcGxhdGZvcm0gYW5hbHl0aWNzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wZW5haUltYWdlQ291bnQ6IDAsXG4gICAgICAgIG9wZW5haUFkZHJlc3NDb3VudDogMCxcbiAgICAgICAgY3JlYXRlT3JkZXJDb3VudDogMFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNsaWVudC1zcGVjaWZpYyBhbmFseXRpY3NcbiAgICovXG4gIHN0YXRpYyBhc3luYyBnZXRDbGllbnRBbmFseXRpY3MoY2xpZW50SWQ6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBbb3BlbmFpSW1hZ2VDb3VudCwgb3BlbmFpQWRkcmVzc0NvdW50LCBjcmVhdGVPcmRlckNvdW50LCBvcmRlclBhdHRlcm5zXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgcHJpc21hLmFuYWx5dGljc19ldmVudHMuY291bnQoe1xuICAgICAgICAgIHdoZXJlOiB7IFxuICAgICAgICAgICAgZXZlbnRUeXBlOiAnb3BlbmFpX2ltYWdlJyxcbiAgICAgICAgICAgIGNsaWVudElkIFxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIHByaXNtYS5hbmFseXRpY3NfZXZlbnRzLmNvdW50KHtcbiAgICAgICAgICB3aGVyZTogeyBcbiAgICAgICAgICAgIGV2ZW50VHlwZTogJ29wZW5haV9hZGRyZXNzJyxcbiAgICAgICAgICAgIGNsaWVudElkIFxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIHByaXNtYS5hbmFseXRpY3NfZXZlbnRzLmNvdW50KHtcbiAgICAgICAgICB3aGVyZTogeyBcbiAgICAgICAgICAgIGV2ZW50VHlwZTogJ2NyZWF0ZV9vcmRlcicsXG4gICAgICAgICAgICBjbGllbnRJZCBcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBwcmlzbWEub3JkZXJfYW5hbHl0aWNzLmdyb3VwQnkoe1xuICAgICAgICAgIGJ5OiBbJ2NyZWF0aW9uUGF0dGVybiddLFxuICAgICAgICAgIHdoZXJlOiB7IGNsaWVudElkIH0sXG4gICAgICAgICAgX2NvdW50OiB7XG4gICAgICAgICAgICBjcmVhdGlvblBhdHRlcm46IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKTtcblxuICAgICAgLy8gQ29udmVydCBvcmRlciBwYXR0ZXJucyB0byBvYmplY3RcbiAgICAgIGNvbnN0IHBhdHRlcm5Db3VudHMgPSB7XG4gICAgICAgIG1hbnVhbDogMCxcbiAgICAgICAgdGV4dF9haTogMCxcbiAgICAgICAgaW1hZ2VfYWk6IDBcbiAgICAgIH07XG5cbiAgICAgIG9yZGVyUGF0dGVybnMuZm9yRWFjaChwYXR0ZXJuID0+IHtcbiAgICAgICAgcGF0dGVybkNvdW50c1twYXR0ZXJuLmNyZWF0aW9uUGF0dGVybiBhcyBrZXlvZiB0eXBlb2YgcGF0dGVybkNvdW50c10gPSBwYXR0ZXJuLl9jb3VudC5jcmVhdGlvblBhdHRlcm47XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgb3BlbmFpSW1hZ2VDb3VudCxcbiAgICAgICAgb3BlbmFpQWRkcmVzc0NvdW50LFxuICAgICAgICBjcmVhdGVPcmRlckNvdW50LFxuICAgICAgICBvcmRlclBhdHRlcm5zOiBwYXR0ZXJuQ291bnRzXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgW0FOQUxZVElDU10gRmFpbGVkIHRvIGdldCBjbGllbnQgYW5hbHl0aWNzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9wZW5haUltYWdlQ291bnQ6IDAsXG4gICAgICAgIG9wZW5haUFkZHJlc3NDb3VudDogMCxcbiAgICAgICAgY3JlYXRlT3JkZXJDb3VudDogMCxcbiAgICAgICAgb3JkZXJQYXR0ZXJuczoge1xuICAgICAgICAgIG1hbnVhbDogMCxcbiAgICAgICAgICB0ZXh0X2FpOiAwLFxuICAgICAgICAgIGltYWdlX2FpOiAwXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgY2xpZW50cyB3aXRoIHRoZWlyIGFuYWx5dGljcyBzdW1tYXJ5XG4gICAqL1xuICBzdGF0aWMgYXN5bmMgZ2V0Q2xpZW50c0FuYWx5dGljc1N1bW1hcnkoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNsaWVudHMgPSBhd2FpdCBwcmlzbWEuY2xpZW50cy5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7IGlzQWN0aXZlOiB0cnVlIH0sXG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgIGlkOiB0cnVlLFxuICAgICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgICAgY29tcGFueU5hbWU6IHRydWUsXG4gICAgICAgICAgX2NvdW50OiB7XG4gICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgb3JkZXJzOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY2xpZW50c1dpdGhBbmFseXRpY3MgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgY2xpZW50cy5tYXAoYXN5bmMgKGNsaWVudCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFuYWx5dGljcyA9IGF3YWl0IHRoaXMuZ2V0Q2xpZW50QW5hbHl0aWNzKGNsaWVudC5pZCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNsaWVudCxcbiAgICAgICAgICAgIGFuYWx5dGljc1xuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gY2xpZW50c1dpdGhBbmFseXRpY3M7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBbQU5BTFlUSUNTXSBGYWlsZWQgdG8gZ2V0IGNsaWVudHMgYW5hbHl0aWNzIHN1bW1hcnk6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBbmFseXRpY3NTZXJ2aWNlO1xuIl0sIm5hbWVzIjpbInByaXNtYSIsIkFuYWx5dGljc1NlcnZpY2UiLCJ0cmFja0V2ZW50IiwiZGF0YSIsImFuYWx5dGljc19ldmVudHMiLCJjcmVhdGUiLCJpZCIsIkRhdGUiLCJub3ciLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiLCJldmVudFR5cGUiLCJjbGllbnRJZCIsInVzZXJJZCIsImV2ZW50RGF0YSIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsInRyYWNrT3JkZXJDcmVhdGlvbiIsIm9yZGVyX2FuYWx5dGljcyIsIm9yZGVySWQiLCJjcmVhdGlvblBhdHRlcm4iLCJwYXR0ZXJuIiwiZ2V0UGxhdGZvcm1BbmFseXRpY3MiLCJvcGVuYWlJbWFnZUNvdW50Iiwib3BlbmFpQWRkcmVzc0NvdW50IiwiY3JlYXRlT3JkZXJDb3VudCIsIlByb21pc2UiLCJhbGwiLCJjb3VudCIsIndoZXJlIiwiZ2V0Q2xpZW50QW5hbHl0aWNzIiwib3JkZXJQYXR0ZXJucyIsImdyb3VwQnkiLCJieSIsIl9jb3VudCIsInBhdHRlcm5Db3VudHMiLCJtYW51YWwiLCJ0ZXh0X2FpIiwiaW1hZ2VfYWkiLCJmb3JFYWNoIiwiZ2V0Q2xpZW50c0FuYWx5dGljc1N1bW1hcnkiLCJjbGllbnRzIiwiZmluZE1hbnkiLCJpc0FjdGl2ZSIsInNlbGVjdCIsIm5hbWUiLCJjb21wYW55TmFtZSIsIm9yZGVycyIsImNsaWVudHNXaXRoQW5hbHl0aWNzIiwibWFwIiwiY2xpZW50IiwiYW5hbHl0aWNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/analytics-service.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/config.ts":
/*!***************************!*\
  !*** ./src/lib/config.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   validateConfig: () => (/* binding */ validateConfig)\n/* harmony export */ });\n// Environment configuration with validation\nconst config = {\n    database: {\n        url: process.env.DATABASE_URL\n    },\n    jwt: {\n        secret: process.env.JWT_SECRET || 'fallback-secret'\n    },\n    app: {\n        name: process.env.NEXT_PUBLIC_APP_NAME || 'Vanitha Logistics',\n        url: process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'\n    },\n    delhivery: {\n        baseUrl: process.env.DELHIVERY_BASE_URL || 'https://track.delhivery.com',\n        webhookSecret: process.env.DELHIVERY_WEBHOOK_SECRET\n    },\n    openai: {\n        apiKey: process.env.OPENAI_API_KEY,\n        model: process.env.OPENAI_MODEL || 'gpt-4o-mini'\n    }\n};\n// Validate required environment variables only at runtime\nfunction validateConfig() {\n    // Skip validation during build time completely\n    if (false) {}\n    return true;\n}\n// Export for use in other files\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (config);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2NvbmZpZy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0Q0FBNEM7QUFDckMsTUFBTUEsU0FBUztJQUNwQkMsVUFBVTtRQUNSQyxLQUFLQyxRQUFRQyxHQUFHLENBQUNDLFlBQVk7SUFDL0I7SUFDQUMsS0FBSztRQUNIQyxRQUFRSixRQUFRQyxHQUFHLENBQUNJLFVBQVUsSUFBSTtJQUNwQztJQUNBQyxLQUFLO1FBQ0hDLE1BQU1QLFFBQVFDLEdBQUcsQ0FBQ08sb0JBQW9CLElBQUk7UUFDMUNULEtBQUtDLFFBQVFDLEdBQUcsQ0FBQ1EsbUJBQW1CLElBQUk7SUFDMUM7SUFDQUMsV0FBVztRQUNUQyxTQUFTWCxRQUFRQyxHQUFHLENBQUNXLGtCQUFrQixJQUFJO1FBQzNDQyxlQUFlYixRQUFRQyxHQUFHLENBQUNhLHdCQUF3QjtJQUNyRDtJQUNBQyxRQUFRO1FBQ05DLFFBQVFoQixRQUFRQyxHQUFHLENBQUNnQixjQUFjO1FBQ2xDQyxPQUFPbEIsUUFBUUMsR0FBRyxDQUFDa0IsWUFBWSxJQUFJO0lBQ3JDO0FBQ0YsRUFBRTtBQUVGLDBEQUEwRDtBQUNuRCxTQUFTQztJQUNkLCtDQUErQztJQUMvQyxJQUFJcEIsS0FFeUIsRUFBRSxFQVc5QjtJQUVELE9BQU87QUFDVDtBQUVBLGdDQUFnQztBQUNoQyxpRUFBZUgsTUFBTUEsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2thcnRoaWtuYWlkdWRpbnRha3VydGhpL0RvY3VtZW50cy9HaXRIdWIvc2NhbjJzaGlwL3NyYy9saWIvY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEVudmlyb25tZW50IGNvbmZpZ3VyYXRpb24gd2l0aCB2YWxpZGF0aW9uXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xuICBkYXRhYmFzZToge1xuICAgIHVybDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLFxuICB9LFxuICBqd3Q6IHtcbiAgICBzZWNyZXQ6IHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgfHwgJ2ZhbGxiYWNrLXNlY3JldCcsXG4gIH0sXG4gIGFwcDoge1xuICAgIG5hbWU6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9OQU1FIHx8ICdWYW5pdGhhIExvZ2lzdGljcycsXG4gICAgdXJsOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnLFxuICB9LFxuICBkZWxoaXZlcnk6IHtcbiAgICBiYXNlVXJsOiBwcm9jZXNzLmVudi5ERUxISVZFUllfQkFTRV9VUkwgfHwgJ2h0dHBzOi8vdHJhY2suZGVsaGl2ZXJ5LmNvbScsXG4gICAgd2ViaG9va1NlY3JldDogcHJvY2Vzcy5lbnYuREVMSElWRVJZX1dFQkhPT0tfU0VDUkVULFxuICB9LFxuICBvcGVuYWk6IHtcbiAgICBhcGlLZXk6IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZLFxuICAgIG1vZGVsOiBwcm9jZXNzLmVudi5PUEVOQUlfTU9ERUwgfHwgJ2dwdC00by1taW5pJyxcbiAgfSxcbn07XG5cbi8vIFZhbGlkYXRlIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBvbmx5IGF0IHJ1bnRpbWVcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNvbmZpZygpIHtcbiAgLy8gU2tpcCB2YWxpZGF0aW9uIGR1cmluZyBidWlsZCB0aW1lIGNvbXBsZXRlbHlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgJiYgXG4gICAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyAmJiBcbiAgICAgICFwcm9jZXNzLmVudi5WRVJDRUxfQlVJTEQpIHtcbiAgICBjb25zdCByZXF1aXJlZCA9IFsnREFUQUJBU0VfVVJMJywgJ0pXVF9TRUNSRVQnXTtcbiAgICBjb25zdCBtaXNzaW5nID0gcmVxdWlyZWQuZmlsdGVyKGtleSA9PiAhcHJvY2Vzcy5lbnZba2V5XSk7XG4gICAgXG4gICAgaWYgKG1pc3NpbmcubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5lcnJvcignTWlzc2luZyByZXF1aXJlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6JywgbWlzc2luZyk7XG4gICAgICBjb25zb2xlLmVycm9yKCdBdmFpbGFibGUgZW52aXJvbm1lbnQgdmFyaWFibGVzOicsIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzOiAke21pc3Npbmcuam9pbignLCAnKX1gKTtcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coJ0Vudmlyb25tZW50IGNvbmZpZ3VyYXRpb24gdmFsaWRhdGVkIHN1Y2Nlc3NmdWxseScpO1xuICB9XG4gIFxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gRXhwb3J0IGZvciB1c2UgaW4gb3RoZXIgZmlsZXNcbmV4cG9ydCBkZWZhdWx0IGNvbmZpZztcbiJdLCJuYW1lcyI6WyJjb25maWciLCJkYXRhYmFzZSIsInVybCIsInByb2Nlc3MiLCJlbnYiLCJEQVRBQkFTRV9VUkwiLCJqd3QiLCJzZWNyZXQiLCJKV1RfU0VDUkVUIiwiYXBwIiwibmFtZSIsIk5FWFRfUFVCTElDX0FQUF9OQU1FIiwiTkVYVF9QVUJMSUNfQVBQX1VSTCIsImRlbGhpdmVyeSIsImJhc2VVcmwiLCJERUxISVZFUllfQkFTRV9VUkwiLCJ3ZWJob29rU2VjcmV0IiwiREVMSElWRVJZX1dFQkhPT0tfU0VDUkVUIiwib3BlbmFpIiwiYXBpS2V5IiwiT1BFTkFJX0FQSV9LRVkiLCJtb2RlbCIsIk9QRU5BSV9NT0RFTCIsInZhbGlkYXRlQ29uZmlnIiwiVkVSQ0VMX0JVSUxEIiwicmVxdWlyZWQiLCJtaXNzaW5nIiwiZmlsdGVyIiwia2V5IiwibGVuZ3RoIiwiY29uc29sZSIsImVycm9yIiwiT2JqZWN0Iiwia2V5cyIsIkVycm9yIiwiam9pbiIsImxvZyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/config.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/delhivery.ts":
/*!******************************!*\
  !*** ./src/lib/delhivery.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DelhiveryService: () => (/* binding */ DelhiveryService),\n/* harmony export */   delhiveryService: () => (/* binding */ delhiveryService)\n/* harmony export */ });\nclass DelhiveryService {\n    constructor(){\n        this.baseUrl = process.env.DELHIVERY_BASE_URL || 'https://track.delhivery.com';\n        this.maxRetries = 3;\n        // Debug logging\n        console.log('🔑 Delhivery Service Initialized:');\n        console.log('  Base URL:', this.baseUrl);\n        console.log('  Note: API Key will be taken from pickup location configuration');\n    }\n    async makeRequest(endpoint, options, apiKey, retryCount = 0) {\n        try {\n            // Ensure the correct header format for Delhivery API\n            const finalHeaders = {\n                'Authorization': `Token ${apiKey.trim()}`,\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...options.headers\n            };\n            // Validate API key format\n            if (!apiKey || typeof apiKey !== 'string') {\n                throw new Error('Invalid API key: API key is required and must be a string');\n            }\n            // Trim the API key and check if it's empty\n            const trimmedApiKey = apiKey.trim();\n            if (!trimmedApiKey) {\n                throw new Error('Invalid API key: API key is empty after trimming');\n            }\n            // Check for invalid characters in API key\n            const invalidChars = trimmedApiKey.match(/[^\\x20-\\x7E]/);\n            if (invalidChars) {\n                throw new Error(`Invalid API key: Contains invalid characters at position ${invalidChars.index}`);\n            }\n            const fullUrl = `${this.baseUrl}${endpoint}`;\n            console.log('🌐 Delhivery API Request Details:');\n            console.log('  Full URL:', fullUrl);\n            console.log('  Method:', options.method || 'GET');\n            console.log('  Raw API Key:', apiKey);\n            console.log('  Clean API Key:', trimmedApiKey);\n            console.log('  Final Headers:', JSON.stringify(finalHeaders, null, 2));\n            console.log('  Request Body:', options.body || 'No body');\n            console.log('  Retry Count:', retryCount);\n            const response = await fetch(fullUrl, {\n                ...options,\n                headers: finalHeaders\n            });\n            console.log('📡 Delhivery API Response Details:');\n            console.log('  Status:', response.status);\n            console.log('  Status Text:', response.statusText);\n            console.log('  Response Headers:', JSON.stringify(Object.fromEntries(response.headers.entries()), null, 2));\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.log('  Error Response Body:', errorText);\n                throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n            }\n            const result = await response.json();\n            console.log('  Response Body:', JSON.stringify(result, null, 2));\n            return result;\n        } catch (error) {\n            console.error('❌ Delhivery API request failed:', error);\n            if (retryCount < this.maxRetries) {\n                console.log(`🔄 Retrying Delhivery API request... (${retryCount + 1}/${this.maxRetries})`);\n                await new Promise((resolve)=>setTimeout(resolve, 1000 * (retryCount + 1))); // Exponential backoff\n                return this.makeRequest(endpoint, options, apiKey, retryCount + 1);\n            }\n            throw error;\n        }\n    }\n    async createOrder(orderData) {\n        try {\n            console.log('🚀 Creating Delhivery order with data:', orderData);\n            // Get API key from pickup location configuration\n            const { getDelhiveryApiKey } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_pickup-location-config_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./pickup-location-config */ \"(rsc)/./src/lib/pickup-location-config.ts\"));\n            const apiKey = await getDelhiveryApiKey(orderData.pickup_location);\n            if (!apiKey) {\n                throw new Error(`No Delhivery API key found for pickup location: ${orderData.pickup_location}. Please configure the API key in the client settings for this pickup location.`);\n            }\n            console.log('🔑 Using Delhivery API key from pickup location:', orderData.pickup_location);\n            // Log reseller information if present\n            if (orderData.reseller_name || orderData.reseller_mobile) {\n                console.log('🏪 Reseller Information:');\n                console.log('  Name:', orderData.reseller_name || 'Not provided');\n                console.log('  Mobile:', orderData.reseller_mobile || 'Not provided');\n            }\n            // Helper function to sanitize text fields for JSON\n            const sanitizeText = (text)=>{\n                if (!text) return '';\n                return String(text).replace(/[\\r\\n\\t]/g, ' ') // Replace newlines and tabs with spaces\n                .replace(/\"/g, '\"') // Escape double quotes\n                .replace(/\\\\/g, '\\\\\\\\') // Escape backslashes\n                .trim(); // Remove leading/trailing whitespace\n            };\n            // Map order data to Delhivery API format - exactly matching the working example\n            const shipmentData = {\n                name: sanitizeText(orderData.name),\n                add: sanitizeText(orderData.address),\n                pin: sanitizeText(orderData.pincode),\n                city: sanitizeText(orderData.city),\n                state: sanitizeText(orderData.state),\n                country: sanitizeText(orderData.country) || 'India',\n                phone: sanitizeText(orderData.phone || orderData.mobile),\n                mobile: sanitizeText(orderData.mobile),\n                order: sanitizeText(orderData.reference_number) || `Order-${Date.now()}`,\n                payment_mode: orderData.is_cod ? 'COD' : 'Prepaid',\n                return_pin: sanitizeText(orderData.return_pincode),\n                return_city: '',\n                return_phone: '',\n                return_add: sanitizeText(orderData.return_address?.address || orderData.return_address),\n                return_state: '',\n                return_country: 'India',\n                products_desc: sanitizeText(orderData.product_description),\n                hsn_code: sanitizeText(orderData.hsn_code),\n                cod_amount: orderData.is_cod ? orderData.cod_amount?.toString() || '' : '',\n                order_date: null,\n                total_amount: orderData.package_value?.toString() || '',\n                seller_add: sanitizeText(orderData.seller_address),\n                seller_name: sanitizeText(orderData.reseller_name || orderData.seller_name),\n                seller_inv: sanitizeText(orderData.invoice_number),\n                seller_phone: sanitizeText(orderData.reseller_mobile),\n                quantity: orderData.total_items?.toString() || '',\n                waybill: orderData.tracking_id || '',\n                shipment_length: orderData.shipment_length?.toString() || '100',\n                shipment_width: orderData.shipment_breadth?.toString() || '100',\n                shipment_height: orderData.shipment_height?.toString() || '100',\n                weight: orderData.weight?.toString() || '',\n                shipping_mode: 'Surface',\n                address_type: '' // Match the curl example format\n            };\n            // Prepare the JSON data for the request\n            const jsonData = {\n                shipments: [\n                    shipmentData\n                ],\n                pickup_location: {\n                    name: orderData.pickup_location || 'VIJAYA8 FRANCHISE'\n                }\n            };\n            // Validate JSON can be stringified without errors\n            let jsonString;\n            try {\n                jsonString = JSON.stringify(jsonData);\n                console.log('✅ JSON validation successful');\n            } catch (jsonError) {\n                console.error('❌ JSON stringification failed:', jsonError);\n                console.error('❌ Problematic data:', jsonData);\n                throw new Error(`JSON preparation failed: ${jsonError instanceof Error ? jsonError.message : 'Unknown error'}`);\n            }\n            // Send data exactly as the working example - as form data with format=json&data={...}\n            const requestBody = `format=json&data=${jsonString}`;\n            console.log('📦 Delhivery API Request Body:', requestBody);\n            console.log('🔍 [DELHIVERY] Pickup location being sent:', orderData.pickup_location);\n            console.log('🔍 [DELHIVERY] Sanitized shipment data:', JSON.stringify(shipmentData, null, 2));\n            console.log('🔍 [DELHIVERY] JSON data length:', jsonString.length, 'characters');\n            const response = await this.makeRequest('/api/cmu/create.json', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: requestBody\n            }, apiKey);\n            // Log the response with proper formatting to show array contents\n            console.log('✅ Delhivery order created successfully:');\n            console.log('  Raw Response:', JSON.stringify(response, null, 2));\n            // Check if the API call was successful\n            if (response.success === false || response.error === true) {\n                let errorMessage = 'Delhivery API returned an error';\n                // Try to extract error message from remarks array if available\n                if (response.packages && response.packages.length > 0) {\n                    const packageInfo = response.packages[0];\n                    if (packageInfo.remarks && Array.isArray(packageInfo.remarks) && packageInfo.remarks.length > 0) {\n                        errorMessage = `Delhivery API Error: ${packageInfo.remarks.join(', ')}`;\n                    }\n                }\n                // Fallback to rmk field if available\n                if (response.rmk) {\n                    errorMessage = `Delhivery API Error: ${response.rmk}`;\n                }\n                // Log detailed error information for debugging\n                console.error('❌ [DELHIVERY] API Error Details:', {\n                    success: response.success,\n                    error: response.error,\n                    rmk: response.rmk,\n                    packages: response.packages,\n                    fullResponse: response\n                });\n                throw new Error(errorMessage);\n            }\n            // Extract waybill number and order ID from packages array\n            let waybillNumber = '';\n            let orderId = '';\n            if (response.packages && response.packages.length > 0) {\n                const packageInfo = response.packages[0];\n                waybillNumber = packageInfo.waybill || '';\n                orderId = packageInfo.refnum || '';\n                console.log('📦 Extracted waybill from package:');\n                console.log('  Package Info:', JSON.stringify(packageInfo, null, 2));\n                // Log remarks array content if it exists\n                if (packageInfo.remarks && Array.isArray(packageInfo.remarks)) {\n                    console.log('  Remarks:', packageInfo.remarks);\n                    console.log('  Remarks (stringified):', JSON.stringify(packageInfo.remarks, null, 2));\n                }\n            }\n            return {\n                success: true,\n                waybill_number: waybillNumber,\n                order_id: orderId,\n                message: 'Order created successfully'\n            };\n        } catch (error) {\n            console.error('❌ Failed to create Delhivery order:', error);\n            throw error;\n        }\n    }\n    async getOrderStatus(waybill, pickupLocation) {\n        try {\n            // Get API key from pickup location configuration\n            const { getDelhiveryApiKey } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_pickup-location-config_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./pickup-location-config */ \"(rsc)/./src/lib/pickup-location-config.ts\"));\n            const apiKey = await getDelhiveryApiKey(pickupLocation);\n            if (!apiKey) {\n                throw new Error(`No Delhivery API key found for pickup location: ${pickupLocation}`);\n            }\n            const response = await this.makeRequest(`/api/waybill/${waybill}`, {}, apiKey);\n            return response;\n        } catch (error) {\n            console.error('Delhivery Status API Error:', error);\n            throw error;\n        }\n    }\n    async validatePincode(pincode, pickupLocation) {\n        try {\n            // Get API key from pickup location configuration\n            if (!pickupLocation) {\n                throw new Error('Pickup location is required for pincode validation');\n            }\n            const { getDelhiveryApiKey } = await __webpack_require__.e(/*! import() */ \"_rsc_src_lib_pickup-location-config_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ./pickup-location-config */ \"(rsc)/./src/lib/pickup-location-config.ts\"));\n            const apiKey = await getDelhiveryApiKey(pickupLocation);\n            if (!apiKey) {\n                throw new Error(`No Delhivery API key found for pickup location: ${pickupLocation}. Please configure it in the client settings.`);\n            }\n            // Use the production Delhivery pincode validation endpoint\n            const url = `${this.baseUrl}/c/api/pin-codes/json/?filter_codes=${pincode}`;\n            const options = {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Token ${apiKey}`,\n                    'Content-Type': 'application/json'\n                }\n            };\n            const response = await fetch(url, options);\n            if (response.ok) {\n                const data = await response.json();\n                // Check if pincode is serviceable based on Delhivery response\n                if (data && data.delivery_codes && Array.isArray(data.delivery_codes) && data.delivery_codes.length > 0) {\n                    const deliveryCode = data.delivery_codes[0];\n                    const postalCode = deliveryCode.postal_code;\n                    return {\n                        success: true,\n                        serviceable: true,\n                        city: postalCode.city || '',\n                        state: postalCode.inc ? postalCode.inc.split('_').pop()?.replace(/[()]/g, '').replace(/^[A-Z]\\s*/, '') || '' : '',\n                        country: 'India',\n                        message: 'Pincode is serviceable by Delhivery'\n                    };\n                } else if (data && data.delivery_codes && Array.isArray(data.delivery_codes) && data.delivery_codes.length === 0) {\n                    // Empty delivery_codes array means pincode not found\n                    return {\n                        success: true,\n                        serviceable: false,\n                        message: 'Pincode is not serviceable by Delhivery'\n                    };\n                } else {\n                    return {\n                        success: true,\n                        serviceable: false,\n                        message: 'Pincode is not serviceable by Delhivery'\n                    };\n                }\n            } else {\n                const errorText = await response.text();\n                throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);\n            }\n        } catch (error) {\n            return {\n                success: false,\n                serviceable: false,\n                error: error instanceof Error ? error.message : 'Failed to validate pincode'\n            };\n        }\n    }\n}\nconst delhiveryService = new DelhiveryService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/delhivery.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"(rsc)/./src/lib/config.ts\");\n\n\n// Debug environment variables more explicitly\nconsole.log('=== PRISMA INITIALIZATION DEBUG ===');\nconsole.log('NODE_ENV:', \"development\");\nconsole.log('VERCEL_ENV:', process.env.VERCEL_ENV);\nconsole.log('DATABASE_URL from process.env:', process.env.DATABASE_URL ? 'SET' : 'NOT SET');\nconsole.log('DATABASE_URL from config:', _config__WEBPACK_IMPORTED_MODULE_1__.config.database.url ? 'SET' : 'NOT SET');\nconsole.log('All env vars with DATABASE:', Object.keys(process.env).filter((key)=>key.includes('DATABASE')));\nconsole.log('===================================');\n// Ensure DATABASE_URL is available\nif (!process.env.DATABASE_URL) {\n    console.error('CRITICAL: DATABASE_URL is missing from process.env');\n    console.error('Available environment variables:', Object.keys(process.env));\n    throw new Error('DATABASE_URL environment variable is not set');\n}\n// Use a single Prisma instance with proper connection management\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    datasources: {\n        db: {\n            url: process.env.DATABASE_URL\n        }\n    },\n    log: [\n        'query',\n        'info',\n        'warn',\n        'error'\n    ]\n});\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThDO0FBQ1o7QUFFbEMsOENBQThDO0FBQzlDRSxRQUFRQyxHQUFHLENBQUM7QUFDWkQsUUFBUUMsR0FBRyxDQUFDLGFBYzhDO0FBYjFERCxRQUFRQyxHQUFHLENBQUMsZUFBZUMsUUFBUUMsR0FBRyxDQUFDQyxVQUFVO0FBQ2pESixRQUFRQyxHQUFHLENBQUMsa0NBQWtDQyxRQUFRQyxHQUFHLENBQUNFLFlBQVksR0FBRyxRQUFRO0FBQ2pGTCxRQUFRQyxHQUFHLENBQUMsNkJBQTZCRiwyQ0FBTUEsQ0FBQ08sUUFBUSxDQUFDQyxHQUFHLEdBQUcsUUFBUTtBQUN2RVAsUUFBUUMsR0FBRyxDQUFDLCtCQUErQk8sT0FBT0MsSUFBSSxDQUFDUCxRQUFRQyxHQUFHLEVBQUVPLE1BQU0sQ0FBQ0MsQ0FBQUEsTUFBT0EsSUFBSUMsUUFBUSxDQUFDO0FBQy9GWixRQUFRQyxHQUFHLENBQUM7QUFFWixtQ0FBbUM7QUFDbkMsSUFBSSxDQUFDQyxRQUFRQyxHQUFHLENBQUNFLFlBQVksRUFBRTtJQUM3QkwsUUFBUWEsS0FBSyxDQUFDO0lBQ2RiLFFBQVFhLEtBQUssQ0FBQyxvQ0FBb0NMLE9BQU9DLElBQUksQ0FBQ1AsUUFBUUMsR0FBRztJQUN6RSxNQUFNLElBQUlXLE1BQU07QUFDbEI7QUFFQSxpRUFBaUU7QUFDakUsTUFBTUMsa0JBQWtCQztBQUlqQixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSSxJQUFJbkIsd0RBQVlBLENBQUM7SUFDL0RvQixhQUFhO1FBQ1hDLElBQUk7WUFDRlosS0FBS0wsUUFBUUMsR0FBRyxDQUFDRSxZQUFZO1FBQy9CO0lBQ0Y7SUFDQUosS0FBSztRQUFDO1FBQVM7UUFBUTtRQUFRO0tBQVE7QUFDekMsR0FBRztBQUVILElBQUlDLElBQXFDLEVBQUVhLGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsiL1VzZXJzL2thcnRoaWtuYWlkdWRpbnRha3VydGhpL0RvY3VtZW50cy9HaXRIdWIvc2NhbjJzaGlwL3NyYy9saWIvcHJpc21hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcblxuLy8gRGVidWcgZW52aXJvbm1lbnQgdmFyaWFibGVzIG1vcmUgZXhwbGljaXRseVxuY29uc29sZS5sb2coJz09PSBQUklTTUEgSU5JVElBTElaQVRJT04gREVCVUcgPT09Jyk7XG5jb25zb2xlLmxvZygnTk9ERV9FTlY6JywgcHJvY2Vzcy5lbnYuTk9ERV9FTlYpO1xuY29uc29sZS5sb2coJ1ZFUkNFTF9FTlY6JywgcHJvY2Vzcy5lbnYuVkVSQ0VMX0VOVik7XG5jb25zb2xlLmxvZygnREFUQUJBU0VfVVJMIGZyb20gcHJvY2Vzcy5lbnY6JywgcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMID8gJ1NFVCcgOiAnTk9UIFNFVCcpO1xuY29uc29sZS5sb2coJ0RBVEFCQVNFX1VSTCBmcm9tIGNvbmZpZzonLCBjb25maWcuZGF0YWJhc2UudXJsID8gJ1NFVCcgOiAnTk9UIFNFVCcpO1xuY29uc29sZS5sb2coJ0FsbCBlbnYgdmFycyB3aXRoIERBVEFCQVNFOicsIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5maWx0ZXIoa2V5ID0+IGtleS5pbmNsdWRlcygnREFUQUJBU0UnKSkpO1xuY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XG5cbi8vIEVuc3VyZSBEQVRBQkFTRV9VUkwgaXMgYXZhaWxhYmxlXG5pZiAoIXByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCkge1xuICBjb25zb2xlLmVycm9yKCdDUklUSUNBTDogREFUQUJBU0VfVVJMIGlzIG1pc3NpbmcgZnJvbSBwcm9jZXNzLmVudicpO1xuICBjb25zb2xlLmVycm9yKCdBdmFpbGFibGUgZW52aXJvbm1lbnQgdmFyaWFibGVzOicsIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KSk7XG4gIHRocm93IG5ldyBFcnJvcignREFUQUJBU0VfVVJMIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBzZXQnKTtcbn1cblxuLy8gVXNlIGEgc2luZ2xlIFByaXNtYSBpbnN0YW5jZSB3aXRoIHByb3BlciBjb25uZWN0aW9uIG1hbmFnZW1lbnRcbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9IGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPz8gbmV3IFByaXNtYUNsaWVudCh7XG4gIGRhdGFzb3VyY2VzOiB7XG4gICAgZGI6IHtcbiAgICAgIHVybDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMLCAvLyBVc2UgcHJvY2Vzcy5lbnYgZGlyZWN0bHlcbiAgICB9LFxuICB9LFxuICBsb2c6IFsncXVlcnknLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJ10sXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7XG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiY29uZmlnIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3MiLCJlbnYiLCJWRVJDRUxfRU5WIiwiREFUQUJBU0VfVVJMIiwiZGF0YWJhc2UiLCJ1cmwiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwia2V5IiwiaW5jbHVkZXMiLCJlcnJvciIsIkVycm9yIiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsImRhdGFzb3VyY2VzIiwiZGIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/reference-number.ts":
/*!*************************************!*\
  !*** ./src/lib/reference-number.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatReferenceNumber: () => (/* binding */ formatReferenceNumber),\n/* harmony export */   generateReferenceNumber: () => (/* binding */ generateReferenceNumber),\n/* harmony export */   isValidReferenceNumber: () => (/* binding */ isValidReferenceNumber)\n/* harmony export */ });\n/**\n * Generate a reference number in the format: ALPHANUMERIC-MOBILE\n * @param mobile Mobile number to append\n * @returns Generated reference number\n */ function generateReferenceNumber(mobile) {\n    // Generate 6-character alphanumeric string\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for(let i = 0; i < 6; i++){\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    // Format mobile number (remove +91 if present, ensure it's 10 digits)\n    const formattedMobile = mobile.replace(/\\D/g, '').slice(-10);\n    // Return in format: ALPHANUMERIC-MOBILE\n    return `${result}-${formattedMobile}`;\n}\n/**\n * Format reference number with custom value and mobile\n * @param customValue Custom reference value entered by user\n * @param mobile Mobile number to append\n * @returns Formatted reference number\n */ function formatReferenceNumber(customValue, mobile) {\n    // Format mobile number (remove +91 if present, ensure it's 10 digits)\n    const formattedMobile = mobile.replace(/\\D/g, '').slice(-10);\n    // Return in format: CUSTOMVALUE-MOBILE\n    return `${customValue}-${formattedMobile}`;\n}\n/**\n * Validate reference number format\n * @param referenceNumber Reference number to validate\n * @returns True if valid format\n */ function isValidReferenceNumber(referenceNumber) {\n    // Check if it matches the pattern: ALPHANUMERIC-MOBILE or CUSTOM-MOBILE\n    const pattern = /^[A-Z0-9]+-\\d{10}$/;\n    return pattern.test(referenceNumber);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3JlZmVyZW5jZS1udW1iZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUNNLFNBQVNBLHdCQUF3QkMsTUFBYztJQUNwRCwyQ0FBMkM7SUFDM0MsTUFBTUMsUUFBUTtJQUNkLElBQUlDLFNBQVM7SUFFYixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxHQUFHQSxJQUFLO1FBQzFCRCxVQUFVRCxNQUFNRyxNQUFNLENBQUNDLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsTUFBTSxLQUFLTixNQUFNTyxNQUFNO0lBQ2hFO0lBRUEsc0VBQXNFO0lBQ3RFLE1BQU1DLGtCQUFrQlQsT0FBT1UsT0FBTyxDQUFDLE9BQU8sSUFBSUMsS0FBSyxDQUFDLENBQUM7SUFFekQsd0NBQXdDO0lBQ3hDLE9BQU8sR0FBR1QsT0FBTyxDQUFDLEVBQUVPLGlCQUFpQjtBQUN2QztBQUVBOzs7OztDQUtDLEdBQ00sU0FBU0csc0JBQXNCQyxXQUFtQixFQUFFYixNQUFjO0lBQ3ZFLHNFQUFzRTtJQUN0RSxNQUFNUyxrQkFBa0JULE9BQU9VLE9BQU8sQ0FBQyxPQUFPLElBQUlDLEtBQUssQ0FBQyxDQUFDO0lBRXpELHVDQUF1QztJQUN2QyxPQUFPLEdBQUdFLFlBQVksQ0FBQyxFQUFFSixpQkFBaUI7QUFDNUM7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0ssdUJBQXVCQyxlQUF1QjtJQUM1RCx3RUFBd0U7SUFDeEUsTUFBTUMsVUFBVTtJQUNoQixPQUFPQSxRQUFRQyxJQUFJLENBQUNGO0FBQ3RCIiwic291cmNlcyI6WyIvVXNlcnMva2FydGhpa25haWR1ZGludGFrdXJ0aGkvRG9jdW1lbnRzL0dpdEh1Yi9zY2FuMnNoaXAvc3JjL2xpYi9yZWZlcmVuY2UtbnVtYmVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2VuZXJhdGUgYSByZWZlcmVuY2UgbnVtYmVyIGluIHRoZSBmb3JtYXQ6IEFMUEhBTlVNRVJJQy1NT0JJTEVcbiAqIEBwYXJhbSBtb2JpbGUgTW9iaWxlIG51bWJlciB0byBhcHBlbmRcbiAqIEByZXR1cm5zIEdlbmVyYXRlZCByZWZlcmVuY2UgbnVtYmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVJlZmVyZW5jZU51bWJlcihtb2JpbGU6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIEdlbmVyYXRlIDYtY2hhcmFjdGVyIGFscGhhbnVtZXJpYyBzdHJpbmdcbiAgY29uc3QgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5JztcbiAgbGV0IHJlc3VsdCA9ICcnO1xuICBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICByZXN1bHQgKz0gY2hhcnMuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJzLmxlbmd0aCkpO1xuICB9XG4gIFxuICAvLyBGb3JtYXQgbW9iaWxlIG51bWJlciAocmVtb3ZlICs5MSBpZiBwcmVzZW50LCBlbnN1cmUgaXQncyAxMCBkaWdpdHMpXG4gIGNvbnN0IGZvcm1hdHRlZE1vYmlsZSA9IG1vYmlsZS5yZXBsYWNlKC9cXEQvZywgJycpLnNsaWNlKC0xMCk7XG4gIFxuICAvLyBSZXR1cm4gaW4gZm9ybWF0OiBBTFBIQU5VTUVSSUMtTU9CSUxFXG4gIHJldHVybiBgJHtyZXN1bHR9LSR7Zm9ybWF0dGVkTW9iaWxlfWA7XG59XG5cbi8qKlxuICogRm9ybWF0IHJlZmVyZW5jZSBudW1iZXIgd2l0aCBjdXN0b20gdmFsdWUgYW5kIG1vYmlsZVxuICogQHBhcmFtIGN1c3RvbVZhbHVlIEN1c3RvbSByZWZlcmVuY2UgdmFsdWUgZW50ZXJlZCBieSB1c2VyXG4gKiBAcGFyYW0gbW9iaWxlIE1vYmlsZSBudW1iZXIgdG8gYXBwZW5kXG4gKiBAcmV0dXJucyBGb3JtYXR0ZWQgcmVmZXJlbmNlIG51bWJlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0UmVmZXJlbmNlTnVtYmVyKGN1c3RvbVZhbHVlOiBzdHJpbmcsIG1vYmlsZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gRm9ybWF0IG1vYmlsZSBudW1iZXIgKHJlbW92ZSArOTEgaWYgcHJlc2VudCwgZW5zdXJlIGl0J3MgMTAgZGlnaXRzKVxuICBjb25zdCBmb3JtYXR0ZWRNb2JpbGUgPSBtb2JpbGUucmVwbGFjZSgvXFxEL2csICcnKS5zbGljZSgtMTApO1xuICBcbiAgLy8gUmV0dXJuIGluIGZvcm1hdDogQ1VTVE9NVkFMVUUtTU9CSUxFXG4gIHJldHVybiBgJHtjdXN0b21WYWx1ZX0tJHtmb3JtYXR0ZWRNb2JpbGV9YDtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSByZWZlcmVuY2UgbnVtYmVyIGZvcm1hdFxuICogQHBhcmFtIHJlZmVyZW5jZU51bWJlciBSZWZlcmVuY2UgbnVtYmVyIHRvIHZhbGlkYXRlXG4gKiBAcmV0dXJucyBUcnVlIGlmIHZhbGlkIGZvcm1hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFJlZmVyZW5jZU51bWJlcihyZWZlcmVuY2VOdW1iZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAvLyBDaGVjayBpZiBpdCBtYXRjaGVzIHRoZSBwYXR0ZXJuOiBBTFBIQU5VTUVSSUMtTU9CSUxFIG9yIENVU1RPTS1NT0JJTEVcbiAgY29uc3QgcGF0dGVybiA9IC9eW0EtWjAtOV0rLVxcZHsxMH0kLztcbiAgcmV0dXJuIHBhdHRlcm4udGVzdChyZWZlcmVuY2VOdW1iZXIpO1xufVxuIl0sIm5hbWVzIjpbImdlbmVyYXRlUmVmZXJlbmNlTnVtYmVyIiwibW9iaWxlIiwiY2hhcnMiLCJyZXN1bHQiLCJpIiwiY2hhckF0IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiZm9ybWF0dGVkTW9iaWxlIiwicmVwbGFjZSIsInNsaWNlIiwiZm9ybWF0UmVmZXJlbmNlTnVtYmVyIiwiY3VzdG9tVmFsdWUiLCJpc1ZhbGlkUmVmZXJlbmNlTnVtYmVyIiwicmVmZXJlbmNlTnVtYmVyIiwicGF0dGVybiIsInRlc3QiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/reference-number.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/whatsapp-service.ts":
/*!*************************************!*\
  !*** ./src/lib/whatsapp-service.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   initializeWhatsAppService: () => (/* binding */ initializeWhatsAppService)\n/* harmony export */ });\nclass WhatsAppService {\n    constructor(config){\n        this.config = config;\n        this.baseUrl = 'https://www.fast2sms.com/dev/whatsapp';\n    }\n    /**\n   * Send WhatsApp message using Fast2SMS API with template variables\n   */ async sendWhatsAppMessage(phone, variables) {\n        try {\n            // Validate configuration\n            if (!this.config.apiKey) {\n                throw new Error('Fast2SMS WhatsApp API key not configured');\n            }\n            if (!this.config.messageId) {\n                throw new Error('Fast2SMS WhatsApp message ID not configured');\n            }\n            const formattedPhone = this.formatPhoneNumber(phone);\n            const variablesValues = variables.join('|');\n            console.log('📱 [WHATSAPP_SERVICE] Sending WhatsApp message:', {\n                phone: formattedPhone,\n                messageId: this.config.messageId,\n                variables,\n                variablesValues\n            });\n            const url = new URL(this.baseUrl);\n            url.searchParams.set('authorization', this.config.apiKey);\n            url.searchParams.set('message_id', this.config.messageId);\n            url.searchParams.set('numbers', formattedPhone);\n            url.searchParams.set('variables_values', variablesValues);\n            const response = await fetch(url.toString(), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            console.log('📱 [WHATSAPP_SERVICE] Fast2SMS API response status:', response.status);\n            if (!response.ok) {\n                const errorResponse = await response.text();\n                console.error('📱 [WHATSAPP_SERVICE] Fast2SMS API error response:', errorResponse);\n                throw new Error(`WhatsApp API error: ${response.status} - ${errorResponse}`);\n            }\n            const result = await response.json();\n            console.log('📱 [WHATSAPP_SERVICE] Fast2SMS API response:', result);\n            if (result.return === true) {\n                console.log('✅ [WHATSAPP_SERVICE] WhatsApp message sent successfully');\n                return {\n                    success: true,\n                    messageId: result.request_id || 'unknown'\n                };\n            }\n            throw new Error(`WhatsApp API error: ${result.message?.join(', ') || 'Unknown error'}`);\n        } catch (error) {\n            console.error('❌ [WHATSAPP_SERVICE] WhatsApp message failed:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    /**\n   * Format phone number for Fast2SMS API\n   */ formatPhoneNumber(phone) {\n        const digits = phone.replace(/\\D/g, '');\n        // Remove +91 prefix if present (12 digits)\n        if (digits.startsWith('91') && digits.length === 12) {\n            return digits.substring(2);\n        }\n        // Add 91 prefix if not present (10 digits)\n        if (!digits.startsWith('91') && digits.length === 10) {\n            return '91' + digits;\n        }\n        return digits;\n    }\n    /**\n   * Send order confirmation WhatsApp message to customer\n   */ async sendCustomerOrderWhatsApp(data) {\n        try {\n            const variables = this.generateCustomerVariables(data);\n            console.log('📱 [WHATSAPP_SERVICE] Sending customer WhatsApp message for order:', data.orderNumber);\n            const result = await this.sendWhatsAppMessage(data.customerPhone, variables);\n            if (result.success) {\n                console.log('✅ [WHATSAPP_SERVICE] Customer WhatsApp message sent successfully:', {\n                    orderNumber: data.orderNumber,\n                    messageId: result.messageId\n                });\n            }\n            return result;\n        } catch (error) {\n            console.error('❌ [WHATSAPP_SERVICE] Customer WhatsApp message failed:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    /**\n   * Send order confirmation WhatsApp message to reseller\n   */ async sendResellerOrderWhatsApp(data) {\n        if (!data.resellerPhone) {\n            console.log('📱 [WHATSAPP_SERVICE] No reseller phone number, skipping reseller WhatsApp');\n            return {\n                success: true\n            };\n        }\n        try {\n            const variables = this.generateResellerVariables(data);\n            console.log('📱 [WHATSAPP_SERVICE] Sending reseller WhatsApp message for order:', data.orderNumber);\n            const result = await this.sendWhatsAppMessage(data.resellerPhone, variables);\n            if (result.success) {\n                console.log('✅ [WHATSAPP_SERVICE] Reseller WhatsApp message sent successfully:', {\n                    orderNumber: data.orderNumber,\n                    messageId: result.messageId\n                });\n            }\n            return result;\n        } catch (error) {\n            console.error('❌ [WHATSAPP_SERVICE] Reseller WhatsApp message failed:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    /**\n   * Send test WhatsApp message\n   */ async sendTestWhatsApp(phone, variables) {\n        try {\n            console.log('📱 [WHATSAPP_SERVICE] Sending test WhatsApp message...');\n            const result = await this.sendWhatsAppMessage(phone, variables);\n            if (result.success) {\n                console.log('✅ [WHATSAPP_SERVICE] Test WhatsApp message sent successfully');\n            }\n            return result;\n        } catch (error) {\n            console.error('❌ [WHATSAPP_SERVICE] Test WhatsApp message failed:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error'\n            };\n        }\n    }\n    /**\n   * Generate customer WhatsApp variables\n   */ generateCustomerVariables(data) {\n        return [\n            data.customerName,\n            data.resellerName ? data.resellerName : data.clientCompanyName || 'Scan2Ship',\n            data.courierService.replace('_', ' ').toUpperCase(),\n            data.trackingNumber || 'Will be assigned'\n        ];\n    }\n    /**\n   * Generate reseller WhatsApp variables\n   */ generateResellerVariables(data) {\n        return [\n            data.resellerName + ' (Your Customer -' + data.customerName + ')' || 0,\n            data.clientCompanyName || 'Scan2Ship',\n            data.courierService.replace('_', ' ').toUpperCase(),\n            data.trackingNumber || 'Will be assigned'\n        ];\n    }\n    /**\n   * Update WhatsApp service configuration\n   */ updateConfig(newConfig) {\n        this.config = {\n            ...this.config,\n            ...newConfig\n        };\n        console.log('📱 [WHATSAPP_SERVICE] Configuration updated:', this.config);\n    }\n    /**\n   * Check if WhatsApp service is configured\n   */ getStatus() {\n        const missingFields = [];\n        if (!this.config.apiKey) missingFields.push('API Key');\n        if (!this.config.messageId) missingFields.push('Message ID');\n        return {\n            configured: missingFields.length === 0,\n            missingFields\n        };\n    }\n}\n// Helper function to load WhatsApp configuration from database (server-side)\nasync function loadWhatsAppConfigFromDB() {\n    try {\n        // Only run on server side\n        if (false) {}\n        const { PrismaClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @prisma/client */ \"@prisma/client\", 23));\n        const prisma = new PrismaClient();\n        try {\n            const whatsappConfig = await prisma.system_config.findMany({\n                where: {\n                    category: 'whatsapp'\n                }\n            });\n            const config = {\n                apiKey: process.env.FAST2SMS_API_KEY || '',\n                messageId: '4697'\n            };\n            for (const item of whatsappConfig){\n                if (item.key === 'FAST2SMS_API_KEY') {\n                    config.apiKey = item.value || process.env.FAST2SMS_API_KEY || '';\n                } else if (item.key === 'FAST2SMS_WHATSAPP_MESSAGE_ID') {\n                    config.messageId = item.value;\n                }\n            }\n            return config;\n        } finally{\n            await prisma.$disconnect();\n        }\n    } catch (error) {\n        console.error('❌ Error loading WhatsApp config from DB:', error);\n        return {\n            apiKey: '',\n            messageId: '4697'\n        };\n    }\n}\n// Create and export default instance\nconst whatsappService = new WhatsAppService({\n    apiKey: process.env.FAST2SMS_API_KEY || '',\n    messageId: process.env.FAST2SMS_WHATSAPP_MESSAGE_ID || '4697'\n});\n// Function to initialize WhatsApp service with database config\nasync function initializeWhatsAppService() {\n    try {\n        const config = await loadWhatsAppConfigFromDB();\n        whatsappService.updateConfig(config);\n        console.log('📱 [WHATSAPP_SERVICE] Initialized with database configuration');\n    } catch (error) {\n        console.error('❌ [WHATSAPP_SERVICE] Failed to initialize with database config:', error);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (whatsappService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/whatsapp-service.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/semver","vendor-chunks/jsonwebtoken","vendor-chunks/lodash.includes","vendor-chunks/jws","vendor-chunks/lodash.once","vendor-chunks/jwa","vendor-chunks/lodash.isinteger","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/lodash.isplainobject","vendor-chunks/ms","vendor-chunks/lodash.isstring","vendor-chunks/lodash.isnumber","vendor-chunks/lodash.isboolean","vendor-chunks/safe-buffer","vendor-chunks/buffer-equal-constant-time"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Forders%2Froute&page=%2Fapi%2Forders%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forders%2Froute.ts&appDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fkarthiknaidudintakurthi%2FDocuments%2FGitHub%2Fscan2ship&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();