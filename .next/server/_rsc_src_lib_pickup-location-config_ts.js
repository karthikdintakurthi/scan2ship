"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_pickup-location-config_ts";
exports.ids = ["_rsc_src_lib_pickup-location-config_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/pickup-location-config.ts":
/*!*******************************************!*\
  !*** ./src/lib/pickup-location-config.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearPickupLocationCache: () => (/* binding */ clearPickupLocationCache),\n/* harmony export */   defaultPickupLocationConfig: () => (/* binding */ defaultPickupLocationConfig),\n/* harmony export */   getDelhiveryApiKey: () => (/* binding */ getDelhiveryApiKey),\n/* harmony export */   getFragileShipment: () => (/* binding */ getFragileShipment),\n/* harmony export */   getInvoiceNumber: () => (/* binding */ getInvoiceNumber),\n/* harmony export */   getPickupLocationConfig: () => (/* binding */ getPickupLocationConfig),\n/* harmony export */   getPickupLocationLabels: () => (/* binding */ getPickupLocationLabels),\n/* harmony export */   getPickupLocationValues: () => (/* binding */ getPickupLocationValues),\n/* harmony export */   getPickupLocations: () => (/* binding */ getPickupLocations),\n/* harmony export */   getProductDetails: () => (/* binding */ getProductDetails),\n/* harmony export */   getReturnAddress: () => (/* binding */ getReturnAddress),\n/* harmony export */   getSellerDetails: () => (/* binding */ getSellerDetails),\n/* harmony export */   getShipmentDimensions: () => (/* binding */ getShipmentDimensions),\n/* harmony export */   getVendorPickupLocation: () => (/* binding */ getVendorPickupLocation),\n/* harmony export */   pickupLocationConfigs: () => (/* binding */ pickupLocationConfigs)\n/* harmony export */ });\n// Default fallback configuration\nconst defaultPickupLocationConfig = {\n    value: 'RVD JEWELS',\n    label: 'RVD JEWELS',\n    delhiveryApiKey: '2bce24815f3e4da2513ab4aafb7ecb251469c4a9',\n    productDetails: {\n        description: 'ARTIFICAL JEWELLERY',\n        commodity_value: 5000,\n        tax_value: 0,\n        category: 'ARTIFICAL JEWELLERY',\n        hsn_code: ''\n    },\n    returnAddress: {\n        address: 'Mahalakshmi Complex-2, 2nd floor Vijayawada',\n        pincode: '520002'\n    },\n    sellerDetails: {\n        name: 'RVD JEWELS',\n        address: 'Mahalakshmi Complex-2, 2nd floor Vijayawada 520002',\n        gst: '',\n        cst_no: '',\n        tin: ''\n    },\n    vendorPickupLocation: 'RVD JEWELS',\n    shipmentDimensions: {\n        length: 10,\n        breadth: 10,\n        height: 10\n    },\n    fragileShipment: false\n};\n// Cache for pickup locations\nlet pickupLocationCache = null;\nlet cacheTimestamp = 0;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n// Function to fetch pickup locations from API\nasync function fetchPickupLocationsFromAPI() {\n    try {\n        // For server-side execution, return default config\n        if (true) {\n            return [\n                defaultPickupLocationConfig\n            ];\n        }\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n            console.warn('No auth token found, using default pickup locations');\n            return [\n                defaultPickupLocationConfig\n            ];\n        }\n        const response = await fetch('/api/pickup-locations', {\n            headers: {\n                'Authorization': `Bearer ${token}`\n            }\n        });\n        if (response.ok) {\n            const data = await response.json();\n            return data.pickupLocations || [\n                defaultPickupLocationConfig\n            ];\n        } else {\n            console.warn('Failed to fetch pickup locations from API, using default');\n            return [\n                defaultPickupLocationConfig\n            ];\n        }\n    } catch (error) {\n        console.error('Error fetching pickup locations:', error);\n        return [\n            defaultPickupLocationConfig\n        ];\n    }\n}\n// Function to get pickup locations (with caching)\nasync function getPickupLocations() {\n    const now = Date.now();\n    // Return cached data if still valid\n    if (pickupLocationCache && now - cacheTimestamp < CACHE_DURATION) {\n        return pickupLocationCache;\n    }\n    // Fetch fresh data\n    const locations = await fetchPickupLocationsFromAPI();\n    // Update cache\n    pickupLocationCache = locations;\n    cacheTimestamp = now;\n    return locations;\n}\n// Function to clear cache (useful when pickup locations are updated)\nfunction clearPickupLocationCache() {\n    pickupLocationCache = null;\n    cacheTimestamp = 0;\n}\n// Legacy support - keep the old array for backward compatibility\nconst pickupLocationConfigs = [\n    defaultPickupLocationConfig\n];\n// Helper function to get config for a specific pickup location\nasync function getPickupLocationConfig(pickupLocation) {\n    const locations = await getPickupLocations();\n    return locations.find((config)=>config.value === pickupLocation);\n}\n// Helper function to get all pickup location values\nasync function getPickupLocationValues() {\n    const locations = await getPickupLocations();\n    return locations.map((config)=>config.value);\n}\n// Helper function to get all pickup location labels\nasync function getPickupLocationLabels() {\n    const locations = await getPickupLocations();\n    return locations.map((config)=>config.label);\n}\n// Helper function to get Delhivery API key for a specific pickup location\nasync function getDelhiveryApiKey(pickupLocation) {\n    try {\n        // Check if we're on the server side\n        if (true) {\n            // Server-side: fetch directly from database\n            console.log(`üîë [SERVER] Fetching Delhivery API key for pickup location: ${pickupLocation}`);\n            // Import Prisma client for server-side database access\n            const { PrismaClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @prisma/client */ \"@prisma/client\", 23));\n            const prisma = new PrismaClient();\n            try {\n                const pickupLocationRecord = await prisma.pickup_locations.findFirst({\n                    where: {\n                        value: pickupLocation\n                    },\n                    select: {\n                        delhiveryApiKey: true\n                    }\n                });\n                if (pickupLocationRecord?.delhiveryApiKey) {\n                    console.log(`üîë [SERVER] Found Delhivery API key for pickup location: ${pickupLocation}`);\n                    let apiKey = pickupLocationRecord.delhiveryApiKey;\n                    // Extract API key if it's wrapped in JavaScript code\n                    if (apiKey.includes(\"'\") && apiKey.includes('clientKeyD')) {\n                        const match = apiKey.match(/'([^']+)'/);\n                        if (match) {\n                            apiKey = match[1];\n                            console.log(`üîë [SERVER] Extracted clean API key from JavaScript code: ${apiKey}`);\n                        }\n                    }\n                    // Check if the API key is encrypted (96 characters) or plain text (40 characters for Delhivery)\n                    if (apiKey.length === 96) {\n                        // Likely encrypted - try to decrypt\n                        try {\n                            const crypto = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ \"crypto\", 23));\n                            const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'vanitha-logistics-encryption-key-2024';\n                            const decipher = crypto.createDecipher('aes-256-cbc', ENCRYPTION_KEY);\n                            let decrypted = decipher.update(apiKey, 'hex', 'utf8');\n                            decrypted += decipher.final('utf8');\n                            console.log(`üîì [SERVER] Successfully decrypted API key for pickup location: ${pickupLocation}`);\n                            return decrypted;\n                        } catch (decryptError) {\n                            console.error(`‚ùå [SERVER] Failed to decrypt API key for pickup location ${pickupLocation}:`, decryptError);\n                            // Return empty string if decryption fails\n                            return '';\n                        }\n                    } else if (apiKey.length === 40) {\n                        // Likely plain text Delhivery API key\n                        console.log(`üîë [SERVER] Found plain text API key for pickup location: ${pickupLocation}`);\n                        return apiKey;\n                    } else {\n                        // Unknown format - validate for valid characters\n                        console.warn(`‚ö†Ô∏è [SERVER] Unknown API key format for pickup location ${pickupLocation}: length ${apiKey.length}`);\n                        // Check if the API key contains only valid ASCII characters\n                        const invalidChars = apiKey.match(/[^\\x20-\\x7E]/);\n                        if (invalidChars) {\n                            console.error(`‚ùå [SERVER] API key contains invalid characters at position ${invalidChars.index}: ${apiKey[invalidChars.index]}`);\n                            return ''; // Return empty string for invalid API keys\n                        }\n                        return apiKey; // Return as-is if it passes validation\n                    }\n                } else {\n                    console.warn(`‚ö†Ô∏è [SERVER] No Delhivery API key found for pickup location: ${pickupLocation}`);\n                    return '';\n                }\n            } finally{\n                await prisma.$disconnect();\n            }\n        } else {}\n    } catch (error) {\n        console.error(`‚ùå Error getting Delhivery API key for pickup location ${pickupLocation}:`, error);\n        return '';\n    }\n}\n// Helper function to get product details for a specific pickup location\nasync function getProductDetails(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.productDetails || defaultPickupLocationConfig.productDetails;\n}\n// Helper function to get return address for a specific pickup location\nasync function getReturnAddress(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.returnAddress || defaultPickupLocationConfig.returnAddress;\n}\n// Helper function to get seller details for a specific pickup location\nasync function getSellerDetails(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.sellerDetails || defaultPickupLocationConfig.sellerDetails;\n}\n// Helper function to get vendor pickup location for a specific pickup location\nasync function getVendorPickupLocation(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.vendorPickupLocation || defaultPickupLocationConfig.vendorPickupLocation;\n}\n// Helper function to get shipment dimensions for a specific pickup location\nasync function getShipmentDimensions(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.shipmentDimensions || defaultPickupLocationConfig.shipmentDimensions;\n}\n// Helper function to get fragile shipment setting for a specific pickup location\nasync function getFragileShipment(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.fragileShipment || defaultPickupLocationConfig.fragileShipment;\n}\n// Helper function to get invoice number for a specific pickup location\nasync function getInvoiceNumber(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.invoiceNumber;\n}\n// Export default configuration for backward compatibility\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/pickup-location-config.ts\n");

/***/ })

};
;