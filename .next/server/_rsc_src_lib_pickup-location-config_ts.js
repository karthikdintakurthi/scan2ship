"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_pickup-location-config_ts";
exports.ids = ["_rsc_src_lib_pickup-location-config_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/pickup-location-config.ts":
/*!*******************************************!*\
  !*** ./src/lib/pickup-location-config.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearPickupLocationCache: () => (/* binding */ clearPickupLocationCache),\n/* harmony export */   defaultPickupLocationConfig: () => (/* binding */ defaultPickupLocationConfig),\n/* harmony export */   getDelhiveryApiKey: () => (/* binding */ getDelhiveryApiKey),\n/* harmony export */   getFragileShipment: () => (/* binding */ getFragileShipment),\n/* harmony export */   getInvoiceNumber: () => (/* binding */ getInvoiceNumber),\n/* harmony export */   getPickupLocationConfig: () => (/* binding */ getPickupLocationConfig),\n/* harmony export */   getPickupLocationLabels: () => (/* binding */ getPickupLocationLabels),\n/* harmony export */   getPickupLocationValues: () => (/* binding */ getPickupLocationValues),\n/* harmony export */   getPickupLocations: () => (/* binding */ getPickupLocations),\n/* harmony export */   getProductDetails: () => (/* binding */ getProductDetails),\n/* harmony export */   getReturnAddress: () => (/* binding */ getReturnAddress),\n/* harmony export */   getSellerDetails: () => (/* binding */ getSellerDetails),\n/* harmony export */   getShipmentDimensions: () => (/* binding */ getShipmentDimensions),\n/* harmony export */   getVendorPickupLocation: () => (/* binding */ getVendorPickupLocation),\n/* harmony export */   pickupLocationConfigs: () => (/* binding */ pickupLocationConfigs)\n/* harmony export */ });\n// Default fallback configuration\nconst defaultPickupLocationConfig = {\n    value: 'RVD JEWELS',\n    label: 'RVD JEWELS',\n    delhiveryApiKey: '2bce24815f3e4da2513ab4aafb7ecb251469c4a9',\n    productDetails: {\n        description: 'ARTIFICAL JEWELLERY',\n        commodity_value: 5000,\n        tax_value: 0,\n        category: 'ARTIFICAL JEWELLERY',\n        hsn_code: ''\n    },\n    returnAddress: {\n        address: 'Mahalakshmi Complex-2, 2nd floor Vijayawada',\n        pincode: '520002'\n    },\n    sellerDetails: {\n        name: 'RVD JEWELS',\n        address: 'Mahalakshmi Complex-2, 2nd floor Vijayawada 520002',\n        gst: '',\n        cst_no: '',\n        tin: ''\n    },\n    vendorPickupLocation: 'RVD JEWELS',\n    shipmentDimensions: {\n        length: 10,\n        breadth: 10,\n        height: 10\n    },\n    fragileShipment: false\n};\n// Cache for pickup locations\nlet pickupLocationCache = null;\nlet cacheTimestamp = 0;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n// Function to fetch pickup locations from API\nasync function fetchPickupLocationsFromAPI() {\n    try {\n        // For server-side execution, return default config\n        if (true) {\n            return [\n                defaultPickupLocationConfig\n            ];\n        }\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n            console.warn('No auth token found, using default pickup locations');\n            return [\n                defaultPickupLocationConfig\n            ];\n        }\n        const response = await fetch('/api/pickup-locations', {\n            headers: {\n                'Authorization': `Bearer ${token}`\n            }\n        });\n        if (response.ok) {\n            const data = await response.json();\n            return data.pickupLocations || [\n                defaultPickupLocationConfig\n            ];\n        } else {\n            console.warn('Failed to fetch pickup locations from API, using default');\n            return [\n                defaultPickupLocationConfig\n            ];\n        }\n    } catch (error) {\n        console.error('Error fetching pickup locations:', error);\n        return [\n            defaultPickupLocationConfig\n        ];\n    }\n}\n// Function to get pickup locations (with caching)\nasync function getPickupLocations() {\n    const now = Date.now();\n    // Return cached data if still valid\n    if (pickupLocationCache && now - cacheTimestamp < CACHE_DURATION) {\n        return pickupLocationCache;\n    }\n    // Fetch fresh data\n    const locations = await fetchPickupLocationsFromAPI();\n    // Update cache\n    pickupLocationCache = locations;\n    cacheTimestamp = now;\n    return locations;\n}\n// Function to clear cache (useful when pickup locations are updated)\nfunction clearPickupLocationCache() {\n    pickupLocationCache = null;\n    cacheTimestamp = 0;\n}\n// Legacy support - keep the old array for backward compatibility\nconst pickupLocationConfigs = [\n    defaultPickupLocationConfig\n];\n// Helper function to get config for a specific pickup location\nasync function getPickupLocationConfig(pickupLocation) {\n    const locations = await getPickupLocations();\n    return locations.find((config)=>config.value === pickupLocation);\n}\n// Helper function to get all pickup location values\nasync function getPickupLocationValues() {\n    const locations = await getPickupLocations();\n    return locations.map((config)=>config.value);\n}\n// Helper function to get all pickup location labels\nasync function getPickupLocationLabels() {\n    const locations = await getPickupLocations();\n    return locations.map((config)=>config.label);\n}\n// Helper function to get Delhivery API key for a specific pickup location\nasync function getDelhiveryApiKey(pickupLocation) {\n    try {\n        // Check if we're on the server side\n        if (true) {\n            // Server-side: fetch directly from database\n            console.log(`üîë [SERVER] Fetching Delhivery API key for pickup location: ${pickupLocation}`);\n            // Import Prisma client for server-side database access\n            const { PrismaClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @prisma/client */ \"@prisma/client\", 23));\n            const prisma = new PrismaClient();\n            try {\n                const pickupLocationRecord = await prisma.pickup_locations.findFirst({\n                    where: {\n                        value: {\n                            equals: pickupLocation,\n                            mode: 'insensitive'\n                        }\n                    },\n                    select: {\n                        delhiveryApiKey: true\n                    }\n                });\n                if (pickupLocationRecord?.delhiveryApiKey) {\n                    console.log(`üîë [SERVER] Found Delhivery API key for pickup location: ${pickupLocation}`);\n                    let apiKey = pickupLocationRecord.delhiveryApiKey;\n                    // Extract API key if it's wrapped in JavaScript code\n                    if (apiKey.includes(\"'\") && apiKey.includes('clientKeyD')) {\n                        const match = apiKey.match(/'([^']+)'/);\n                        if (match) {\n                            apiKey = match[1];\n                            console.log(`üîë [SERVER] Extracted clean API key from JavaScript code: ${apiKey}`);\n                        }\n                    }\n                    // Check if the API key is encrypted (96 characters) or plain text (40 characters for Delhivery)\n                    if (apiKey.length === 96) {\n                        // Likely encrypted - try to decrypt\n                        try {\n                            const crypto = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! crypto */ \"crypto\", 23));\n                            const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'vanitha-logistics-encryption-key-2024';\n                            const decipher = crypto.createDecipher('aes-256-cbc', ENCRYPTION_KEY);\n                            let decrypted = decipher.update(apiKey, 'hex', 'utf8');\n                            decrypted += decipher.final('utf8');\n                            console.log(`üîì [SERVER] Successfully decrypted API key for pickup location: ${pickupLocation}`);\n                            return decrypted;\n                        } catch (decryptError) {\n                            console.error(`‚ùå [SERVER] Failed to decrypt API key for pickup location ${pickupLocation}:`, decryptError);\n                            // Return empty string if decryption fails\n                            return '';\n                        }\n                    } else if (apiKey.length === 40) {\n                        // Likely plain text Delhivery API key\n                        console.log(`üîë [SERVER] Found plain text API key for pickup location: ${pickupLocation}`);\n                        return apiKey;\n                    } else {\n                        // Unknown format - validate for valid characters\n                        console.warn(`‚ö†Ô∏è [SERVER] Unknown API key format for pickup location ${pickupLocation}: length ${apiKey.length}`);\n                        // Check if the API key contains only valid ASCII characters\n                        const invalidChars = apiKey.match(/[^\\x20-\\x7E]/);\n                        if (invalidChars) {\n                            console.error(`‚ùå [SERVER] API key contains invalid characters at position ${invalidChars.index}: ${apiKey[invalidChars.index]}`);\n                            return ''; // Return empty string for invalid API keys\n                        }\n                        return apiKey; // Return as-is if it passes validation\n                    }\n                } else {\n                    console.warn(`‚ö†Ô∏è [SERVER] No Delhivery API key found for pickup location: ${pickupLocation}`);\n                    return '';\n                }\n            } finally{\n                await prisma.$disconnect();\n            }\n        } else {}\n    } catch (error) {\n        console.error(`‚ùå Error getting Delhivery API key for pickup location ${pickupLocation}:`, error);\n        return '';\n    }\n}\n// Helper function to get product details for a specific pickup location\nasync function getProductDetails(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.productDetails || defaultPickupLocationConfig.productDetails;\n}\n// Helper function to get return address for a specific pickup location\nasync function getReturnAddress(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.returnAddress || defaultPickupLocationConfig.returnAddress;\n}\n// Helper function to get seller details for a specific pickup location\nasync function getSellerDetails(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.sellerDetails || defaultPickupLocationConfig.sellerDetails;\n}\n// Helper function to get vendor pickup location for a specific pickup location\nasync function getVendorPickupLocation(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.vendorPickupLocation || defaultPickupLocationConfig.vendorPickupLocation;\n}\n// Helper function to get shipment dimensions for a specific pickup location\nasync function getShipmentDimensions(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.shipmentDimensions || defaultPickupLocationConfig.shipmentDimensions;\n}\n// Helper function to get fragile shipment setting for a specific pickup location\nasync function getFragileShipment(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.fragileShipment || defaultPickupLocationConfig.fragileShipment;\n}\n// Helper function to get invoice number for a specific pickup location\nasync function getInvoiceNumber(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config?.invoiceNumber;\n}\n// Export default configuration for backward compatibility\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Yi9zY2FuMnNoaXAvc3JjL2xpYi9waWNrdXAtbG9jYXRpb24tY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgUGlja3VwTG9jYXRpb25Db25maWcge1xuICB2YWx1ZTogc3RyaW5nXG4gIGxhYmVsOiBzdHJpbmdcbiAgZGVsaGl2ZXJ5QXBpS2V5OiBzdHJpbmdcbiAgcHJvZHVjdERldGFpbHM6IHtcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gICAgY29tbW9kaXR5X3ZhbHVlOiBudW1iZXJcbiAgICB0YXhfdmFsdWU6IG51bWJlclxuICAgIGNhdGVnb3J5OiBzdHJpbmdcbiAgICBoc25fY29kZTogc3RyaW5nXG4gIH1cbiAgcmV0dXJuQWRkcmVzczoge1xuICAgIGFkZHJlc3M6IHN0cmluZ1xuICAgIHBpbmNvZGU6IHN0cmluZ1xuICB9XG4gIHNlbGxlckRldGFpbHM6IHtcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBhZGRyZXNzOiBzdHJpbmdcbiAgICBnc3Q6IHN0cmluZ1xuICAgIGNzdF9ubzogc3RyaW5nXG4gICAgdGluOiBzdHJpbmdcbiAgfVxuICB2ZW5kb3JQaWNrdXBMb2NhdGlvbjogc3RyaW5nXG4gIHNoaXBtZW50RGltZW5zaW9uczoge1xuICAgIGxlbmd0aDogbnVtYmVyXG4gICAgYnJlYWR0aDogbnVtYmVyXG4gICAgaGVpZ2h0OiBudW1iZXJcbiAgfVxuICBmcmFnaWxlU2hpcG1lbnQ6IGJvb2xlYW5cbiAgaW52b2ljZU51bWJlcj86IHN0cmluZ1xufVxuXG4vLyBEZWZhdWx0IGZhbGxiYWNrIGNvbmZpZ3VyYXRpb25cbmNvbnN0IGRlZmF1bHRQaWNrdXBMb2NhdGlvbkNvbmZpZzogUGlja3VwTG9jYXRpb25Db25maWcgPSB7XG4gIHZhbHVlOiAnUlZEIEpFV0VMUycsXG4gIGxhYmVsOiAnUlZEIEpFV0VMUycsXG4gIGRlbGhpdmVyeUFwaUtleTogJzJiY2UyNDgxNWYzZTRkYTI1MTNhYjRhYWZiN2VjYjI1MTQ2OWM0YTknLFxuICBwcm9kdWN0RGV0YWlsczoge1xuICAgIGRlc2NyaXB0aW9uOiAnQVJUSUZJQ0FMIEpFV0VMTEVSWScsXG4gICAgY29tbW9kaXR5X3ZhbHVlOiA1MDAwLFxuICAgIHRheF92YWx1ZTogMCxcbiAgICBjYXRlZ29yeTogJ0FSVElGSUNBTCBKRVdFTExFUlknLFxuICAgIGhzbl9jb2RlOiAnJ1xuICB9LFxuICByZXR1cm5BZGRyZXNzOiB7XG4gICAgYWRkcmVzczogJ01haGFsYWtzaG1pIENvbXBsZXgtMiwgMm5kIGZsb29yIFZpamF5YXdhZGEnLFxuICAgIHBpbmNvZGU6ICc1MjAwMDInXG4gIH0sXG4gIHNlbGxlckRldGFpbHM6IHtcbiAgICBuYW1lOiAnUlZEIEpFV0VMUycsXG4gICAgYWRkcmVzczogJ01haGFsYWtzaG1pIENvbXBsZXgtMiwgMm5kIGZsb29yIFZpamF5YXdhZGEgNTIwMDAyJyxcbiAgICBnc3Q6ICcnLFxuICAgIGNzdF9ubzogJycsXG4gICAgdGluOiAnJ1xuICB9LFxuICB2ZW5kb3JQaWNrdXBMb2NhdGlvbjogJ1JWRCBKRVdFTFMnLFxuICBzaGlwbWVudERpbWVuc2lvbnM6IHtcbiAgICBsZW5ndGg6IDEwLFxuICAgIGJyZWFkdGg6IDEwLFxuICAgIGhlaWdodDogMTBcbiAgfSxcbiAgZnJhZ2lsZVNoaXBtZW50OiBmYWxzZVxufVxuXG4vLyBDYWNoZSBmb3IgcGlja3VwIGxvY2F0aW9uc1xubGV0IHBpY2t1cExvY2F0aW9uQ2FjaGU6IFBpY2t1cExvY2F0aW9uQ29uZmlnW10gfCBudWxsID0gbnVsbDtcbmxldCBjYWNoZVRpbWVzdGFtcDogbnVtYmVyID0gMDtcbmNvbnN0IENBQ0hFX0RVUkFUSU9OID0gNSAqIDYwICogMTAwMDsgLy8gNSBtaW51dGVzXG5cbi8vIEZ1bmN0aW9uIHRvIGZldGNoIHBpY2t1cCBsb2NhdGlvbnMgZnJvbSBBUElcbmFzeW5jIGZ1bmN0aW9uIGZldGNoUGlja3VwTG9jYXRpb25zRnJvbUFQSSgpOiBQcm9taXNlPFBpY2t1cExvY2F0aW9uQ29uZmlnW10+IHtcbiAgdHJ5IHtcbiAgICAvLyBGb3Igc2VydmVyLXNpZGUgZXhlY3V0aW9uLCByZXR1cm4gZGVmYXVsdCBjb25maWdcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBbZGVmYXVsdFBpY2t1cExvY2F0aW9uQ29uZmlnXTtcbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhdXRoVG9rZW4nKTtcbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ05vIGF1dGggdG9rZW4gZm91bmQsIHVzaW5nIGRlZmF1bHQgcGlja3VwIGxvY2F0aW9ucycpO1xuICAgICAgcmV0dXJuIFtkZWZhdWx0UGlja3VwTG9jYXRpb25Db25maWddO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvcGlja3VwLWxvY2F0aW9ucycsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dG9rZW59YFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIGRhdGEucGlja3VwTG9jYXRpb25zIHx8IFtkZWZhdWx0UGlja3VwTG9jYXRpb25Db25maWddO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBmZXRjaCBwaWNrdXAgbG9jYXRpb25zIGZyb20gQVBJLCB1c2luZyBkZWZhdWx0Jyk7XG4gICAgICByZXR1cm4gW2RlZmF1bHRQaWNrdXBMb2NhdGlvbkNvbmZpZ107XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHBpY2t1cCBsb2NhdGlvbnM6JywgZXJyb3IpO1xuICAgIHJldHVybiBbZGVmYXVsdFBpY2t1cExvY2F0aW9uQ29uZmlnXTtcbiAgfVxufVxuXG4vLyBGdW5jdGlvbiB0byBnZXQgcGlja3VwIGxvY2F0aW9ucyAod2l0aCBjYWNoaW5nKVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBpY2t1cExvY2F0aW9ucygpOiBQcm9taXNlPFBpY2t1cExvY2F0aW9uQ29uZmlnW10+IHtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgXG4gIC8vIFJldHVybiBjYWNoZWQgZGF0YSBpZiBzdGlsbCB2YWxpZFxuICBpZiAocGlja3VwTG9jYXRpb25DYWNoZSAmJiAobm93IC0gY2FjaGVUaW1lc3RhbXApIDwgQ0FDSEVfRFVSQVRJT04pIHtcbiAgICByZXR1cm4gcGlja3VwTG9jYXRpb25DYWNoZTtcbiAgfVxuXG4gIC8vIEZldGNoIGZyZXNoIGRhdGFcbiAgY29uc3QgbG9jYXRpb25zID0gYXdhaXQgZmV0Y2hQaWNrdXBMb2NhdGlvbnNGcm9tQVBJKCk7XG4gIFxuICAvLyBVcGRhdGUgY2FjaGVcbiAgcGlja3VwTG9jYXRpb25DYWNoZSA9IGxvY2F0aW9ucztcbiAgY2FjaGVUaW1lc3RhbXAgPSBub3c7XG4gIFxuICByZXR1cm4gbG9jYXRpb25zO1xufVxuXG4vLyBGdW5jdGlvbiB0byBjbGVhciBjYWNoZSAodXNlZnVsIHdoZW4gcGlja3VwIGxvY2F0aW9ucyBhcmUgdXBkYXRlZClcbmV4cG9ydCBmdW5jdGlvbiBjbGVhclBpY2t1cExvY2F0aW9uQ2FjaGUoKTogdm9pZCB7XG4gIHBpY2t1cExvY2F0aW9uQ2FjaGUgPSBudWxsO1xuICBjYWNoZVRpbWVzdGFtcCA9IDA7XG59XG5cbi8vIExlZ2FjeSBzdXBwb3J0IC0ga2VlcCB0aGUgb2xkIGFycmF5IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5leHBvcnQgY29uc3QgcGlja3VwTG9jYXRpb25Db25maWdzOiBQaWNrdXBMb2NhdGlvbkNvbmZpZ1tdID0gW2RlZmF1bHRQaWNrdXBMb2NhdGlvbkNvbmZpZ107XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgY29uZmlnIGZvciBhIHNwZWNpZmljIHBpY2t1cCBsb2NhdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBpY2t1cExvY2F0aW9uQ29uZmlnKHBpY2t1cExvY2F0aW9uOiBzdHJpbmcpOiBQcm9taXNlPFBpY2t1cExvY2F0aW9uQ29uZmlnIHwgdW5kZWZpbmVkPiB7XG4gIGNvbnN0IGxvY2F0aW9ucyA9IGF3YWl0IGdldFBpY2t1cExvY2F0aW9ucygpO1xuICByZXR1cm4gbG9jYXRpb25zLmZpbmQoY29uZmlnID0+IGNvbmZpZy52YWx1ZSA9PT0gcGlja3VwTG9jYXRpb24pO1xufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGFsbCBwaWNrdXAgbG9jYXRpb24gdmFsdWVzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGlja3VwTG9jYXRpb25WYWx1ZXMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICBjb25zdCBsb2NhdGlvbnMgPSBhd2FpdCBnZXRQaWNrdXBMb2NhdGlvbnMoKTtcbiAgcmV0dXJuIGxvY2F0aW9ucy5tYXAoY29uZmlnID0+IGNvbmZpZy52YWx1ZSk7XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgYWxsIHBpY2t1cCBsb2NhdGlvbiBsYWJlbHNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQaWNrdXBMb2NhdGlvbkxhYmVscygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIGNvbnN0IGxvY2F0aW9ucyA9IGF3YWl0IGdldFBpY2t1cExvY2F0aW9ucygpO1xuICByZXR1cm4gbG9jYXRpb25zLm1hcChjb25maWcgPT4gY29uZmlnLmxhYmVsKTtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBEZWxoaXZlcnkgQVBJIGtleSBmb3IgYSBzcGVjaWZpYyBwaWNrdXAgbG9jYXRpb25cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREZWxoaXZlcnlBcGlLZXkocGlja3VwTG9jYXRpb246IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgb24gdGhlIHNlcnZlciBzaWRlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBTZXJ2ZXItc2lkZTogZmV0Y2ggZGlyZWN0bHkgZnJvbSBkYXRhYmFzZVxuICAgICAgY29uc29sZS5sb2coYPCflJEgW1NFUlZFUl0gRmV0Y2hpbmcgRGVsaGl2ZXJ5IEFQSSBrZXkgZm9yIHBpY2t1cCBsb2NhdGlvbjogJHtwaWNrdXBMb2NhdGlvbn1gKTtcbiAgICAgIFxuICAgICAgLy8gSW1wb3J0IFByaXNtYSBjbGllbnQgZm9yIHNlcnZlci1zaWRlIGRhdGFiYXNlIGFjY2Vzc1xuICAgICAgY29uc3QgeyBQcmlzbWFDbGllbnQgfSA9IGF3YWl0IGltcG9ydCgnQHByaXNtYS9jbGllbnQnKTtcbiAgICAgIGNvbnN0IHByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoKTtcbiAgICAgIFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGlja3VwTG9jYXRpb25SZWNvcmQgPSBhd2FpdCBwcmlzbWEucGlja3VwX2xvY2F0aW9ucy5maW5kRmlyc3Qoe1xuICAgICAgICAgIHdoZXJlOiB7IFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgZXF1YWxzOiBwaWNrdXBMb2NhdGlvbixcbiAgICAgICAgICAgICAgbW9kZTogJ2luc2Vuc2l0aXZlJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VsZWN0OiB7IGRlbGhpdmVyeUFwaUtleTogdHJ1ZSB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgaWYgKHBpY2t1cExvY2F0aW9uUmVjb3JkPy5kZWxoaXZlcnlBcGlLZXkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+UkSBbU0VSVkVSXSBGb3VuZCBEZWxoaXZlcnkgQVBJIGtleSBmb3IgcGlja3VwIGxvY2F0aW9uOiAke3BpY2t1cExvY2F0aW9ufWApO1xuICAgICAgICAgIFxuICAgICAgICAgIGxldCBhcGlLZXkgPSBwaWNrdXBMb2NhdGlvblJlY29yZC5kZWxoaXZlcnlBcGlLZXk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRXh0cmFjdCBBUEkga2V5IGlmIGl0J3Mgd3JhcHBlZCBpbiBKYXZhU2NyaXB0IGNvZGVcbiAgICAgICAgICBpZiAoYXBpS2V5LmluY2x1ZGVzKFwiJ1wiKSAmJiBhcGlLZXkuaW5jbHVkZXMoJ2NsaWVudEtleUQnKSkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBhcGlLZXkubWF0Y2goLycoW14nXSspJy8pO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgIGFwaUtleSA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+UkSBbU0VSVkVSXSBFeHRyYWN0ZWQgY2xlYW4gQVBJIGtleSBmcm9tIEphdmFTY3JpcHQgY29kZTogJHthcGlLZXl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBBUEkga2V5IGlzIGVuY3J5cHRlZCAoOTYgY2hhcmFjdGVycykgb3IgcGxhaW4gdGV4dCAoNDAgY2hhcmFjdGVycyBmb3IgRGVsaGl2ZXJ5KVxuICAgICAgICAgIGlmIChhcGlLZXkubGVuZ3RoID09PSA5Nikge1xuICAgICAgICAgICAgLy8gTGlrZWx5IGVuY3J5cHRlZCAtIHRyeSB0byBkZWNyeXB0XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25zdCBjcnlwdG8gPSBhd2FpdCBpbXBvcnQoJ2NyeXB0bycpO1xuICAgICAgICAgICAgICBjb25zdCBFTkNSWVBUSU9OX0tFWSA9IHByb2Nlc3MuZW52LkVOQ1JZUFRJT05fS0VZIHx8ICd2YW5pdGhhLWxvZ2lzdGljcy1lbmNyeXB0aW9uLWtleS0yMDI0JztcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGNvbnN0IGRlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyKCdhZXMtMjU2LWNiYycsIEVOQ1JZUFRJT05fS0VZKTtcbiAgICAgICAgICAgICAgbGV0IGRlY3J5cHRlZCA9IGRlY2lwaGVyLnVwZGF0ZShhcGlLZXksICdoZXgnLCAndXRmOCcpO1xuICAgICAgICAgICAgICBkZWNyeXB0ZWQgKz0gZGVjaXBoZXIuZmluYWwoJ3V0ZjgnKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5STIFtTRVJWRVJdIFN1Y2Nlc3NmdWxseSBkZWNyeXB0ZWQgQVBJIGtleSBmb3IgcGlja3VwIGxvY2F0aW9uOiAke3BpY2t1cExvY2F0aW9ufWApO1xuICAgICAgICAgICAgICByZXR1cm4gZGVjcnlwdGVkO1xuICAgICAgICAgICAgfSBjYXRjaCAoZGVjcnlwdEVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBbU0VSVkVSXSBGYWlsZWQgdG8gZGVjcnlwdCBBUEkga2V5IGZvciBwaWNrdXAgbG9jYXRpb24gJHtwaWNrdXBMb2NhdGlvbn06YCwgZGVjcnlwdEVycm9yKTtcbiAgICAgICAgICAgICAgLy8gUmV0dXJuIGVtcHR5IHN0cmluZyBpZiBkZWNyeXB0aW9uIGZhaWxzXG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGFwaUtleS5sZW5ndGggPT09IDQwKSB7XG4gICAgICAgICAgICAvLyBMaWtlbHkgcGxhaW4gdGV4dCBEZWxoaXZlcnkgQVBJIGtleVxuICAgICAgICAgICAgY29uc29sZS5sb2coYPCflJEgW1NFUlZFUl0gRm91bmQgcGxhaW4gdGV4dCBBUEkga2V5IGZvciBwaWNrdXAgbG9jYXRpb246ICR7cGlja3VwTG9jYXRpb259YCk7XG4gICAgICAgICAgICByZXR1cm4gYXBpS2V5O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBVbmtub3duIGZvcm1hdCAtIHZhbGlkYXRlIGZvciB2YWxpZCBjaGFyYWN0ZXJzXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyBbU0VSVkVSXSBVbmtub3duIEFQSSBrZXkgZm9ybWF0IGZvciBwaWNrdXAgbG9jYXRpb24gJHtwaWNrdXBMb2NhdGlvbn06IGxlbmd0aCAke2FwaUtleS5sZW5ndGh9YCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBBUEkga2V5IGNvbnRhaW5zIG9ubHkgdmFsaWQgQVNDSUkgY2hhcmFjdGVyc1xuICAgICAgICAgICAgY29uc3QgaW52YWxpZENoYXJzID0gYXBpS2V5Lm1hdGNoKC9bXlxceDIwLVxceDdFXS8pO1xuICAgICAgICAgICAgaWYgKGludmFsaWRDaGFycykge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGDinYwgW1NFUlZFUl0gQVBJIGtleSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgYXQgcG9zaXRpb24gJHtpbnZhbGlkQ2hhcnMuaW5kZXh9OiAke2FwaUtleVtpbnZhbGlkQ2hhcnMuaW5kZXhdfWApO1xuICAgICAgICAgICAgICByZXR1cm4gJyc7IC8vIFJldHVybiBlbXB0eSBzdHJpbmcgZm9yIGludmFsaWQgQVBJIGtleXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGFwaUtleTsgLy8gUmV0dXJuIGFzLWlzIGlmIGl0IHBhc3NlcyB2YWxpZGF0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPIFtTRVJWRVJdIE5vIERlbGhpdmVyeSBBUEkga2V5IGZvdW5kIGZvciBwaWNrdXAgbG9jYXRpb246ICR7cGlja3VwTG9jYXRpb259YCk7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBhd2FpdCBwcmlzbWEuJGRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2xpZW50LXNpZGU6IHVzZSBleGlzdGluZyBsb2dpY1xuICAgICAgY29uc3QgY29uZmlnID0gYXdhaXQgZ2V0UGlja3VwTG9jYXRpb25Db25maWcocGlja3VwTG9jYXRpb24pO1xuICAgICAgaWYgKGNvbmZpZz8uZGVsaGl2ZXJ5QXBpS2V5KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5SRIFtDTElFTlRdIEZvdW5kIERlbGhpdmVyeSBBUEkga2V5IGZvciBwaWNrdXAgbG9jYXRpb246ICR7cGlja3VwTG9jYXRpb259YCk7XG4gICAgICAgIFxuICAgICAgICBsZXQgYXBpS2V5ID0gY29uZmlnLmRlbGhpdmVyeUFwaUtleTtcbiAgICAgICAgXG4gICAgICAgIC8vIEV4dHJhY3QgQVBJIGtleSBpZiBpdCdzIHdyYXBwZWQgaW4gSmF2YVNjcmlwdCBjb2RlXG4gICAgICAgIGlmIChhcGlLZXkuaW5jbHVkZXMoXCInXCIpICYmIGFwaUtleS5pbmNsdWRlcygnY2xpZW50S2V5RCcpKSB7XG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSBhcGlLZXkubWF0Y2goLycoW14nXSspJy8pO1xuICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgYXBpS2V5ID0gbWF0Y2hbMV07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+UkSBbQ0xJRU5UXSBFeHRyYWN0ZWQgY2xlYW4gQVBJIGtleSBmcm9tIEphdmFTY3JpcHQgY29kZTogJHthcGlLZXl9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYXBpS2V5O1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyBbQ0xJRU5UXSBObyBEZWxoaXZlcnkgQVBJIGtleSBmb3VuZCBmb3IgcGlja3VwIGxvY2F0aW9uOiAke3BpY2t1cExvY2F0aW9ufWApO1xuICAgICAgY29uc29sZS53YXJuKGDwn5KhIFBsZWFzZSBjb25maWd1cmUgdGhlIERlbGhpdmVyeSBBUEkga2V5IGZvciB0aGlzIHBpY2t1cCBsb2NhdGlvbiBpbiB0aGUgY2xpZW50IHNldHRpbmdzYCk7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBFcnJvciBnZXR0aW5nIERlbGhpdmVyeSBBUEkga2V5IGZvciBwaWNrdXAgbG9jYXRpb24gJHtwaWNrdXBMb2NhdGlvbn06YCwgZXJyb3IpO1xuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHByb2R1Y3QgZGV0YWlscyBmb3IgYSBzcGVjaWZpYyBwaWNrdXAgbG9jYXRpb25cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQcm9kdWN0RGV0YWlscyhwaWNrdXBMb2NhdGlvbjogc3RyaW5nKSB7XG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGdldFBpY2t1cExvY2F0aW9uQ29uZmlnKHBpY2t1cExvY2F0aW9uKTtcbiAgcmV0dXJuIGNvbmZpZz8ucHJvZHVjdERldGFpbHMgfHwgZGVmYXVsdFBpY2t1cExvY2F0aW9uQ29uZmlnLnByb2R1Y3REZXRhaWxzO1xufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHJldHVybiBhZGRyZXNzIGZvciBhIHNwZWNpZmljIHBpY2t1cCBsb2NhdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJldHVybkFkZHJlc3MocGlja3VwTG9jYXRpb246IHN0cmluZykge1xuICBjb25zdCBjb25maWcgPSBhd2FpdCBnZXRQaWNrdXBMb2NhdGlvbkNvbmZpZyhwaWNrdXBMb2NhdGlvbik7XG4gIHJldHVybiBjb25maWc/LnJldHVybkFkZHJlc3MgfHwgZGVmYXVsdFBpY2t1cExvY2F0aW9uQ29uZmlnLnJldHVybkFkZHJlc3M7XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgc2VsbGVyIGRldGFpbHMgZm9yIGEgc3BlY2lmaWMgcGlja3VwIGxvY2F0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2VsbGVyRGV0YWlscyhwaWNrdXBMb2NhdGlvbjogc3RyaW5nKSB7XG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGdldFBpY2t1cExvY2F0aW9uQ29uZmlnKHBpY2t1cExvY2F0aW9uKTtcbiAgcmV0dXJuIGNvbmZpZz8uc2VsbGVyRGV0YWlscyB8fCBkZWZhdWx0UGlja3VwTG9jYXRpb25Db25maWcuc2VsbGVyRGV0YWlscztcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCB2ZW5kb3IgcGlja3VwIGxvY2F0aW9uIGZvciBhIHNwZWNpZmljIHBpY2t1cCBsb2NhdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFZlbmRvclBpY2t1cExvY2F0aW9uKHBpY2t1cExvY2F0aW9uOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBjb25maWcgPSBhd2FpdCBnZXRQaWNrdXBMb2NhdGlvbkNvbmZpZyhwaWNrdXBMb2NhdGlvbik7XG4gIHJldHVybiBjb25maWc/LnZlbmRvclBpY2t1cExvY2F0aW9uIHx8IGRlZmF1bHRQaWNrdXBMb2NhdGlvbkNvbmZpZy52ZW5kb3JQaWNrdXBMb2NhdGlvbjtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBzaGlwbWVudCBkaW1lbnNpb25zIGZvciBhIHNwZWNpZmljIHBpY2t1cCBsb2NhdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNoaXBtZW50RGltZW5zaW9ucyhwaWNrdXBMb2NhdGlvbjogc3RyaW5nKSB7XG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGdldFBpY2t1cExvY2F0aW9uQ29uZmlnKHBpY2t1cExvY2F0aW9uKTtcbiAgcmV0dXJuIGNvbmZpZz8uc2hpcG1lbnREaW1lbnNpb25zIHx8IGRlZmF1bHRQaWNrdXBMb2NhdGlvbkNvbmZpZy5zaGlwbWVudERpbWVuc2lvbnM7XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgZnJhZ2lsZSBzaGlwbWVudCBzZXR0aW5nIGZvciBhIHNwZWNpZmljIHBpY2t1cCBsb2NhdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEZyYWdpbGVTaGlwbWVudChwaWNrdXBMb2NhdGlvbjogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGdldFBpY2t1cExvY2F0aW9uQ29uZmlnKHBpY2t1cExvY2F0aW9uKTtcbiAgcmV0dXJuIGNvbmZpZz8uZnJhZ2lsZVNoaXBtZW50IHx8IGRlZmF1bHRQaWNrdXBMb2NhdGlvbkNvbmZpZy5mcmFnaWxlU2hpcG1lbnQ7XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgaW52b2ljZSBudW1iZXIgZm9yIGEgc3BlY2lmaWMgcGlja3VwIGxvY2F0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SW52b2ljZU51bWJlcihwaWNrdXBMb2NhdGlvbjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgY29uc3QgY29uZmlnID0gYXdhaXQgZ2V0UGlja3VwTG9jYXRpb25Db25maWcocGlja3VwTG9jYXRpb24pO1xuICByZXR1cm4gY29uZmlnPy5pbnZvaWNlTnVtYmVyO1xufVxuXG4vLyBFeHBvcnQgZGVmYXVsdCBjb25maWd1cmF0aW9uIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5leHBvcnQgeyBkZWZhdWx0UGlja3VwTG9jYXRpb25Db25maWcgfTtcbiJdLCJuYW1lcyI6WyJkZWZhdWx0UGlja3VwTG9jYXRpb25Db25maWciLCJ2YWx1ZSIsImxhYmVsIiwiZGVsaGl2ZXJ5QXBpS2V5IiwicHJvZHVjdERldGFpbHMiLCJkZXNjcmlwdGlvbiIsImNvbW1vZGl0eV92YWx1ZSIsInRheF92YWx1ZSIsImNhdGVnb3J5IiwiaHNuX2NvZGUiLCJyZXR1cm5BZGRyZXNzIiwiYWRkcmVzcyIsInBpbmNvZGUiLCJzZWxsZXJEZXRhaWxzIiwibmFtZSIsImdzdCIsImNzdF9ubyIsInRpbiIsInZlbmRvclBpY2t1cExvY2F0aW9uIiwic2hpcG1lbnREaW1lbnNpb25zIiwibGVuZ3RoIiwiYnJlYWR0aCIsImhlaWdodCIsImZyYWdpbGVTaGlwbWVudCIsInBpY2t1cExvY2F0aW9uQ2FjaGUiLCJjYWNoZVRpbWVzdGFtcCIsIkNBQ0hFX0RVUkFUSU9OIiwiZmV0Y2hQaWNrdXBMb2NhdGlvbnNGcm9tQVBJIiwidG9rZW4iLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiY29uc29sZSIsIndhcm4iLCJyZXNwb25zZSIsImZldGNoIiwiaGVhZGVycyIsIm9rIiwiZGF0YSIsImpzb24iLCJwaWNrdXBMb2NhdGlvbnMiLCJlcnJvciIsImdldFBpY2t1cExvY2F0aW9ucyIsIm5vdyIsIkRhdGUiLCJsb2NhdGlvbnMiLCJjbGVhclBpY2t1cExvY2F0aW9uQ2FjaGUiLCJwaWNrdXBMb2NhdGlvbkNvbmZpZ3MiLCJnZXRQaWNrdXBMb2NhdGlvbkNvbmZpZyIsInBpY2t1cExvY2F0aW9uIiwiZmluZCIsImNvbmZpZyIsImdldFBpY2t1cExvY2F0aW9uVmFsdWVzIiwibWFwIiwiZ2V0UGlja3VwTG9jYXRpb25MYWJlbHMiLCJnZXREZWxoaXZlcnlBcGlLZXkiLCJsb2ciLCJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJwaWNrdXBMb2NhdGlvblJlY29yZCIsInBpY2t1cF9sb2NhdGlvbnMiLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImVxdWFscyIsIm1vZGUiLCJzZWxlY3QiLCJhcGlLZXkiLCJpbmNsdWRlcyIsIm1hdGNoIiwiY3J5cHRvIiwiRU5DUllQVElPTl9LRVkiLCJwcm9jZXNzIiwiZW52IiwiZGVjaXBoZXIiLCJjcmVhdGVEZWNpcGhlciIsImRlY3J5cHRlZCIsInVwZGF0ZSIsImZpbmFsIiwiZGVjcnlwdEVycm9yIiwiaW52YWxpZENoYXJzIiwiaW5kZXgiLCIkZGlzY29ubmVjdCIsImdldFByb2R1Y3REZXRhaWxzIiwiZ2V0UmV0dXJuQWRkcmVzcyIsImdldFNlbGxlckRldGFpbHMiLCJnZXRWZW5kb3JQaWNrdXBMb2NhdGlvbiIsImdldFNoaXBtZW50RGltZW5zaW9ucyIsImdldEZyYWdpbGVTaGlwbWVudCIsImdldEludm9pY2VOdW1iZXIiLCJpbnZvaWNlTnVtYmVyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/pickup-location-config.ts\n");

/***/ })

};
;