"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/orders/page",{

/***/ "(app-pages-browser)/./src/lib/pickup-location-config.ts":
/*!*******************************************!*\
  !*** ./src/lib/pickup-location-config.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearPickupLocationCache: () => (/* binding */ clearPickupLocationCache),\n/* harmony export */   defaultPickupLocationConfig: () => (/* binding */ defaultPickupLocationConfig),\n/* harmony export */   getDelhiveryApiKey: () => (/* binding */ getDelhiveryApiKey),\n/* harmony export */   getFragileShipment: () => (/* binding */ getFragileShipment),\n/* harmony export */   getInvoiceNumber: () => (/* binding */ getInvoiceNumber),\n/* harmony export */   getPickupLocationConfig: () => (/* binding */ getPickupLocationConfig),\n/* harmony export */   getPickupLocationLabels: () => (/* binding */ getPickupLocationLabels),\n/* harmony export */   getPickupLocationValues: () => (/* binding */ getPickupLocationValues),\n/* harmony export */   getPickupLocations: () => (/* binding */ getPickupLocations),\n/* harmony export */   getProductDetails: () => (/* binding */ getProductDetails),\n/* harmony export */   getReturnAddress: () => (/* binding */ getReturnAddress),\n/* harmony export */   getSellerDetails: () => (/* binding */ getSellerDetails),\n/* harmony export */   getShipmentDimensions: () => (/* binding */ getShipmentDimensions),\n/* harmony export */   getVendorPickupLocation: () => (/* binding */ getVendorPickupLocation),\n/* harmony export */   pickupLocationConfigs: () => (/* binding */ pickupLocationConfigs)\n/* harmony export */ });\n// Default fallback configuration\nconst defaultPickupLocationConfig = {\n    value: 'RVD JEWELS',\n    label: 'RVD JEWELS',\n    delhiveryApiKey: '2bce24815f3e4da2513ab4aafb7ecb251469c4a9',\n    productDetails: {\n        description: 'ARTIFICAL JEWELLERY',\n        commodity_value: 5000,\n        tax_value: 0,\n        category: 'ARTIFICAL JEWELLERY',\n        hsn_code: ''\n    },\n    returnAddress: {\n        address: 'Mahalakshmi Complex-2, 2nd floor Vijayawada',\n        pincode: '520002'\n    },\n    sellerDetails: {\n        name: 'RVD JEWELS',\n        address: 'Mahalakshmi Complex-2, 2nd floor Vijayawada 520002',\n        gst: '',\n        cst_no: '',\n        tin: ''\n    },\n    vendorPickupLocation: 'RVD JEWELS',\n    shipmentDimensions: {\n        length: 10,\n        breadth: 10,\n        height: 10\n    },\n    fragileShipment: false\n};\n// Cache for pickup locations\nlet pickupLocationCache = null;\nlet cacheTimestamp = 0;\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n// Function to fetch pickup locations from API\nasync function fetchPickupLocationsFromAPI() {\n    try {\n        // For server-side execution, return default config\n        if (false) {}\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n            console.warn('No auth token found, using default pickup locations');\n            return [\n                defaultPickupLocationConfig\n            ];\n        }\n        const response = await fetch('/api/pickup-locations', {\n            headers: {\n                'Authorization': \"Bearer \".concat(token)\n            }\n        });\n        if (response.ok) {\n            const data = await response.json();\n            return data.pickupLocations || [\n                defaultPickupLocationConfig\n            ];\n        } else {\n            console.warn('Failed to fetch pickup locations from API, using default');\n            return [\n                defaultPickupLocationConfig\n            ];\n        }\n    } catch (error) {\n        console.error('Error fetching pickup locations:', error);\n        return [\n            defaultPickupLocationConfig\n        ];\n    }\n}\n// Function to get pickup locations (with caching)\nasync function getPickupLocations() {\n    const now = Date.now();\n    // Return cached data if still valid\n    if (pickupLocationCache && now - cacheTimestamp < CACHE_DURATION) {\n        return pickupLocationCache;\n    }\n    // Fetch fresh data\n    const locations = await fetchPickupLocationsFromAPI();\n    // Update cache\n    pickupLocationCache = locations;\n    cacheTimestamp = now;\n    return locations;\n}\n// Function to clear cache (useful when pickup locations are updated)\nfunction clearPickupLocationCache() {\n    pickupLocationCache = null;\n    cacheTimestamp = 0;\n}\n// Legacy support - keep the old array for backward compatibility\nconst pickupLocationConfigs = [\n    defaultPickupLocationConfig\n];\n// Helper function to get config for a specific pickup location\nasync function getPickupLocationConfig(pickupLocation) {\n    const locations = await getPickupLocations();\n    return locations.find((config)=>config.value === pickupLocation);\n}\n// Helper function to get all pickup location values\nasync function getPickupLocationValues() {\n    const locations = await getPickupLocations();\n    return locations.map((config)=>config.value);\n}\n// Helper function to get all pickup location labels\nasync function getPickupLocationLabels() {\n    const locations = await getPickupLocations();\n    return locations.map((config)=>config.label);\n}\n// Helper function to get Delhivery API key for a specific pickup location\nasync function getDelhiveryApiKey(pickupLocation) {\n    try {\n        // Check if we're on the server side\n        if (false) {} else {\n            // Client-side: use existing logic\n            const config = await getPickupLocationConfig(pickupLocation);\n            if (config === null || config === void 0 ? void 0 : config.delhiveryApiKey) {\n                console.log(\"\\uD83D\\uDD11 [CLIENT] Found Delhivery API key for pickup location: \".concat(pickupLocation));\n                let apiKey = config.delhiveryApiKey;\n                // Extract API key if it's wrapped in JavaScript code\n                if (apiKey.includes(\"'\") && apiKey.includes('clientKeyD')) {\n                    const match = apiKey.match(/'([^']+)'/);\n                    if (match) {\n                        apiKey = match[1];\n                        console.log(\"\\uD83D\\uDD11 [CLIENT] Extracted clean API key from JavaScript code: \".concat(apiKey));\n                    }\n                }\n                return apiKey;\n            }\n            console.warn(\"⚠️ [CLIENT] No Delhivery API key found for pickup location: \".concat(pickupLocation));\n            console.warn(\"\\uD83D\\uDCA1 Please configure the Delhivery API key for this pickup location in the client settings\");\n            return '';\n        }\n    } catch (error) {\n        console.error(\"❌ Error getting Delhivery API key for pickup location \".concat(pickupLocation, \":\"), error);\n        return '';\n    }\n}\n// Helper function to get product details for a specific pickup location\nasync function getProductDetails(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return (config === null || config === void 0 ? void 0 : config.productDetails) || defaultPickupLocationConfig.productDetails;\n}\n// Helper function to get return address for a specific pickup location\nasync function getReturnAddress(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return (config === null || config === void 0 ? void 0 : config.returnAddress) || defaultPickupLocationConfig.returnAddress;\n}\n// Helper function to get seller details for a specific pickup location\nasync function getSellerDetails(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return (config === null || config === void 0 ? void 0 : config.sellerDetails) || defaultPickupLocationConfig.sellerDetails;\n}\n// Helper function to get vendor pickup location for a specific pickup location\nasync function getVendorPickupLocation(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return (config === null || config === void 0 ? void 0 : config.vendorPickupLocation) || defaultPickupLocationConfig.vendorPickupLocation;\n}\n// Helper function to get shipment dimensions for a specific pickup location\nasync function getShipmentDimensions(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return (config === null || config === void 0 ? void 0 : config.shipmentDimensions) || defaultPickupLocationConfig.shipmentDimensions;\n}\n// Helper function to get fragile shipment setting for a specific pickup location\nasync function getFragileShipment(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return (config === null || config === void 0 ? void 0 : config.fragileShipment) || defaultPickupLocationConfig.fragileShipment;\n}\n// Helper function to get invoice number for a specific pickup location\nasync function getInvoiceNumber(pickupLocation) {\n    const config = await getPickupLocationConfig(pickupLocation);\n    return config === null || config === void 0 ? void 0 : config.invoiceNumber;\n}\n// Export default configuration for backward compatibility\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/pickup-location-config.ts\n"));

/***/ })

});