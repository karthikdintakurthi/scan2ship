name: Database Migration Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'prisma/**'
      - '.github/workflows/database-migration.yml'
  push:
    branches: [ main ]
    paths:
      - 'prisma/**'
      - '.github/workflows/database-migration.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_migrate:
        description: 'Force migration even if there are warnings'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PRISMA_VERSION: '6.14.0'

jobs:
  # Validate database schema and migrations
  validate-migrations:
    name: Validate Database Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Validate schema
        run: npx prisma validate

      - name: Check migration status
        run: npx prisma migrate status
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Create migration plan
        id: migration-plan
        run: |
          echo "Checking for pending migrations..."
          npx prisma migrate diff \
            --from-schema-datamodel prisma/schema.prisma \
            --to-schema-datasource prisma/schema.prisma \
            --exit-code
        continue-on-error: true
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Test migrations on staging environment
  test-migrations-staging:
    name: Test Migrations on Staging
    runs-on: ubuntu-latest
    needs: validate-migrations
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Create database backup
        run: |
          echo "Creating database backup..."
          npx prisma migrate diff \
            --from-schema-datasource prisma/schema.prisma \
            --to-schema-datasource prisma/schema.prisma \
            --script > migration_backup.sql
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run migrations on staging
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify migration success
        run: |
          echo "Verifying migration success..."
          npx prisma migrate status
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run database tests
        run: |
          echo "Running database tests..."
          npm run test:db || echo "No database tests found"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Deploy to production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-migrations, test-migrations-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Create production database backup
        run: |
          echo "Creating production database backup..."
          timestamp=$(date +%Y%m%d_%H%M%S)
          echo "backup_${timestamp}" > backup_timestamp.txt
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run migrations on production
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify production migration
        run: |
          echo "Verifying production migration..."
          npx prisma migrate status
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # Rollback job (manual trigger)
  rollback:
    name: Rollback Database Migration
    runs-on: ubuntu-latest
    if: github.event.inputs.rollback == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Rollback to previous migration
        run: |
          echo "Rolling back to previous migration..."
          npx prisma migrate reset --force
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Notify rollback completion
        run: |
          echo "Database rollback completed"
          echo "Please check the database state manually"
