generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id                       Int       @id @default(autoincrement())
  name                     String
  mobile                   String
  address                  String
  city                     String
  state                    String
  country                  String
  pincode                  String
  courier_service          String
  pickup_location          String
  package_value            Float
  weight                   Float
  total_items              Int
  tracking_id              String?
  reference_number         String?
  is_cod                   Boolean   @default(false)
  cod_amount               Float?
  reseller_name            String?
  reseller_mobile          String?
  created_at               DateTime  @default(now())
  updated_at               DateTime
  delhivery_waybill_number String?
  delhivery_order_id       String?
  delhivery_api_status     String?
  delhivery_api_error      String?
  delhivery_retry_count    Int       @default(0)
  last_delhivery_attempt   DateTime?
  shipment_length          Float?
  shipment_breadth         Float?
  shipment_height          Float?
  product_description      String?
  return_address           String?
  return_pincode           String?
  fragile_shipment         Boolean   @default(false)
  seller_name              String?
  seller_address           String?
  seller_gst               String?
  invoice_number           String?
  commodity_value          Float?
  tax_value                Float?
  category_of_goods        String?
  vendor_pickup_location   String?
  hsn_code                 String?
  seller_cst_no            String?
  seller_tin               String?
  invoice_date             String?
  return_reason            String?
  ewbn                     String?
  phone                    String?
}

model categories {
  id                 String               @id
  name               String
  description        String?
  isActive           Boolean              @default(true)
  clientId           String
  parentId           String?
  sortOrder          Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  categories         categories?          @relation("categoriesTocategories", fields: [parentId], references: [id], onDelete: Cascade)
  other_categories   categories[]         @relation("categoriesTocategories")
  product_categories product_categories[]

  @@unique([name, clientId, parentId])
}

model client_config {
  id          String   @id
  clientId    String
  key         String
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isEncrypted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  clients     clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, key])
}

model client_order_configs {
  id                        String  @id
  defaultProductDescription String  @default("ARTIFICAL JEWELLERY")
  defaultPackageValue       Float   @default(5000)
  defaultWeight             Float   @default(100)
  defaultTotalItems         Int     @default(1)
  codEnabledByDefault       Boolean @default(false)
  defaultCodAmount          Float?
  minPackageValue           Float   @default(100)
  maxPackageValue           Float   @default(100000)
  minWeight                 Float   @default(1)
  maxWeight                 Float   @default(50000)
  minTotalItems             Int     @default(1)
  maxTotalItems             Int     @default(100)
  requireProductDescription Boolean @default(true)
  requirePackageValue       Boolean @default(true)
  requireWeight             Boolean @default(true)
  requireTotalItems         Boolean @default(true)
  clientId                  String  @unique
  clients                   clients @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model client_settings {
  id                 String   @id
  clientId           String   @unique
  companyName        String
  email              String
  phone              String?
  address            String?
  timezone           String   @default("America/New_York")
  lowStockThreshold  Int      @default(10)
  autoReorder        Boolean  @default(false)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  clients            clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model clients {
  id                   String                @id
  name                 String
  slug                 String                @unique
  domain               String?
  email                String
  phone                String?
  address              String?
  logo                 String?
  countryId            String?
  currencyId           String?
  isActive             Boolean               @default(true)
  plan                 Plan                  @default(STARTER)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  client_config        client_config[]
  client_order_configs client_order_configs?
  client_settings      client_settings?
  countries            countries?            @relation(fields: [countryId], references: [id])
  currencies           currencies?           @relation(fields: [currencyId], references: [id])
  products             products[]
  users                users[]
}

model countries {
  id         String     @id
  name       String     @unique
  code       String     @unique
  currencyId String
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  clients    clients[]
  currencies currencies @relation(fields: [currencyId], references: [id])
}

model currencies {
  id            String      @id
  name          String      @unique
  code          String      @unique
  symbol        String
  decimalPlaces Int         @default(2)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  clients       clients[]
  countries     countries[]
}

model inventory_history {
  id        String        @id
  productId String
  quantity  Int
  type      InventoryType
  reason    String?
  userId    String?
  clientId  String
  createdAt DateTime      @default(now())
  products  products      @relation(fields: [productId], references: [id])
  users     users?        @relation(fields: [userId], references: [id])
}

model media {
  id           String    @id
  productId    String?
  kind         String
  s3Key        String
  originalName String
  mimeType     String
  fileSize     Int
  width        Int?
  height       Int?
  durationMs   Int?
  altText      String?
  caption      String?
  sortOrder    Int       @default(0)
  isPrimary    Boolean   @default(false)
  status       String    @default("pending")
  error        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  products     products? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model performance_metrics {
  id                  String   @id
  url                 String
  timestamp           DateTime
  fcp                 Float?
  lcp                 Float?
  fid                 Float?
  cls                 Float?
  ttfb                Float?
  fmp                 Float?
  tti                 Float?
  userAgent           String?
  connectionType      String?
  deviceMemory        Int?
  hardwareConcurrency Int?
  createdAt           DateTime @default(now())
}

model product_categories {
  id         String     @id
  productId  String
  categoryId String
  createdAt  DateTime   @default(now())
  categories categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   products   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
}

model products {
  id                 String               @id
  name               String
  sku                String
  description        String?
  price              Decimal              @db.Decimal(10, 2)
  category           String
  categoryId         String?
  variations         Json?
  stockLevel         Int                  @default(0)
  minStock           Int                  @default(0)
  isActive           Boolean              @default(true)
  clientId           String
  media              Json?
  images             Json?
  videos             Json?
  thumbnailUrl       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  allowPreorder      Boolean              @default(false)
  inventory_history  inventory_history[]
  media              media[]
  product_categories product_categories[]
  clients            clients              @relation(fields: [clientId], references: [id])

  @@unique([sku, clientId])
}

model system_config {
  id          String   @id
  key         String   @unique
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isEncrypted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model users {
  id                String              @id
  email             String
  password          String
  name              String?
  role              Role                @default(ADMIN)
  clientId          String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  inventory_history inventory_history[]
  clients           clients?            @relation(fields: [clientId], references: [id])

  @@unique([email, clientId])
}

enum InventoryType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
  DAMAGE
  TRANSFER
}

enum Plan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}
