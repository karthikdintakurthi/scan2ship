generator client {
  provider = "prisma-client-js"
}

// Schema version: 2025-09-08-migration-fix

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model analytics_events {
  id        String   @id
  eventType String
  eventData Json?
  clientId  String?
  userId    String?
  createdAt DateTime @default(now())
  clients   clients? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  users     users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model audit_logs {
  id        String   @id
  eventType String
  severity  String
  userId    String?
  clientId  String?
  sessionId String?
  ipAddress String
  userAgent String
  resource  String?
  action    String?
  details   String
  metadata  String
  riskScore Int
  tags      String[]
  createdAt DateTime @default(now())

  @@index([clientId])
  @@index([createdAt])
  @@index([eventType])
  @@index([ipAddress])
  @@index([severity])
  @@index([tags])
  @@index([userId])
}

model blocked_ips {
  id        String   @id
  ipAddress String   @unique
  reason    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@index([ipAddress])
}

model client_config {
  id          String   @id
  clientId    String
  key         String
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isEncrypted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  clients     clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, key])
}

model client_credit_costs {
  id        String   @id
  clientId  String
  feature   String
  cost      Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  clients   clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, feature])
}

model client_credits {
  id         String   @id
  clientId   String   @unique
  balance    Int      @default(0)
  totalAdded Int      @default(0)
  totalUsed  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  clients    clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model client_order_configs {
  id                        String  @id
  defaultProductDescription String  @default("ARTIFICAL JEWELLERY")
  defaultPackageValue       Float   @default(5000)
  defaultWeight             Float   @default(100)
  defaultTotalItems         Int     @default(1)
  codEnabledByDefault       Boolean @default(false)
  defaultCodAmount          Float?
  minPackageValue           Float   @default(100)
  maxPackageValue           Float   @default(100000)
  minWeight                 Float   @default(1)
  maxWeight                 Float   @default(50000)
  minTotalItems             Int     @default(1)
  maxTotalItems             Int     @default(100)
  requireProductDescription Boolean @default(true)
  requirePackageValue       Boolean @default(true)
  requireWeight             Boolean @default(true)
  requireTotalItems         Boolean @default(true)
  enableResellerFallback    Boolean @default(true)
  enableThermalPrint        Boolean @default(false)
  enableReferencePrefix     Boolean @default(true)
  clientId                  String  @unique
  pickup_location_overrides Json?   @default("{}")
  displayLogoOnWaybill      Boolean @default(false)
  logoFileName              String?
  logoFileSize              Int?
  logoFileType              String?
  logoEnabledCouriers       String?
  enableAltMobileNumber     Boolean @default(false)
  clients                   clients @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model clients {
  id                              String                            @id
  name                            String
  companyName                     String
  email                           String                            @unique
  phone                           String?
  address                         String?
  city                            String?
  state                           String?
  country                         String                            @default("India")
  pincode                         String?
  subscriptionPlan                String                            @default("basic")
  subscriptionStatus              String                            @default("active")
  subscriptionExpiresAt           DateTime?
  isActive                        Boolean                           @default(true)
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime
  analytics_events                analytics_events[]
  client_config                   client_config[]
  client_credit_costs             client_credit_costs[]
  client_credits                  client_credits?
  client_order_configs            client_order_configs?
  courier_services                courier_services[]
  credit_transactions             credit_transactions[]
  order_analytics                 order_analytics[]
  orders                          orders[]
  pickup_location_order_configs   pickup_location_order_configs[]
  pickup_location_shopify_configs pickup_location_shopify_configs[]
  pickup_locations                pickup_locations[]
  pickup_requests                 pickup_requests[]
  sessions                        sessions[]
  users                           users[]
  webhooks                        webhooks[]
}

model courier_services {
  id                    String  @id
  isActive              Boolean @default(true)
  clientId              String
  isDefault             Boolean @default(false)
  code                  String
  name                  String
  baseRate              Float?
  codCharges            Float?
  estimatedDays         Int?
  freeShippingThreshold Float?
  maxWeight             Float?
  minWeight             Float?
  ratePerKg             Float?
  clients               clients @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([code, clientId])
}

model credit_transactions {
  id                 String   @id
  clientId           String
  userId             String?
  type               String
  amount             Int
  balance            Int
  description        String
  feature            String?
  orderId            Int?
  createdAt          DateTime @default(now())
  clientName         String
  utrNumber          String?
  screenshotFileName String?
  screenshotFileSize Int?
  screenshotFileType String?
  clients            clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  orders             orders?  @relation(fields: [orderId], references: [id])
  users              users?   @relation(fields: [userId], references: [id])
}

model csrf_tokens {
  id        String   @id
  token     String   @unique
  userId    String?
  sessionId String?
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@index([sessionId])
  @@index([token])
  @@index([userId])
}

model order_analytics {
  id              String   @id
  orderId         Int      @unique
  creationPattern String
  clientId        String
  userId          String?
  createdAt       DateTime @default(now())
  clients         clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  orders          orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  users           users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model orders {
  id                       Int                   @id @default(autoincrement())
  clientId                 String
  name                     String
  mobile                   String
  phone                    String?
  address                  String
  city                     String
  state                    String
  country                  String
  pincode                  String
  courier_service          String
  pickup_location          String
  package_value            Float
  weight                   Float
  total_items              Int
  tracking_id              String?
  reference_number         String?
  is_cod                   Boolean               @default(false)
  cod_amount               Float?
  reseller_name            String?
  reseller_mobile          String?
  created_at               DateTime              @default(now())
  updated_at               DateTime
  delhivery_waybill_number String?
  delhivery_order_id       String?
  delhivery_api_status     String?
  delhivery_api_error      String?
  delhivery_retry_count    Int                   @default(0)
  last_delhivery_attempt   DateTime?
  shipment_length          Float?
  shipment_breadth         Float?
  shipment_height          Float?
  product_description      String?
  return_address           String?
  return_pincode           String?
  fragile_shipment         Boolean               @default(false)
  seller_name              String?
  seller_address           String?
  seller_gst               String?
  invoice_number           String?
  commodity_value          Float?
  tax_value                Float?
  category_of_goods        String?
  vendor_pickup_location   String?
  hsn_code                 String?
  seller_cst_no            String?
  seller_tin               String?
  invoice_date             String?
  return_reason            String?
  ewbn                     String?
  shopify_customer_email   String?
  shopify_fulfillment_id   String?
  shopify_note             String?
  shopify_order_id         String?
  shopify_order_number     String?
  shopify_tags             String?
  shopify_update_error     String?
  shopify_update_status    String?
  shopify_update_timestamp DateTime?
  tracking_url             String?
  credit_transactions      credit_transactions[]
  order_analytics          order_analytics?
  clients                  clients               @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model pickup_location_order_configs {
  id                        String           @id
  pickupLocationId          String           @unique
  clientId                  String
  defaultProductDescription String           @default("ARTIFICAL JEWELLERY")
  defaultPackageValue       Float            @default(5000)
  defaultWeight             Float            @default(100)
  defaultTotalItems         Int              @default(1)
  codEnabledByDefault       Boolean          @default(false)
  defaultCodAmount          Float?
  minPackageValue           Float            @default(100)
  maxPackageValue           Float            @default(100000)
  minWeight                 Float            @default(1)
  maxWeight                 Float            @default(50000)
  minTotalItems             Int              @default(1)
  maxTotalItems             Int              @default(100)
  requireProductDescription Boolean          @default(true)
  requirePackageValue       Boolean          @default(true)
  requireWeight             Boolean          @default(true)
  requireTotalItems         Boolean          @default(true)
  enableResellerFallback    Boolean          @default(true)
  enableThermalPrint        Boolean          @default(false)
  enableReferencePrefix     Boolean          @default(true)
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime
  clients                   clients          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  pickup_locations          pickup_locations @relation(fields: [pickupLocationId], references: [id], onDelete: Cascade)
}

model pickup_location_shopify_configs {
  id                     String           @id
  pickupLocationId       String           @unique
  clientId               String
  shopifyPickupLocation  String
  shopifyWebhookSecret   String
  shopifyApiKey          String
  shopifyApiSecret       String
  shopifyShopDomain      String
  shopifyAdminApiToken   String
  shopifyWebhookVersion  String           @default("2025-07")
  isActive               Boolean          @default(true)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime
  shopifyDefaultClientId String?
  clients                clients          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  pickup_locations       pickup_locations @relation(fields: [pickupLocationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([shopifyShopDomain])
}

model pickup_locations {
  id                              String                           @id
  value                           String
  label                           String
  delhiveryApiKey                 String?
  clientId                        String
  pickup_location_order_configs   pickup_location_order_configs?
  pickup_location_shopify_configs pickup_location_shopify_configs?
  clients                         clients                          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user_pickup_locations           user_pickup_locations[]

  @@unique([label, clientId])
}

model pickup_requests {
  id                     String   @id
  clientId               String
  userId                 String
  pickup_date            String
  pickup_time            String
  pickup_address         String
  contact_person         String
  contact_phone          String
  special_instructions   String?
  pickup_location        String
  delhivery_request_id   String?
  status                 String   @default("scheduled")
  created_at             DateTime @default(now())
  updated_at             DateTime
  expected_package_count Int      @default(1)
  clients                clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  users                  users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([pickup_date])
  @@index([status])
  @@index([userId])
}

model rate_limits {
  id          String   @id
  key         String   @unique
  count       Int      @default(0)
  windowStart DateTime
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([expiresAt])
  @@index([key])
}

model sessions {
  id           String    @id
  userId       String
  clientId     String
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  ipAddress    String
  isActive     Boolean   @default(true)
  lastActivity DateTime  @default(now())
  location     String?
  permissions  String
  refreshToken String    @unique
  revokedAt    DateTime?
  role         String
  sessionToken String    @unique
  userAgent    String
  clients      clients   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  users        users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([isActive])
  @@index([refreshToken])
  @@index([sessionToken])
  @@index([userId])
}

model system_config {
  id          String   @id
  key         String   @unique
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isEncrypted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model user_pickup_locations {
  id               String           @id
  userId           String
  pickupLocationId String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  pickup_locations pickup_locations @relation(fields: [pickupLocationId], references: [id], onDelete: Cascade)
  users            users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, pickupLocationId])
}

model users {
  id                    String                  @id
  email                 String
  name                  String
  password              String?
  role                  String                  @default("user")
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  clientId              String
  analytics_events      analytics_events[]
  credit_transactions   credit_transactions[]
  order_analytics       order_analytics[]
  pickup_requests       pickup_requests[]
  sessions              sessions[]
  user_pickup_locations user_pickup_locations[]
  clients               clients                 @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([email, clientId])
}

model webhook_logs {
  id           String   @id
  webhookId    String
  eventType    String
  orderId      Int?
  status       String
  responseCode Int?
  responseBody String?
  errorMessage String?
  attemptCount Int      @default(1)
  createdAt    DateTime @default(now())
  webhooks     webhooks @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([status])
  @@index([webhookId])
}

model webhooks {
  id           String         @id
  clientId     String
  name         String
  url          String
  events       String[]
  secret       String?
  isActive     Boolean        @default(true)
  retryCount   Int            @default(3)
  timeout      Int            @default(30000)
  headers      Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  webhook_logs webhook_logs[]
  clients      clients        @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([isActive])
}
