generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model analytics_events {
  id        String   @id
  eventType String
  eventData Json?
  clientId  String?
  userId    String?
  createdAt DateTime @default(now())
  clients   clients? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  users     users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model client_config {
  id          String   @id
  clientId    String
  key         String
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isEncrypted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  clients     clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, key])
}

model client_credit_costs {
  id        String   @id
  clientId  String
  feature   String
  cost      Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  clients   clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, feature])
}

model client_credits {
  id         String   @id
  clientId   String   @unique
  balance    Int      @default(0)
  totalAdded Int      @default(0)
  totalUsed  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  clients    clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model client_order_configs {
  id                        String  @id
  defaultProductDescription String  @default("ARTIFICAL JEWELLERY")
  defaultPackageValue       Float   @default(5000)
  defaultWeight             Float   @default(100)
  defaultTotalItems         Int     @default(1)
  codEnabledByDefault       Boolean @default(false)
  defaultCodAmount          Float?
  minPackageValue           Float   @default(100)
  maxPackageValue           Float   @default(100000)
  minWeight                 Float   @default(1)
  maxWeight                 Float   @default(50000)
  minTotalItems             Int     @default(1)
  maxTotalItems             Int     @default(100)
  requireProductDescription Boolean @default(true)
  requirePackageValue       Boolean @default(true)
  requireWeight             Boolean @default(true)
  requireTotalItems         Boolean @default(true)
  enableResellerFallback    Boolean @default(true)
  enableThermalPrint        Boolean @default(false)
  enableReferencePrefix     Boolean @default(true)
  clientId                  String  @unique
  clients                   clients @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model clients {
  id                    String                @id
  name                  String
  companyName           String
  email                 String                @unique
  phone                 String?
  address               String?
  city                  String?
  state                 String?
  country               String                @default("India")
  pincode               String?
  subscriptionPlan      String                @default("basic")
  subscriptionStatus    String                @default("active")
  subscriptionExpiresAt DateTime?
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime
  analytics_events      analytics_events[]
  api_keys              api_keys[]
  client_config         client_config[]
  client_credit_costs   client_credit_costs[]
  client_credits        client_credits?
  client_order_configs  client_order_configs?
  courier_services      courier_services[]
  credit_transactions   credit_transactions[]
  order_analytics       order_analytics[]
  orders                orders[]
  pickup_locations      pickup_locations[]
  sessions              sessions[]
  shopify_integrations  shopify_integrations[]
  shopify_orders        shopify_orders[]
  users                 users[]
  webhooks              webhooks[]
}

model courier_services {
  id        String  @id
  isActive  Boolean @default(true)
  clientId  String
  isDefault Boolean @default(false)
  code      String
  name      String
  // Rate calculation fields
  baseRate      Float?  // Base shipping rate in INR
  ratePerKg     Float?  // Additional rate per kg in INR
  minWeight     Float?  // Minimum weight for base rate (in grams)
  maxWeight     Float?  // Maximum weight supported (in grams)
  codCharges    Float?  // COD charges in INR
  freeShippingThreshold Float? // Free shipping above this value (in INR)
  estimatedDays Int?    // Estimated delivery days
  clients       clients @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([code, clientId])
}

model credit_transactions {
  id                 String   @id
  clientId           String
  userId             String?
  type               String
  amount             Int
  balance            Int
  description        String
  feature            String?
  orderId            Int?
  createdAt          DateTime @default(now())
  clientName         String
  utrNumber          String?
  screenshotFileName String?
  screenshotFileSize Int?
  screenshotFileType String?
  clients            clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  orders             orders?  @relation(fields: [orderId], references: [id])
  users              users?   @relation(fields: [userId], references: [id])
}

model order_analytics {
  id              String   @id
  orderId         Int      @unique
  creationPattern String
  clientId        String
  userId          String?
  createdAt       DateTime @default(now())
  clients         clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  orders          orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  users           users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model orders {
  id                       Int                   @id @default(autoincrement())
  clientId                 String
  name                     String
  mobile                   String
  phone                    String?
  address                  String
  city                     String
  state                    String
  country                  String
  pincode                  String
  courier_service          String
  pickup_location          String
  package_value            Float
  weight                   Float
  total_items              Int
  tracking_id              String?
  reference_number         String?
  is_cod                   Boolean               @default(false)
  cod_amount               Float?
  reseller_name            String?
  reseller_mobile          String?
  created_at               DateTime              @default(now())
  updated_at               DateTime
  delhivery_waybill_number String?
  delhivery_order_id       String?
  delhivery_api_status     String?
  delhivery_api_error      String?
  delhivery_retry_count    Int                   @default(0)
  last_delhivery_attempt   DateTime?
  
  // Shopify integration fields
  shopify_status           String?               // pending, synced, fulfilled, error
  shopify_tracking_number  String?
  shopify_fulfillment_id   String?
  shopify_api_status       String?               // pending, success, failed
  shopify_api_error        String?
  last_shopify_attempt     DateTime?
  
  shipment_length          Float?
  shipment_breadth         Float?
  shipment_height          Float?
  product_description      String?
  return_address           String?
  return_pincode           String?
  fragile_shipment         Boolean               @default(false)
  seller_name              String?
  seller_address           String?
  seller_gst               String?
  invoice_number           String?
  commodity_value          Float?
  tax_value                Float?
  category_of_goods        String?
  vendor_pickup_location   String?
  hsn_code                 String?
  seller_cst_no            String?
  seller_tin               String?
  invoice_date             String?
  return_reason            String?
  ewbn                     String?
  credit_transactions      credit_transactions[]
  order_analytics          order_analytics?
  clients                  clients               @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model pickup_locations {
  id              String  @id
  value           String
  label           String
  delhiveryApiKey String?
  clientId        String
  clients         clients @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([label, clientId])
}

model sessions {
  id           String    @id
  userId       String
  clientId     String
  sessionToken String    @unique
  refreshToken String    @unique
  ipAddress    String
  userAgent    String
  location     String?
  role         String
  permissions  String    // JSON string
  createdAt    DateTime  @default(now())
  lastActivity DateTime  @default(now())
  expiresAt    DateTime
  isActive     Boolean   @default(true)
  revokedAt    DateTime?
  clients      clients   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  users        users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([refreshToken])
  @@index([isActive])
  @@index([expiresAt])
}

model system_config {
  id          String   @id
  key         String   @unique
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isEncrypted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model users {
  id                  String                @id
  email               String
  name                String
  password            String?
  role                String                @default("user")
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  clientId            String
  analytics_events    analytics_events[]
  credit_transactions credit_transactions[]
  order_analytics     order_analytics[]
  sessions            sessions[]
  clients             clients               @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([email, clientId])
}

model api_keys {
  id          String   @id
  name        String
  key         String   @unique
  secret      String?  // For HMAC validation
  clientId    String
  isActive    Boolean  @default(true)
  permissions String[] // Array of permissions like ["orders:read", "orders:write"]
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  clients     clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([key])
  @@index([clientId])
}

model shopify_integrations {
  id                String   @id
  clientId          String
  shopDomain        String   // e.g., "mystore.myshopify.com"
  accessToken       String   // Shopify access token
  webhookSecret     String?  // For webhook validation
  isActive          Boolean  @default(true)
  lastSyncAt        DateTime?
  syncStatus        String   @default("pending") // pending, active, error
  errorMessage      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  clients           clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([shopDomain, clientId])
  @@index([clientId])
  @@index([shopDomain])
}

model shopify_orders {
  id                String   @id
  clientId          String
  shopifyOrderId    String   // Shopify order ID
  shopifyOrderName  String   // e.g., "#1001"
  scan2shipOrderId  Int?     // Reference to orders table
  status            String   @default("pending") // pending, synced, error
  syncData          Json?    // Store Shopify order data
  errorMessage      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  clients           clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([shopifyOrderId, clientId])
  @@index([clientId])
  @@index([shopifyOrderId])
}

model webhooks {
  id          String   @id
  clientId    String
  name        String
  url         String
  events      String[] // Array of events like ["order.created", "order.updated"]
  secret      String?  // For webhook signature validation
  isActive    Boolean  @default(true)
  retryCount  Int      @default(3)
  timeout     Int      @default(30000) // Timeout in milliseconds
  headers     Json?    // Custom headers to send with webhook
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  clients     clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  webhook_logs webhook_logs[]

  @@index([clientId])
  @@index([isActive])
}

model webhook_logs {
  id          String   @id
  webhookId   String
  eventType   String
  orderId     Int?
  status      String   // success, failed, pending
  responseCode Int?
  responseBody String?
  errorMessage String?
  attemptCount Int     @default(1)
  createdAt   DateTime @default(now())
  webhooks    webhooks @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([status])
  @@index([createdAt])
}

model rate_limits {
  id          String   @id
  key         String   @unique
  count       Int      @default(0)
  windowStart DateTime
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([expiresAt])
  @@index([key])
}


model audit_logs {
  id        String   @id
  eventType String
  severity  String
  userId    String?
  clientId  String?
  sessionId String?
  ipAddress String
  userAgent String
  resource  String?
  action    String?
  details   String   // JSON string
  metadata  String   // JSON string
  riskScore Int
  tags      String[] // Array of strings
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([severity])
  @@index([userId])
  @@index([clientId])
  @@index([ipAddress])
  @@index([createdAt])
  @@index([tags])
}

model csrf_tokens {
  id        String    @id
  token     String    @unique
  userId    String?
  sessionId String?
  expiresAt DateTime
  createdAt DateTime  @default(now())

  @@index([token])
  @@index([userId])
  @@index([sessionId])
  @@index([expiresAt])
}

model blocked_ips {
  id        String   @id
  ipAddress String   @unique
  reason    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([ipAddress])
  @@index([expiresAt])
}
